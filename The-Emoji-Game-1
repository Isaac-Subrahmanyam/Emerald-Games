
// Press the (SAVE ICON on the top left) to get your Save File
// Copy, paste, and replace the ENTIRE Save File into this Array
// Save as a Spin-off, this is YOUR profile now.

var Save_File = [0,0,0,0,0,0,0,0,0,false,false,false,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,true,'defualt','defualt',true,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false];

/** Turn this VAR to TRUE if your computer is lagging! **/
var deLag = false;

/**  HOW TO PLAY:  **/
/*
    · Use the UP ARROW KEY to jump!

    · Dash through the LEVEL without losing ALL of your LIVES, or you will FAIL the LEVEL!

    · When you reach the ammount of STARS to ACHIEVE something, then it will say "Achieved" on the buy BUTTON, and you can CLICK it to SELECT it, and then you can PLAY with it.
 
    · It will WARN you if you EARNED an ACHIEVEMENT, so if you have, then go to the ACHIEVEMENT PAGE to see what you EARNED!

*/ // <- Click that box for HELP with UNDERSTANDING how to play this game

/**   MORE HELP:   **/
/*
    · Not Loading:
     - It could take a while, so you might just need too wait a little, but if it still isn't working, then RESTART the program, and if it is still not loading, then RELOAD your TAB/PAGE.
    
    
    · Not Saving:
     - Be sure you copied the ENTIRE Save_File, and replaced the ENTIRE old Save_File code with the new Save_File code.
        
        
    · Other Issue?
     - Report it too me, and I will fix it imedietley! ;)
    
*/ // <- Click that box for HELP with TECHNICAL ISSUES of the game

/**


********************************************
*      @Author: Isaac Emerald ©2017.       *
*                                          *
*    >>>  EMERALD GAMES PRODUCTION  <<<    *
*            ~The EMOJI GAME!              *
********************************************

@Subscribe:
    khanacademy.org/computer-programming/-/6018029635043328

@TheEmojiGame:
    Play through tough and fun challenges! Achieve more characters and texture packs! Dash with perfection, and play with exitement, The Emoji Game!

@Includes:
    · 40 - Levels!
    · 8 - Achievements!  
    · 14 - Achievable Emojis!
    · 3 - Achievable Texture Packs!

@CREDITS: 
    · Inspired by the well known game - "Geometry Dash".
    · Huge thanks to ScusX, for helping me not only with levels, but with bugs, and even giving me ideas for the game! Thanks Scus! I couldn't do this nearly as good without you! Please check out ScusX! He is an amazing programmer!
    ScusX Profile:
        khanacademy.org/profile/GiantScus/projects
    ScusX Sub:
        khanacademy.org/computer-programming/-/4926293662826496
    
@BonusCommentary:    
    Date Started: 1/27/2017
    Date Ended: 11/27/2017
    It took me 10 months to finish this game!
**/


var pauseGame = false, stopGameForSign = false;
var GameLink = "https://www.khanacademy.org/computer-programming/the-emoji-game/5150805528608768";

//player variables
var playerX = 82,
    playerY = 200,
    playerSize = 49,
    playerGravity = 0,
    rotateEmoji = 0;

//level done states
var death = false,
    levelDone = false;

var levels = 1;

var pages = "home";

var keys = [];

var cursorLoad = 0;

//achievement variables
var achievement = {
    
    state: [Save_File[0], Save_File[1], Save_File[2], Save_File[3], Save_File[4], Save_File[5], Save_File[6], Save_File[7]],
    
    names: ["PERFECT SCORE", "NEW EMOJI", "NEW MOD", "STAR PLAYER", "UNLOCK IT", "MOSTLY DEAD", "POWER UP", "UNLOCK ALL"],
    
    directions: [
        
    "Get 3 stars on a map", "Achieve and select a new emoji",
    
    "Achieve and select a new mod", "Get 30 stars", "Unlock your first map pack",
    
    "Die 100 times, but don't worry,\nyou will only be mostly dead!\nThere is a big difference between mostly,\nand all dead! ;)",
    
    "Use every PowerUp",
    
    "Unlock every last thing, including:\nAchievements, Emojis, Mods, etc.."],
    
    
    earned: [false, false, false, false, false, false, false, false, false, false, false, false, false, false],
    
    earned2: [Save_File[82], Save_File[83], Save_File[84], Save_File[85], Save_File[86], Save_File[87], Save_File[88], Save_File[89], Save_File[90], Save_File[91], Save_File[92], Save_File[93], Save_File[94], Save_File[95]],
    
    earnedDelay: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    
    move: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    
    x: [], y: [],
};

// scores on the different ahievements tracker
var mostlyDeadNum = Save_File[8],
    powerUpNum = [Save_File[9], Save_File[10], Save_File[11]];


//map stars
var mapStars = [Save_File[12], Save_File[13], Save_File[14], Save_File[15], Save_File[16], Save_File[17], Save_File[18], Save_File[19], Save_File[20], Save_File[21], Save_File[22], Save_File[23], Save_File[24], Save_File[25], Save_File[26], Save_File[27], Save_File[28], Save_File[29], Save_File[30], Save_File[31], Save_File[32], Save_File[33], Save_File[34], Save_File[35], Save_File[36], Save_File[37], Save_File[38], Save_File[39], Save_File[40], Save_File[41], Save_File[42], Save_File[43], Save_File[44], Save_File[45], Save_File[46], Save_File[47], Save_File[48], Save_File[49], Save_File[50], Save_File[51]],

mapDif = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6];

// player lives
var hearts = 3;

// respawn points for player
var respawnX = 82;
var respawnY = 200;
var respawnDelay = 0;

var scoreShowcase = -1000;
var volumeSwitch = Save_File[55];

var emoji = {
    
        names_description: {
        
        n: ["Smiley", "Calm", "Love", "Frustrated", "Funny", "Joke", "Hilarious", "Nerd", "Cool", "Liar", "Dead", "Angry", "Angel", "Sick", "Rich"],
        
        d: ["Hi, I'm your average emoji!", "I just love sleeping!", "I love you! You're my favorite!", "x = 5; x = ? ... Nooo, I can't figure it out! :(", "Hahahaha! What was I talking about again?", "Don't take it personally, I kid!", "That was so funny, I'm crying!", "I love school!", "Too cool for school, am I right!", "Whatever it was, it wasn't me!", "...........", "Who puts broccoli on pizza, come on! >:(", "You put broccoli on my pizza? I don't mind! :)", "I just ate broccoli on pizza, and, well, .... *barf*", "Give me your money! Oh, I mean, please!"]
        
        },
        
        prices: [0, 3, 6, 12, 15, 21, 24, 27, 33, 39, 45, 48, 54, 60, 75],
        Switch: ["defualt", "content", "heart", "frustrated", "XD", "winky", "tears-of-joy", "glasses", "sunglasses", "eyeballroll", "dead", "angry", "angel", "sick", "money"],
        
        earned: [true, false, false, false, false, false, false, false, false, false, false, false, false, false, false],
        
        earned2: [Save_File[67], Save_File[68], Save_File[69], Save_File[70], Save_File[71], Save_File[72], Save_File[73], Save_File[74], Save_File[75], Save_File[76], Save_File[77], Save_File[78], Save_File[79], Save_File[80], Save_File[81]],
        
        earnedDelay: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        
        move: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    },
    
    currentEmoji = Save_File[54],
    
    currentBackdrop = Save_File[53];

var
    backgroundPrices = [0, 30, 72, 87],
    
    backgroundSwitch = ["defualt", "retro", "candy", "roman"],
    
    backdropName = ["SUNSHINE", "RETRO", "CANDY LAND", "CASTLE"],
    
    backdropNameColor = [color(255, 162, 41), color(5, 122, 255), color(255, 0, 0), color(74, 74, 74)],
    
    backdropEarned = [true, false, false, false],
    
    backdropEarned2 = [Save_File[96], Save_File[97], Save_File[98], Save_File[99]],
    
    backdropEarnedDelay = [0, 0, 0, 0],
    
    backdropMove = [0, 0, 0, 0];

var starCoins;

var extraSpeedTimer = 0;

var mapMove = 670;

var
    particleX = [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
    particleY = [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
    particleSize = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
    particleCount = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    particleStyle = function(x, y, w, h, style){
    
    rectMode(CENTER);
    
    switch(style)
    {
        case "defualt":
            
            fill(0, 153, 255, 150);
            rect(x, y, w, h);
            
            break;
            
        case "retro":
            
            strokeWeight(2);
            fill(0, 0, 0);
            stroke(0, 255, 30);
            ellipse(x, y, w, h);
            
            break;
            
        case "candy":
            
            fill(102, 42, 2, 200);
            rect(x, y, w, h, w / 5);
            
            break;
            
        case "roman":
            
            fill(w * 3, 0, 0, 22);
            ellipse(x, y - h / 5, w, h);
            ellipse(x - w / 2, y + h / 5, w, h);
            ellipse(x + w / 2, y + h / 5, w, h);
            ellipse(x, y + h / 2, w, h);
            ellipse(x - w / 1.5, y + h / 2, w, h);
            ellipse(x - w / 1.5, y - h / 4, w, h);
            ellipse(x - w / 0.9, y - h / 129, w, h);
            
            break;
    }
    rectMode(0);
    };

var 
    powerupApply = false,
    powerupDelayTimer = 0,
    gotTheSpecialBox = [false, false, false, false, false, false],
    gotTheSpecialBoxAnim = [0, 0, 0, 0, 0, 0],
    flap = 0,
    currentPowerup = "defualt",
    birdStyle = function(x, y, w, h, r, style){
    
    pushMatrix();
    translate(x, y);
    rotate(r);
    
    rectMode(CENTER);
    
    switch(style)
    {
    case "defualt":
    fill(60, 0, 255);
    arc(-w / 4, -h / 1.4, w, h / 1.5, 90, 109);
    arc(-w / 11, -h / 1.3, w, h, 90, 119);
    
    fill(0, 170, 255);
    rect(0, 0, w, h);
    
    fill(255, 255, 255);
    ellipse(w / 5, h / 5, w / 3, h / 3);
    
    fill(0, 0, 0);
    ellipse(w / 5.0, h / 4.5, w / 6, h / 6);
    
    
    fill(255, 183, 0);
    arc(0, h / 2, w / 1.5, h / 2, 0, 90);
    fill(255, 119, 0);
    arc(0, h / 2, w / 2, h / 3, 90, 180);
    
    rotate(flap);
    
    fill(0, 123, 255);
    arc(0, 0, w / 1.5, h / 1.3, 180, 180 + 90);
        break;
        
    case "retro":
        
    strokeWeight(2);
    fill(255, 64, 0);
    arc(w / 15, h / 2, w / 3, h / 1.2, 90, 180);
    fill(255, 123, 0);
    arc(0, h / 2, w / 1.0, h, -90, 63);
    
    fill(0, 0, 0);
    stroke(7, 199, 0);
    arc(-w / 4.3, -h / 2.5, w / 2, h / 1.5, 0, 180 + 75);
    ellipse(0, 0, w * 1.2, h * 1.2);
    
    fill(0, 0, 0);
    ellipse(w / 4, h / 4, w / 3, h / 3);
    ellipse(w / 4.0, h / 3.3, w / 7, h / 7);
    
    rotate(flap);
    
    stroke(251, 255, 0);
    arc(0, 0, w / 1.5, h / 1.2, 168, 165 + 90);
    arc(0, 0, w / 2.2, h / 1.7, 168, 165 + 90);
    arc(0, 0, w / 4.0, h / 3.3, 168, 165 + 90);
        
        break;
        
    case "candy":
    
    fill(217, 134, 9);
    arc(-w / 4, -h / 1.4, w, h / 1.5, 90, 109);
    arc(-w / 11, -h / 1.3, w, h, 90, 119);
    
    stroke(214, 214, 214);
    strokeWeight(w / 20);
    
    if(h > 1)
    {
        fill(255, 255, 255);
        rect(0, 0, w, h, w / 4);
    }
    
    if(h < 1)
    {
        fill(255, 255, 255);
        rect(0, 0, w, -h, w / 4);
    }
    
    stroke(84, 51, 1);
    fill(122, 62, 2);
    beginShape();
    vertex(w / 2.7, h / 2.0);
    vertex(w / 2.2, h / 3.8);
    vertex(w / 3.1, h / 26.7);
    vertex(w / 3.0, -h / 14.1);
    vertex(w / 5.0, -h / 4.9);
    vertex(w / 4.3, -h / 2.6);
    vertex(w / 9.2, -h / 2.0);
    vertex(w / 21.5, -h / 2.3);
    vertex(-w / 8.9, -h / 2.3);
    vertex(-w / 4.2, -h / 1.1);
    vertex(-w / 14.4, -h / 1.3);
    vertex(-w / 25.8, -h / 1.1);
    vertex(w / 11.2, -h / 1.2);
    vertex(w / 4.9, -h / 1.2);
    vertex(w / 3.2, -h / 1.4);
    vertex(w / 2.6, -h / 1.7);
    vertex(w / 1.9, -h / 2.1);
    vertex(w / 1.7, -h / 3.5);
    vertex(w / 1.9, -h / 8.8);
    vertex(w / 1.7, h / 8.8);
    vertex(w / 1.8, h / 3.1);
    vertex(w / 2.5, h / 2.0);
    endShape();
    
    noStroke();
    
    fill(0, 0, 0);
    ellipse(w / 5, h / 5, w / 5, h / 5);
    
    fill(255, 255, 255);
    ellipse(w / 5.1, h / 4.2, w / 10, h / 10);
    
    fill(166, 79, 3);
    arc(0, h / 2, w / 2, h / 3, 90, 180);
    fill(214, 111, 8);
    arc(0, h / 2, w / 1.5, h / 2, 0, 100);
    
    rotate(flap);
    
    fill(224, 122, 4);
    rect(-w / 5, -h / 8, w / 3.5, h / 2.0);
    fill(117, 52, 2, 100);
    ellipse(-w / 7.0, h / 25.0, w / 17, h / 17);
    ellipse(-w / 4.1, h / 25.0, w / 17, h / 17);
    ellipse(-w / 5.0, -h / 18.6, w / 17, h / 17);
    ellipse(-w / 7.0, -h / 7.6, w / 17, h / 17);
    ellipse(-w / 4.1, -h / 7.6, w / 17, h / 17);
    ellipse(-w / 5.0, -h / 4.6, w / 17, h / 17);
    ellipse(-w / 7.0, -h / 3.4, w / 17, h / 17);
    ellipse(-w / 4.1, -h / 3.4, w / 17, h / 17);
    ellipse(-w / 7.0, h / 25.0, w / 20, h / 20);
    ellipse(-w / 4.1, h / 25.0, w / 20, h / 20);
    ellipse(-w / 5.0, -h / 18.6, w / 20, h / 20);
    ellipse(-w / 7.0, -h / 7.6, w / 20, h / 20);
    ellipse(-w / 4.1, -h / 7.6, w / 20, h / 20);
    ellipse(-w / 5.0, -h / 4.6, w / 20, h / 20);
    ellipse(-w / 7.0, -h / 3.4, w / 20, h / 20);
    ellipse(-w / 4.1, -h / 3.4, w / 20, h / 20);

        
        break;
        
    case "roman":
        
        fill(252, 201, 81);
            beginShape();
            vertex(w / 2.0, -h / 2.3);
            vertex(w / 2.2, -h / 1.4);
            vertex(w / 3.1, -h / 1.1);
            vertex(w / 5.6, -h / 1.0);
            vertex(w / 3.9, -h / 1.3);
            vertex(w / 4.0, -h / 1.6);
            vertex(w / 6.0, -h / 2.3);
            endShape();
            
            noStroke();
            fill(8, 166, 45);
            if(h > 1)
            {
                rect(0, 0, w, h, w / 8);
            }
            
            if(h < 1)
            {
                rect(0, 0, w, -h, w / 8);
            }
            
            beginShape();
            vertex(-w / 2.0, -h / 2.3);
            vertex(-w / 2.2 + sin(frameCount * 3) * w / 15, -h / 1.4);
            vertex(-w / 2.0 - sin(frameCount * 5) * w / 20, -h / 1.0);
            vertex(-w / 2.5 + sin(frameCount * 5) * w / 20, -h / 0.8);
            vertex(-w / 2.6 - sin(frameCount * 5) * w / 20, -h / 1.0);
            vertex(-w / 3.8 + sin(frameCount * 3) * w / 15, -h / 1.4);
            vertex(-w / 7.3, -h / 2.3);
            endShape();
            
            fill(255, 170, 0);
            arc(-w / 2, h / 2, w / 1.9, h / 1.1, -89, 0);
            
            fill(214, 143, 0);
            rect(-w / 2.3, h / 3.6, w / 40, h / 2.3);
            rect(-w / 2.9, h / 3.2, w / 40, h / 2.7);
            
            fill(255, 251, 0, 70);
            arc(-w / 2, h / 2, w / 1.5, h / 0.9, -89, 0);
            arc(-w / 2, h / 2, w / 1.7, h / 1, -89, 0);
            
            fill(0, 0, 0, 80);
            ellipse(-w / 47.6, h / 3.6, w / 12, h / 12);
            ellipse(-w / 8.0, h / 2.5, w / 12, h / 12);
            ellipse(-w / 6.0, h / 5.4, w / 12, h / 12);
            
            stroke(250, 193, 50);
            strokeWeight(w / 46);
            fill(250, 193, 50);
            beginShape();
            vertex(w / 5.8, h / 3.2);
            vertex(w / 2.8, h / 3.8);
            vertex(w / 3.9, h / 4.3);
            vertex(w / 2.4, h / 9.4);
            vertex(w / 3.5, h / 7.0);
            vertex(w / 2.3, -h / 19.5);
            vertex(w / 3.5, h / 19.5);
            endShape();
            noStroke();
            
            fill(0, 0, 0);
            rotate(h / 2);
            ellipse(w / 3.4, h / 17.0, w / 7, h / 3);
            rotate(-h / 2);
            
            fill(255, 119, 0);
            beginShape();
            vertex(-w / 13.0, h / 2.0);
            vertex(-w / 36.0, h / 1.5);
            vertex(-w / 8.9, h / 1.4);
            vertex(-w / 3.7, h / 2.0);
            endShape();
            
            fill(255, 183, 0);
            beginShape();
            vertex(w / 3.6, h / 2.0);
            vertex(w / 12.1, h / 1.2);
            vertex(-w / 8.5, h / 1.2);
            vertex(-w / 3.4, h / 1.5);
            vertex(-w / 8.9, h / 1.4);
            vertex(-w / 36.0, h / 1.5);
            vertex(-w / 13.0, h / 2.0);
            endShape();
            
            rotate(flap);
            
            //wing
            stroke(224, 0, 0);
            strokeWeight(w / 15);
            fill(255, 0, 0);
            
            beginShape();
            vertex(-w / 9.7, -h / 24.1);
            vertex(-w / 2.4, -h / 2.4);
            vertex(-w / 4.0, -h / 1.0);
            vertex(-w / 3.9, -h / 1.2);
            vertex(-w / 3.8, -h / 1.4);
            vertex(-w / 5.2, -h / 1.6);
            vertex(-w / 4.3, -h / 1.9);
            vertex(-w / 4.4, -h / 2.4);
            vertex(-w / 6.7, -h / 2.9);
            vertex(-w / 6.1, -h / 4.1);
            vertex(-w / 6.6, -h / 6.1);
            vertex(-w / 9.7, -h / 24.1);
            endShape();
            noStroke();
        
        break;
    }
    
    popMatrix();
    
    rectMode(0);
},
    teleportNum = 0,
    bubbleBoY = 0, bubbleBoYSwitch = "UP", delayClick  = 0, growAnimBox = 0,
    switchGravity = "DOWN", coolGravityguyAnimation = [0, 10, 20, 30, 40, 50],
    coolSpinnerPU = 0,
    emojiBox = function(x, y, w, h){
        
        fill(0, 78, 173);
        rect(x, y, w, h);
        
        fill(255, 255, 255, 50);
        rect(x, y, w / 1.2, h / 1.2);
        rect(x, y, w / 1.8, h / 1.8);
        rect(x, y, w / 3, h / 3);
        
        rectMode(CENTER);
        fill(21, 2, 163);
        rect(x + w / 2, y - h / 7.2, w / 2.6, h / 2, w / 20);
        fill(255, 240, 166);
        rect(x + w / 2, y - h / 7.2, w / 3.3, h / 2.5, w / 20);
        fill(21, 2, 163);
        rect(x + w / 2.4, y - h / 7.2, w / 22.2, h / 2, w / 20);
        rect(x + w / 1.8, y - h / 7.2, w / 22.2, h / 2, w / 20);
        fill(55, 95, 252);
        rect(x + w /2, y - h / 18.1, w * 0.9, h / 4);
        rect(x + w /2, y - h / 10.5, w * 0.6, h / 4);
        fill(4, 42, 194);
        rect(x + w /2, y, w * 1.2, h / 4, w / 15);
        fill(127, 153, 255, 100);
        rect(x + w /2, y, w * 1.13, h / 6, w / 15);
        rect(x + w /2, y, w * 1.0, h / 15, w / 15);
        fill(2, 50, 105);
        rect(x + w / 3.7, y + h / 2.8, w / 2.7, h / 3.2);
        rect(x + w / 1.39, y + h / 2.8, w / 2.7, h / 3.2);
        rect(x + w / 3.7, y + h / 1.4, w / 2.7, h / 3.2);
        rect(x + w / 1.39, y + h / 1.4, w / 2.7, h / 3.2);
        fill(214, 238, 252, 50);
        rect(x + w / 3.7, y + h / 2.8, w / 3.7, h / 4.3);
        rect(x + w / 1.39, y + h / 2.8, w / 3.7, h / 4.3);
        rect(x + w / 3.7, y + h / 1.4, w / 3.7, h / 4.3);
        rect(x + w / 1.39, y + h / 1.4, w / 3.7, h / 4.3);
        rect(x + w / 3.7, y + h / 2.8, w / 6, h / 6);
        rect(x + w / 1.39, y + h / 2.8, w / 6, h / 6);
        rect(x + w / 3.7, y + h / 1.4, w / 6, h / 6);
        rect(x + w / 1.39, y + h / 1.4, w / 6, h / 6);
        
        if(w >= 30)
        {
            textSize(10);
            fill(255, 255, 255);
            text("EMOJI BOX", x + w / 2, y);
        }
        rectMode(0);
        
    },
    emojiBoxBubble = function(x, y, w, h){
        
        fill(65, 148, 196);
        rect(x, y, w, h);
        
        rectMode(CENTER);
        fill(65, 148, 196);
        rect(x + w / 2, y - h / 7.2, w / 2.6, h / 2, w / 20);
        fill(65, 148, 196);
        rect(x + w / 2, y - h / 7.2, w / 3.3, h / 2.5, w / 20);
        fill(255, 255, 255, 40);
        rect(x + w / 2.4, y - h / 7.2, w / 22.2, h / 2, w / 20);
        rect(x + w / 1.8, y - h / 7.2, w / 22.2, h / 2, w / 20);
        fill(65, 148, 196);
        rect(x + w /2, y - h / 18.1, w * 0.9, h / 4);
        rect(x + w /2, y - h / 10.5, w * 0.6, h / 4);
        fill(65, 148, 196);
        rect(x + w /2, y, w * 1.2, h / 4, w / 15);
        fill(127, 153, 255, 100);
        rect(x + w /2, y, w * 1.13, h / 6, w / 15);
        rect(x + w /2, y, w * 1.0, h / 15, w / 15);
        fill(255, 255, 255, 50);
        rect(x + w / 3.7, y + h / 2.8, w / 2.7, h / 3.2);
        rect(x + w / 1.39, y + h / 2.8, w / 2.7, h / 3.2);
        rect(x + w / 3.7, y + h / 1.4, w / 2.7, h / 3.2);
        rect(x + w / 1.39, y + h / 1.4, w / 2.7, h / 3.2);
        fill(214, 238, 252, 50);
        rect(x + w / 3.7, y + h / 2.8, w / 3.7, h / 4.3);
        rect(x + w / 1.39, y + h / 2.8, w / 3.7, h / 4.3);
        rect(x + w / 3.7, y + h / 1.4, w / 3.7, h / 4.3);
        rect(x + w / 1.39, y + h / 1.4, w / 3.7, h / 4.3);
        rect(x + w / 3.7, y + h / 2.8, w / 6, h / 6);
        rect(x + w / 1.39, y + h / 2.8, w / 6, h / 6);
        rect(x + w / 3.7, y + h / 1.4, w / 6, h / 6);
        rect(x + w / 1.39, y + h / 1.4, w / 6, h / 6);
        
        textSize(10);
        fill(255, 255, 255);
        text("EMOJI BOX", x + w / 2, y);
        
        rectMode(0);
        
    },
    gemForSpecialBox = function(x, y, w, h, c){
    
    //stroke
    stroke(255, 255, 255, 35);
    strokeWeight(w / 25);
    
    //base
    fill(c);
    beginShape();
    vertex(x - w, y - h / 2);
    vertex(x - w / 2, y - h);
    vertex(x + w / 2, y - h);
    vertex(x + w, y - h / 2);
    vertex(x + w, y + h);
    vertex(x + w / 2, y + h * 1.5);
    vertex(x - w / 2, y + h * 1.5);
    vertex(x - w, y + h);
    vertex(x - w, y - h / 2);
    endShape();
    
    fill(255, 217, 0, 80);
    beginShape();
    vertex(x + w, y - h / 2);
    vertex(x + w, y + h);
    vertex(x + w / 2, y + h * 1.5);
    vertex(x - w / 2, y + h * 1.5);
    vertex(x - w, y + h);
    endShape();
    
    beginShape();
    vertex(x + w, y - h / 4);
    vertex(x + w, y + h);
    vertex(x + w / 2, y + h * 1.5);
    vertex(x - w / 2, y + h * 1.5);
    vertex(x - w / 1.3, y + h * 1.2);
    endShape();
    
    beginShape();
    vertex(x + w, y + h / 6);
    vertex(x + w, y + h);
    vertex(x + w / 2, y + h * 1.5);
    vertex(x - w / 2, y + h * 1.5);
    vertex(x - w / 1.6, y + h * 1.3);
    endShape();
    
    beginShape();
    vertex(x + w, y + h / 1.3);
    vertex(x + w, y + h);
    vertex(x + w / 2, y + h * 1.5);
    vertex(x - w / 2, y + h * 1.5);
    vertex(x - w / 2.4, y + h * 1.5);
    endShape();
    
    //1
    fill(255, 255, 255, 75);
    noStroke();
    beginShape();
    vertex(x - w, y - h / 2);
    vertex(x - w / 2, y - h);
    vertex(x - w / 3, y - h / 2);
    vertex(x - w / 2, y - h / 3);
    endShape();
    
    //2
    fill(0, 0, 0, 30);
    beginShape();
    vertex(x - w / 2, y - h);
    vertex(x - w / 3, y - h / 2);
    vertex(x + w / 3, y - h / 2);
    vertex(x + w / 2, y - h);
    endShape();
    
    //3
    beginShape();
    fill(0, 0, 0, 50);
    vertex(x + w / 2, y - h);
    vertex(x + w, y - h / 2);
    vertex(x + w / 2, y - h / 3);
    vertex(x + w / 3, y - h / 2);
    endShape();
    
    //4
    fill(0, 0, 0, 60);
    beginShape();
    vertex(x + w, y - h / 2);
    vertex(x + w, y + h);
    vertex(x + w / 2, y + h / 1.1);
    vertex(x + w / 2, y - h / 3);
    endShape();
    
    //5
    fill(0, 0, 0, 70);
    beginShape();
    vertex(x + w, y + h);
    vertex(x + w / 2, y + h * 1.5);
    vertex(x + w / 3, y + h);
    vertex(x + w / 2, y + h / 1.2);
    endShape();
    
    //6
    fill(0, 0, 0, 40);
    beginShape();
    vertex(x + w / 3, y + h);
    vertex(x + w / 2, y + h * 1.5);
    vertex(x - w / 2, y + h * 1.5);
    vertex(x - w / 3, y + h);
    endShape();
    
    //7
    fill(0, 0, 0, 25);
    beginShape();
    vertex(x - w, y + h);
    vertex(x - w / 2, y + h * 1.5);
    vertex(x - w / 3, y + h);
    vertex(x - w / 2, y + h / 1.2);
    endShape();
    
    //8
    fill(255, 255, 255, 20);
    beginShape();
    vertex(x - w, y + h);
    vertex(x - w / 2, y + h / 1.2);
    vertex(x - w / 2, y - h / 3);
    vertex(x - w, y - h / 2);
    endShape();
    
    //shade
    fill(0, 0, 0, 4);
    beginShape();
    vertex(x + w / 2.3, y - h / 2.3);
    vertex(x + w / 2, y - h / 3);
    vertex(x + w / 2, y + h / 1.2);
    vertex(x + w / 3, y + h);
    vertex(x - w / 3, y + h);
    vertex(x - w / 2.3, y + h / 1.1);
    endShape();
    
    //shade 2
    fill(0, 0, 0, 5);
    beginShape();
    vertex(x + w / 6, y + h);
    vertex(x + w / 3, y + h);
    vertex(x + w / 2, y + h / 1.2);
    vertex(x + w / 2, y + h / 1.5);
    endShape();

},
    specialMachineBox = function(x, y, w, h, NUM, howLong, changePower, teleNum){
    
    if(x <= -mapMove + mapMove + 500 && x >= -mapMove + mapMove - w)
    {
    
    fill(0, 0, 0);
    //rect(x, y, w, h, w / 10);
    noStroke();
    fill(200, 104, 252, 150 - gotTheSpecialBoxAnim[NUM]);
    ellipse(x + (w / 2), y + (h / 2), w + gotTheSpecialBoxAnim[NUM], h + gotTheSpecialBoxAnim[NUM]);
    
    ellipse(x + (w / 2), y + (h / 2), w + gotTheSpecialBoxAnim[NUM] / 1.5, h + gotTheSpecialBoxAnim[NUM] / 1.5);
    
    ellipse(x + (w / 2), y + (h / 2), w + gotTheSpecialBoxAnim[NUM] / 3, h + gotTheSpecialBoxAnim[NUM] / 3);
    
    if(gotTheSpecialBox[NUM] === true)
    {
       gotTheSpecialBoxAnim[NUM] += 5;
       
       if(gotTheSpecialBoxAnim[NUM] >= 150)
       {
           gotTheSpecialBoxAnim[NUM] = 150;
       }
    }
    
    if(gotTheSpecialBox[NUM] === false)
    {
       gotTheSpecialBoxAnim[NUM] = 0;
    }
    
    if(x <= -mapMove + mapMove + 500 && x >= -mapMove + mapMove - w)
    {
    if(gotTheSpecialBox[NUM] === false)
    {
        if(playerX > x - playerSize && playerX < x + w && playerY > y - playerSize && playerY < y + h)
        {
            powerupDelayTimer = howLong;
            powerupApply = true;
            gotTheSpecialBox[NUM] = true;
            currentPowerup = changePower;
            teleportNum = teleNum;
            switchGravity = "DOWN";
        }
        
        pushMatrix();
        translate(x + w / 2, y + h / 2.5);
        rotate(sin(frameCount * 5) * 10);
        gemForSpecialBox(0, 0, w / 1.8, h / 2.5, color(246, 150, 255));
        textSize(30);
        fill(183, 48, 255);
        text("?", -0.5, 4);
        text("?", 0.5, 4);
        popMatrix();
    }
    }
    }
};

var
    sighnInsctructState = [false, false, false, false, false, false, false, false, false, false, false],
    sighnInsctructStateDelete = [Save_File[56], Save_File[57], Save_File[58], Save_File[59], Save_File[60], Save_File[61], Save_File[62], Save_File[63], Save_File[64], Save_File[65], Save_File[66]];

var rageQuit = false;
var saveCodePress = 0;

//scroll to different map options
var scrollEmoji = 0;
var scrollBackdrop = 0;
var scrollLevels = 0;

//key detection
var keyPressed = function(){        //
    keys[keyCode] = true;
    
    for(var i = 0; i < sighnInsctructState.length; ++i)
    {
        if(keys[32])
        {
            if(sighnInsctructState[i] === true && sighnInsctructStateDelete[i] === false)
            {
                sighnInsctructStateDelete[i] = true;
                stopGameForSign = false;
            }
        }
    }
    
    if(pages === "levelPick")
    {
        if(keys[LEFT] && scrollLevels >= 1)
        {
            scrollLevels -= 1;
        }
        
        if(keys[RIGHT] && scrollLevels < mapStars.length - 1)
        {
            scrollLevels += 1;
        }
    }
};
var keyReleased = function(){       //
    keys[keyCode] = false;
};

//cloud
var cloud = function(x, y, s){
    
    fill(132, 184, 232);
    pushMatrix();
    translate(-x / 9.4, -y / 8.7);
    scale(s / 45);
    ellipse(x, y, s / 1.2, s);
    ellipse(x - s / 3.0, y + s / 4.4, s / 1.2, s / 1.4);
    ellipse(x - s / 1.5, y + s / 2.4, s / 1.4, s / 1.9);
    ellipse(x + s / 3.3, y + s / 2.9, s / 1.4, s / 1.5);
    ellipse(x - s / 7, y + s / 2.6, s / 0.7, s / 1.5);
    popMatrix();
    
    fill(255, 255, 255);
    ellipse(x, y, s / 1.2, s);
    ellipse(x - s / 3.0, y + s / 4.4, s / 1.2, s / 1.4);
    ellipse(x - s / 1.5, y + s / 2.4, s / 1.4, s / 1.9);
    ellipse(x + s / 3.3, y + s / 2.9, s / 1.4, s / 1.5);
    ellipse(x - s / 7, y + s / 2.6, s / 0.7, s / 1.5);
    
};

//cloud
var cloudRetro = function(x, y, s){
    
    fill(120, 120, 120);
    pushMatrix();
    translate(-x / 9.4, -y / 8.7);
    scale(s / 45);
    ellipse(x, y, s / 1.2, s);
    ellipse(x - s / 3.0, y + s / 4.4, s / 1.2, s / 1.4);
    ellipse(x - s / 1.5, y + s / 2.4, s / 1.4, s / 1.9);
    ellipse(x + s / 3.3, y + s / 2.9, s / 1.4, s / 1.5);
    ellipse(x - s / 7, y + s / 2.6, s / 0.7, s / 1.5);
    popMatrix();
    
    fill(0, 0, 0);
    ellipse(x, y, s / 1.2, s);
    ellipse(x - s / 3.0, y + s / 4.4, s / 1.2, s / 1.4);
    ellipse(x - s / 1.5, y + s / 2.4, s / 1.4, s / 1.9);
    ellipse(x + s / 3.3, y + s / 2.9, s / 1.4, s / 1.5);
    ellipse(x - s / 7, y + s / 2.6, s / 0.7, s / 1.5);
    
};

//cloud (cotton)
var cottonCandy = function(x, y, s){
    
    fill(239, 190, 250);
    pushMatrix();
    translate(-x / 9.4, -y / 8.7);
    scale(s / 45);
    ellipse(x, y, s / 1.2, s);
    ellipse(x - s / 3.0, y + s / 4.4, s / 1.2, s / 1.4);
    ellipse(x - s / 1.5, y + s / 2.4, s / 1.4, s / 1.9);
    ellipse(x + s / 3.3, y + s / 2.9, s / 1.4, s / 1.5);
    ellipse(x - s / 7, y + s / 2.6, s / 0.7, s / 1.5);
    popMatrix();
    
    fill(255, 255, 255, 50);
    ellipse(x, y, s / 1.2, s);
    ellipse(x - s / 3.0, y + s / 4.4, s / 1.2, s / 1.4);
    ellipse(x - s / 1.5, y + s / 2.4, s / 1.4, s / 1.9);
    ellipse(x + s / 3.3, y + s / 2.9, s / 1.4, s / 1.5);
    ellipse(x - s / 7, y + s / 2.6, s / 0.7, s / 1.5);
    
};

//background
var backDrop = function(styles){
    
    switch(styles)
    {
        case "defualt":
        
        background(163, 221, 255);
        
        noStroke();
        
        pushMatrix();
        
        translate(231, -128);
        
        fill(255, 208, 0);
        ellipse(200, 200 + sin(frameCount * 2) * 3, 75, 75);
        
        fill(255, 166, 0);
        ellipse(200, 200 + sin(frameCount * 2) * 3, 67, 67);
        
        fill(246, 252, 126, 50);
        ellipse(196, 197 + sin(frameCount * 2) * 3, 53, 53);
        ellipse(194, 194 + sin(frameCount * 2) * 3, 42, 42);
        
        fill(0, 0, 0);
        rect(187, 187 + sin(frameCount * 2) * 3, 5, 14, 3);
        rect(201, 187 + sin(frameCount * 2) * 3, 5, 14, 3);
        
        noFill();
        
        stroke(0, 0, 0);
        strokeWeight(2);
        arc(197, 207 + sin(frameCount * 2) * 3, 27, 25, 0, 180);
        noStroke();
        
        fill(255, 136, 0);
        
        popMatrix();
        
        pushMatrix();
        
        translate(430, 74);
        
        rotate(frameCount);
        rect(0, 57, 2, 35, 3);
        
        rotate(26);
        rect(0, 57, 2, 35, 3);
        
        rotate(26);
        rect(0, 57, 2, 35, 3);
        
        rotate(26);
        rect(0, 57, 2, 35, 3);
        
        rotate(26);
        rect(0, 57, 2, 35, 3);
        
        rotate(26);
        rect(0, 57, 2, 35, 3);
        
        rotate(26);
        rect(0, 57, 2, 35, 3);
        
        rotate(26);
        rect(0, 57, 2, 35, 3);
        
        rotate(26);
        rect(0, 57, 2, 35, 3);
        
        rotate(26);
        rect(0, 57, 2, 35, 3);
        
        rotate(26);
        rect(0, 57, 2, 35, 3);
        
        rotate(26);
        rect(0, 57, 2, 35, 3);
        
        rotate(26);
        rect(0, 57, 2, 35, 3);
        
        rotate(25);
        rect(0, 57, 2, 35, 3);
        
        popMatrix();
        
        cloud(- 100 + frameCount % 700, 56 + sin(frameCount * 5) * 5, 50);
        
        cloud(- 300 + frameCount % 700 * 2, 102 + sin(frameCount * 7) * 6, 50);
        
        break;
        
    case "retro":
        
        background(0, 0, 0);
        
        cloudRetro(- 100 + frameCount % 700, 56 + sin(frameCount * 5) * 5, 50);
        
        cloudRetro(- 300 + frameCount % 700 * 2, 102 + sin(frameCount * 7) * 6, 50);
        
        
        break;
        
    case "candy":
        
        background(203, 243, 250);
        
        cottonCandy(- 100 + frameCount % 700, 56 + sin(frameCount * 5) * 5, 50);
        
        cottonCandy(- 300 + frameCount % 700 * 2, 102 + sin(frameCount * 7) * 6, 50);
        
        break;
        
    case "roman":
        
        background(203, 243, 250);
        
        pushMatrix();

        scale(0.6);
        noStroke();
        cloud(- 100 + frameCount % 700 * 1.5, 56 + sin(frameCount * 5) * 5, 50);
        
        cloud(- 300 + frameCount % 700 * 1.7, 102 + sin(frameCount * 7) * 6, 50);
        
        fill(203, 243, 250, 130);
        ellipse(- 100 + frameCount % 700 * 1.5, 61 + sin(frameCount * 5) * 5, 150, 70);
        ellipse(- 300 + frameCount % 700 * 1.7, 109 + sin(frameCount * 7) * 6, 150, 70);
        popMatrix();
        
        birdStyle(- 100 + frameCount % 700, 56 + sin(frameCount * 5) * 5, 15, 15, -90, "roman");
        
        birdStyle(- 300 + frameCount % 700 * 1.5, 102 + sin(frameCount * 7) * 6, 20, 20, -90, "roman");
        
        noStroke();
        fill(203, 243, 250, 100);
        rect(0, 0, 500, 500);
        
        break;
    
    }
    
    resetMatrix();
};

//star
var star = function(x, y, s){
    
    stroke(255, 166, 0);
    strokeWeight(s / 15);
    fill(255, 251, 0);
    beginShape();
    vertex(x, y - s / 2);
    vertex(x + s / 7, y - s / 5);
    vertex(x + s / 2.1, y - s / 6.1);
    vertex(x + s / 4.5, y + s / 17.0);
    vertex(x + s / 2.7, y + s / 2.8);
    vertex(x, y + s / 4.7);
    vertex(x - s / 2.7, y + s / 2.8);
    vertex(x - s / 4.5, y + s / 17.0);
    vertex(x - s / 2.1, y - s / 6.1);
    vertex(x - s / 7, y - s / 5);
    vertex(x, y - s / 2);
    endShape();
    noStroke();
};

var coinBox = function(x, y, s){
    
    star(x, y, s);
    
    textAlign(0, 0);
    textSize(s / 1.2);
    fill(255, 128, 0);
    text(starCoins, x + s / 1.61, y + s / 3.1);
    fill(255, 179, 0);
    text(starCoins, x + s / 1.61, y + s / 3.9);
    textAlign(CENTER, CENTER);
};

var coinBoxStore = function(x, y, s, m){
    
    star(x, y, s);
    
    textAlign(0, 0);
    textSize(s / 1.2);
    fill(255, 128, 0);
    text(m, x + s / 1.61, y + s / 3.1);
    fill(255, 179, 0);
    text(m, x + s / 1.61, y + s / 3.9);
    textAlign(CENTER, CENTER);
};

//heart
var heart = function(x, y, s){
    
    
    fill(255, 0, 0);
    arc(x - s / 4, y - s / 6, s / 2, s / 2, -179, 76);
    arc(x + s / 4, y - s / 6, s / 2, s / 2, -254, -1);
    triangle(x - s / 2.0, y - s / 5.8,   x + s / 2.0, y - s / 5.8,   x, y + s / 2);
    
};

//emoji center
var emojiBody = function(x, y, s, emojiType){
    
    noStroke();
    
    switch(emojiType)
    {
        case "defualt":
            
            fill(255, 179, 0);
            ellipse(x, y, s, s);
            
            fill(255, 239, 176, 50);
            
            if(deLag === false)
            {
            fill(255, 254, 189, 50);
            ellipse(x - s / 24.2, y - s / 29.3, s / 1.1, s / 1.1);
            ellipse(x - s / 12.9, y - s / 11.3, s / 1.3, s / 1.3);
            ellipse(x - s / 9.0, y - s / 8.1, s / 1.7, s / 1.7);
            ellipse(x - s / 7.3, y - s / 6.5, s / 2.5, s / 2.5);
            }
            
            fill(219, 89, 9);
            ellipse(x - s / 8, y - s / 6, s / 8, s / 3);
            ellipse(x + s / 8, y - s / 6, s / 8, s / 3);
            
            noFill();
            stroke(219, 89, 9);
            strokeWeight(s / 14);
            arc(x, y + s / 9, s / 2.6, s / 3.1, 0, 180);
            
            break;
            
        case "heart":
            
            fill(255, 179, 0);
            ellipse(x, y, s, s);
            
            fill(255, 239, 176, 50);
            
            if(deLag === false)
            {
            fill(255, 254, 189, 50);
            ellipse(x - s / 24.2, y - s / 29.3, s / 1.1, s / 1.1);
            ellipse(x - s / 12.9, y - s / 11.3, s / 1.3, s / 1.3);
            ellipse(x - s / 9.0, y - s / 8.1, s / 1.7, s / 1.7);
            ellipse(x - s / 7.3, y - s / 6.5, s / 2.5, s / 2.5);
            }
            
            pushMatrix();
            translate(x - s / 6, y - s / 7);
            rotate(-10);
            heart(0, 0, s / 3);
            popMatrix();
            
            pushMatrix();
            translate(x + s / 6, y - s / 7);
            rotate(10);
            heart(0, 0, s / 3);
            popMatrix();
            
            noStroke();
            fill(219, 89, 9);
            arc(x, y + s / 12, s / 1.8, s / 1.9, 0, 180);
            fill(255, 255, 255);
            arc(x, y + s / 9, s / 2.1, s / 2.3, 0, 180);
            fill(0, 0, 0, 50);
            rect(x - s / 4, y + s / 9.4, s / 2.0, s / 22.4);
            
            break;
            
        case "XD":
            
            fill(255, 179, 0);
            ellipse(x, y, s, s);
            
            fill(255, 239, 176, 50);
            
            if(deLag === false)
            {
            fill(255, 254, 189, 50);
            ellipse(x - s / 24.2, y - s / 29.3, s / 1.1, s / 1.1);
            ellipse(x - s / 12.9, y - s / 11.3, s / 1.3, s / 1.3);
            ellipse(x - s / 9.0, y - s / 8.1, s / 1.7, s / 1.7);
            ellipse(x - s / 7.3, y - s / 6.5, s / 2.5, s / 2.5);
            }
            
            noFill();
            
            stroke(219, 89, 9);
            strokeWeight(s / 22);
            beginShape();
            vertex(x - s / 4.3, y - s / 4.7);
            vertex(x - s / 13.2, y - s / 8.2);
            vertex(x - s / 4.0, y - s / 30.7);
            endShape();

            beginShape();
            vertex(x + s / 4.5, y - s / 4.7);
            vertex(x + s / 13.2, y - s / 8.2);
            vertex(x + s / 4, y - s / 30.7);
            endShape();
            
            noStroke();
            fill(199, 75, 4);
            arc(x, y + s / 11, s / 1.5, s / 2.5, 0, 180);
            
            fill(249, 74, 255);
            rect(x - s / 6.5, y + s / 7.8, s / 3.2, s / 4.9);
            arc(x, y + s / 3.1, s / 3.2, s / 3.1, 0, 180);
            fill(255, 0, 0, 40);
            rect(x - s / 6.5, y + s / 7.8, s / 3.2, s / 5.9);
            rect(x - s / 6.5, y + s / 7.8, s / 3.2, s / 8.6);
            rect(x - s / 6.5, y + s / 7.8, s / 3.2, s / 15.2);
            rect(x - s / 82, y + s / 7.8, s / 47.9, s / 4.6);
            
            break;
            
        case "winky":
            
            fill(255, 179, 0);
            ellipse(x, y, s, s);
            
            fill(255, 239, 176, 50);
            
            if(deLag === false)
            {
            fill(255, 254, 189, 50);
            ellipse(x - s / 24.2, y - s / 29.3, s / 1.1, s / 1.1);
            ellipse(x - s / 12.9, y - s / 11.3, s / 1.3, s / 1.3);
            ellipse(x - s / 9.0, y - s / 8.1, s / 1.7, s / 1.7);
            ellipse(x - s / 7.3, y - s / 6.5, s / 2.5, s / 2.5);
            }
            
            noFill();
            
            stroke(219, 89, 9);
            strokeWeight(s / 23);
            arc(x - s / 5.3, y - s / 11.3, s / 3.9, s / 8.7, -164, -18);
            
            noStroke();
            
            fill(0, 0, 0, 30);
            ellipse(x + s / 5.4, y - s / 6.5, s / 3.1, s / 3.1);
            
            fill(255, 255, 255);
            ellipse(x + s / 5.4, y - s / 6.5, s / 3.4, s / 3.4);
            
            fill(0, 0, 0);
            ellipse(x + s / 5.4, y - s / 6.5, s / 10.1, s / 8.4);
            
            fill(199, 75, 4);
            arc(x, y + s / 11, s / 1.5, s / 2.5, 0, 180);
            
            fill(249, 74, 255);
            rect(x - s / 6.5, y + s / 7.8, s / 3.2, s / 4.9);
            arc(x, y + s / 3.1, s / 3.2, s / 3.1, 0, 180);
            fill(255, 0, 0, 40);
            rect(x - s / 6.5, y + s / 7.8, s / 3.2, s / 5.9);
            rect(x - s / 6.5, y + s / 7.8, s / 3.2, s / 8.6);
            rect(x - s / 6.5, y + s / 7.8, s / 3.2, s / 15.2);
            rect(x - s / 82, y + s / 7.8, s / 47.9, s / 4.6);
            
            break;
            
        case "tears-of-joy":
            
            fill(255, 179, 0);
            ellipse(x, y, s, s);
            
            fill(255, 239, 176, 50);
            if(deLag === false)
            {
            fill(255, 254, 189, 50);
            ellipse(x - s / 24.2, y - s / 29.3, s / 1.1, s / 1.1);
            ellipse(x - s / 12.9, y - s / 11.3, s / 1.3, s / 1.3);
            ellipse(x - s / 9.0, y - s / 8.1, s / 1.7, s / 1.7);
            ellipse(x - s / 7.3, y - s / 6.5, s / 2.5, s / 2.5);
            }
            noFill();
            
            stroke(219, 89, 9);
            strokeWeight(s / 22);
            arc(x - s / 5.3, y - s / 11.3, s / 3.9, s / 8.7, -164, -18);
            arc(x + s / 5.3, y - s / 11.3, s / 3.9, s / 8.7, -164, -18);
            
            strokeWeight(s / 30);
            arc(x + s / 8.1, y - s / 11.6, s / 1.9, s / 2.7, -67, -10);
            arc(x - s / 8.1, y - s / 11.6, s / 1.9, s / 2.7, -67 - 98, -10 - 98);
            
            noStroke();
            fill(219, 89, 9);
            arc(x, y + s / 12, s / 1.8, s / 1.9, 0, 180);
            fill(255, 255, 255);
            arc(x, y + s / 9, s / 2.0, s / 8.4, 0, 180);
            
            fill(55, 164, 252);
            pushMatrix();
            translate(x + s / 3.3, y - s / 14.7);
            rotate(-38);
            arc(0, 0, s / 4.1, s / 2.0, 55, 126);
            fill(255, 255, 255, 50);
            arc(0, 0, s / 10.2, s / 2.8, 68, 141);
            popMatrix();
            
            fill(55, 164, 252);
            pushMatrix();
            translate(x - s / 3.3, y - s / 14.7);
            rotate(38);
            arc(0, 0, s / 4.1, s / 2.0, 55, 126);
            fill(255, 255, 255, 50);
            arc(0, 0, s / 10.2, s / 2.8, 68, 141);
            popMatrix();
            
            
            break;
            
        case "sunglasses":
            
            fill(255, 179, 0);
            ellipse(x, y, s, s);
            
            fill(255, 239, 176, 50);
            if(deLag === false)
            {
            fill(255, 254, 189, 50);
            ellipse(x - s / 24.2, y - s / 29.3, s / 1.1, s / 1.1);
            ellipse(x - s / 12.9, y - s / 11.3, s / 1.3, s / 1.3);
            ellipse(x - s / 9.0, y - s / 8.1, s / 1.7, s / 1.7);
            ellipse(x - s / 7.3, y - s / 6.5, s / 2.5, s / 2.5);
            }
            
            fill(0, 0, 0);
            arc(x - s / 5, y - s / 6, s / 2.5, s / 3, 0, 180);
            arc(x + s / 5, y - s / 6, s / 2.5, s / 3, 0, 180);
            arc(x - s / 5, y - s / 6.5, s / 2.5, s / 5, -180, 0);
            arc(x + s / 5, y - s / 6.5, s / 2.5, s / 5, -180, 0);
            ellipse(x + s / 3.0, y - s / 5.2, s / 5, s / 10);
            ellipse(x - s / 3.0, y - s / 5.2, s / 5, s / 10);
            rect(x - s / 6.9, y - s / 4.9, s - s / 1.4, s / 12);
            
            fill(255, 255, 255, 30);
            ellipse(x + s / 5.5, y - s / 5.3, s / 3.3, s / 13);
            ellipse(x - s / 4.4, y - s / 5.3, s / 3.3, s / 13);
            ellipse(x + s / 5.5, y - s / 5.3, s / 4, s / 17);
            ellipse(x - s / 4.4, y - s / 5.3, s / 4, s / 17);
            ellipse(x + s / 5.8, y - s / 5.2, s / 5, s / 35);
            ellipse(x - s / 4.3, y - s / 5.2, s / 5, s / 35);
            
            
            noFill();
            stroke(219, 89, 9);
            strokeWeight(s / 20);
            arc(x, y + s / 9, s / 2.6, s / 5.3, 30, 180 - 30);
            
            break;
            
        case "glasses":
            
            fill(255, 179, 0);
            ellipse(x, y, s, s);
            
            fill(255, 239, 176, 50);
            if(deLag === false)
            {
            fill(255, 254, 189, 50);
            ellipse(x - s / 24.2, y - s / 29.3, s / 1.1, s / 1.1);
            ellipse(x - s / 12.9, y - s / 11.3, s / 1.3, s / 1.3);
            ellipse(x - s / 9.0, y - s / 8.1, s / 1.7, s / 1.7);
            ellipse(x - s / 7.3, y - s / 6.5, s / 2.5, s / 2.5);
            }
            strokeWeight(s / 35);
            stroke(0, 0, 0);
            noFill();
            arc(x - s / 5, y - s / 6, s / 2.5, s / 3, 0, 180);
            arc(x + s / 5, y - s / 6, s / 2.5, s / 3, 0, 180);
            arc(x - s / 5, y - s / 6.5, s / 2.5, s / 5, -180, 0);
            arc(x + s / 5, y - s / 6.5, s / 2.5, s / 5, -180, 0);
            rect(x - s / 37.5, y - s / 4.6, s / 22.6, s / 75);
            fill(0, 0, 0);
            ellipse(x + s / 2.45, y - s / 5.1, s / 17, s / 42);
            ellipse(x - s / 2.45, y - s / 5.1, s / 17, s / 42);
            
            noStroke();
            fill(219, 89, 9);
            ellipse(x - s / 8, y - s / 8, s / 12, s / 7.0);
            ellipse(x + s / 8, y - s / 8, s / 12, s / 7.0);
            
            noFill();
            stroke(179, 68, 4);
            strokeWeight(s / 19);
            arc(x, y + s / 9, s / 2.6, s / 5.3, 30, 180 - 30);
            
            noStroke();
            fill(255, 255, 255);
            rect(x - s / 13.4, y + s / 5.5, s / 12.9, s / 12.3, s / 65);
            rect(x + s / 105, y + s / 5.5, s / 12.9, s / 12.3, s / 65);
            
            break;
            
        case "frustrated":
            
            fill(255, 179, 0);
            ellipse(x, y, s, s);
            
            fill(255, 239, 176, 50);
            
            if(deLag === false)
            {
            fill(255, 254, 189, 50);
            ellipse(x - s / 24.2, y - s / 29.3, s / 1.1, s / 1.1);
            ellipse(x - s / 12.9, y - s / 11.3, s / 1.3, s / 1.3);
            ellipse(x - s / 9.0, y - s / 8.1, s / 1.7, s / 1.7);
            ellipse(x - s / 7.3, y - s / 6.5, s / 2.5, s / 2.5);
            }
            noFill();
            
            pushMatrix();
            translate(0, s / 7.1);
            stroke(219, 89, 9);
            strokeWeight(s / 24);
            beginShape();
            vertex(x - s / 4.3, y - s / 4.7);
            vertex(x - s / 13.2, y - s / 8.2);
            vertex(x - s / 4.0, y - s / 30.7);
            endShape();

            beginShape();
            vertex(x + s / 4.5, y - s / 4.7);
            vertex(x + s / 13.2, y - s / 8.2);
            vertex(x + s / 4, y - s / 30.7);
            endShape();
            popMatrix();
            
            strokeWeight(s / 24);
            
            beginShape();
            vertex(x - s / 4.0, y + s / 4.0);
            vertex(x - s / 6.2, y + s / 3.0);
            vertex(x - s / 9.5, y + s / 5.6);
            vertex(x, y + s / 3.0);
            vertex(x + s / 9.5, y + s / 5.6);
            vertex(x + s / 6.2, y + s / 3.0);
            vertex(x + s / 4.0, y + s / 4.0);
            endShape();
            
            strokeWeight(s / 30);
            arc(x + s / 2.4, y - s / 3.6, s / 1.9, s / 2.7, -69 + 180, -19 + 180);
            arc(x - s / 2.4, y - s / 3.6, s / 1.9, s / 2.7, -69 + 90, -19 + 90);
            
            break;
            
        case "content":
            
            fill(255, 179, 0);
            ellipse(x, y, s, s);
            
            fill(255, 239, 176, 50);
            if(deLag === false)
            {
            fill(255, 254, 189, 50);
            ellipse(x - s / 24.2, y - s / 29.3, s / 1.1, s / 1.1);
            ellipse(x - s / 12.9, y - s / 11.3, s / 1.3, s / 1.3);
            ellipse(x - s / 9.0, y - s / 8.1, s / 1.7, s / 1.7);
            ellipse(x - s / 7.3, y - s / 6.5, s / 2.5, s / 2.5);
            }
            noFill();
            
            stroke(219, 89, 9);
            strokeWeight(s / 20);
            arc(x - s / 5.3, y - s / 8, s / 3.9, s / 8.7, -164 + 180 , -18 + 180);
            arc(x + s / 5.3, y - s / 8, s / 3.9, s / 8.7, -164 + 180 , -18 + 180);
            
            strokeWeight(s / 30);
            arc(x + s / 8.1, y - s / 9.8, s / 1.9, s / 2.7, -77, -20);
            arc(x - s / 8.1, y - s / 9.8, s / 1.9, s / 2.7, -57 - 98, -98);
            
            noFill();
            stroke(219, 89, 9);
            strokeWeight(s / 20);
            arc(x, y + s / 8, s / 3.9, s / 8.7, -164 + 180 , -18 + 180);
            
            break;
            
        case "angry":
            
            fill(255, 179, 0);
            ellipse(x, y, s, s);
            
            fill(255, 0, 0, 150);
            ellipse(x, y, s, s);
            
            fill(255, 239, 176, 50);
            if(deLag === false)
            {
            fill(255, 253, 148, 40);
            ellipse(x - s / 24.2, y - s / 29.3, s / 1.1, s / 1.1);
            ellipse(x - s / 12.9, y - s / 11.3, s / 1.3, s / 1.3);
            ellipse(x - s / 9.0, y - s / 8.1, s / 1.7, s / 1.7);
            ellipse(x - s / 7.3, y - s / 6.5, s / 2.5, s / 2.5);
            }
            pushMatrix();
            translate(0, s / 5.9);
            fill(135, 18, 0);
            ellipse(x - s / 8, y - s / 6, s / 8, s / 6);
            ellipse(x + s / 8, y - s / 6, s / 8, s / 6);
            popMatrix();
            
            noFill();
            stroke(135, 18, 0);
            strokeWeight(s / 20);
            arc(x, y + s / 3.6, s / 4.9, s / 5.2, 180 + 30, 360 - 30);
            
            pushMatrix();
            translate(0, s / 21.4);
            strokeWeight(s / 30);
            arc(x + s / 3.1, y - s / 19.7, s / 1.9, s / 3.6, -67 - 100, -10 - 100);
            arc(x - s / 3.1, y - s / 19.7, s / 1.9, s / 3.6, -67, -10);
            popMatrix();
            
            break;
            
        case "eyeballroll":
            
            fill(255, 179, 0);
            ellipse(x, y, s, s);
            
            fill(255, 239, 176, 50);
            if(deLag === false)
            {
            fill(255, 254, 189, 50);
            ellipse(x - s / 24.2, y - s / 29.3, s / 1.1, s / 1.1);
            ellipse(x - s / 12.9, y - s / 11.3, s / 1.3, s / 1.3);
            ellipse(x - s / 9.0, y - s / 8.1, s / 1.7, s / 1.7);
            ellipse(x - s / 7.3, y - s / 6.5, s / 2.5, s / 2.5);
            }
            fill(0, 0, 0, 30);
            ellipse(x + s / 5.4, y - s / 6.5, s / 2.8, s / 2.8);
            ellipse(x - s / 5.4, y - s / 6.5, s / 2.8, s / 2.8);
            
            fill(255, 255, 255);
            ellipse(x + s / 5.4, y - s / 6.5, s / 3, s / 3);
            ellipse(x - s / 5.4, y - s / 6.5, s / 3, s / 3);
            
            fill(0, 0, 0);
            ellipse(x + s / 5.4, y - s / 3.8, s / 10.1, s / 10.1);
            ellipse(x - s / 5.4, y - s / 3.8, s / 10.1, s / 10.1);
            
            fill(219, 89, 9);
            rect(x - s / 7, y + s / 5.8, s / 3.7, s / 22.4);
            
            break;
            
        case "angel":
            
            fill(255, 179, 0);
            ellipse(x, y, s, s);
            
            fill(255, 239, 176, 50);
            if(deLag === false)
            {
            fill(255, 254, 189, 50);
            ellipse(x - s / 24.2, y - s / 29.3, s / 1.1, s / 1.1);
            ellipse(x - s / 12.9, y - s / 11.3, s / 1.3, s / 1.3);
            ellipse(x - s / 9.0, y - s / 8.1, s / 1.7, s / 1.7);
            ellipse(x - s / 7.3, y - s / 6.5, s / 2.5, s / 2.5);
            }
            stroke(219, 89, 9);
            strokeWeight(s / 22);
            arc(x - s / 7.1, y - s / 11.3, s / 6.9, s / 8.7, -164, -18);
            arc(x + s / 7.1, y - s / 11.3, s / 6.9, s / 8.7, -164, -18);
            
            noFill();
            stroke(219, 89, 9);
            strokeWeight(s / 21);
            arc(x, y + s / 9, s / 2.6, s / 5.4, 0, 180);
            
            
            stroke(37, 133, 250);
            strokeWeight(s / 16);
            ellipse(x, y - s / 2.3, s / 1.1, s / 3.6);
            
            stroke(255, 255, 255, 50);
            strokeWeight(s / 28);
            ellipse(x, y - s / 2.3, s / 1.1, s / 3.6);
            strokeWeight(s / 121);
            ellipse(x, y - s / 2.3, s / 1.1, s / 3.6);
            
            break;
            
        case "dead":
            
            fill(255, 179, 0);
            ellipse(x, y, s, s);
            
            fill(255, 239, 176, 50);
            if(deLag === false)
            {
            fill(255, 254, 189, 50);
            ellipse(x - s / 24.2, y - s / 29.3, s / 1.1, s / 1.1);
            ellipse(x - s / 12.9, y - s / 11.3, s / 1.3, s / 1.3);
            ellipse(x - s / 9.0, y - s / 8.1, s / 1.7, s / 1.7);
            ellipse(x - s / 7.3, y - s / 6.5, s / 2.5, s / 2.5);
            }
            noFill();
            
            pushMatrix();
            translate(-s / 10.3, s / 23.6);
            stroke(171, 69, 10);
            strokeWeight(s / 24);
            beginShape();
            vertex(x - s / 6.3, y - s / 4.7);
            vertex(x - s / 13.2, y - s / 8.2);
            vertex(x - s / 6.3, y - s / 30.7);
            endShape();
            
            translate(-s / 7.7, 0);
            
            beginShape();
            vertex(x + s / 6.3, y - s / 4.7);
            vertex(x + s / 13.2, y - s / 8.2);
            vertex(x + s / 6.3, y - s / 30.7);
            endShape();
            popMatrix();
            
            pushMatrix();
            translate(s / 4.5, s / 23.6);
            strokeWeight(s / 24);
            beginShape();
            vertex(x - s / 6.3, y - s / 4.7);
            vertex(x - s / 13.2, y - s / 8.2);
            vertex(x - s / 6.3, y - s / 30.7);
            endShape();
            
            translate(-s / 7.7, 0);
            
            beginShape();
            vertex(x + s / 6.3, y - s / 4.7);
            vertex(x + s / 13.2, y - s / 8.2);
            vertex(x + s / 6.3, y - s / 30.7);
            endShape();
            popMatrix();
            
            strokeWeight(s / 30);
            arc(x + s / 8.1, y - s / 11.6, s / 1.9, s / 2.2, -67 - 35, -10 - 35);
            arc(x - s / 8.1, y - s / 11.6, s / 1.9, s / 2.2, -67 - 98 + 30, -10 - 98 + 30);
            
            noStroke();
            fill(171, 69, 10);
            ellipse(x, y + s / 4, s / 3.4, s / 3.4);
            
            break;
            
        case "money":
            
            fill(255, 179, 0);
            ellipse(x, y, s, s);
            
            fill(255, 239, 176, 50);
            if(deLag === false)
            {
            fill(255, 254, 189, 50);
            ellipse(x - s / 24.2, y - s / 29.3, s / 1.1, s / 1.1);
            ellipse(x - s / 12.9, y - s / 11.3, s / 1.3, s / 1.3);
            ellipse(x - s / 9.0, y - s / 8.1, s / 1.7, s / 1.7);
            ellipse(x - s / 7.3, y - s / 6.5, s / 2.5, s / 2.5);
            }
            noFill();
            
            stroke(171, 69, 10);
            
            strokeWeight(s / 30);
            arc(x + s / 8.1, y - s / 11.6, s / 1.9, s / 1.9, -67 - 35, -10 - 35);
            arc(x - s / 8.1, y - s / 11.6, s / 1.9, s / 1.9, -67 - 98 + 30, -10 - 98 + 30);
            
            noStroke();
            fill(199, 75, 4);
            arc(x, y + s / 11, s / 1.5, s / 2.5, 0, 180);
            
            fill(0, 240, 32);
            rect(x - s / 6.5, y + s / 7.8, s / 3.2, s / 4.9);
            arc(x, y + s / 3.1, s / 3.2, s / 3.1, 0, 180);
            fill(0, 0, 0, 30);
            rect(x - s / 6.5, y + s / 7.8, s / 3.2, s / 5.9);
            rect(x - s / 6.5, y + s / 7.8, s / 3.2, s / 8.6);
            rect(x - s / 6.5, y + s / 7.8, s / 3.2, s / 15.2);
            
            textSize(s / 4.0);
            fill(153, 56, 3);
            text("$", x - s / 6.2, y - s / 8.5);
            text("$", x + s / 6.2, y - s / 8.5);
            fill(1, 97, 14);
            text("$", x, y + s / 3.2);
            
            break;
            
        case "sick":
            
            fill(17, 168, 0);
            ellipse(x, y, s, s);
            
            fill(7, 186, 13, 150);
            ellipse(x, y, s, s);
            if(deLag === false)
            {
            fill(157, 255, 150, 40);
            ellipse(x - s / 24.2, y - s / 29.3, s / 1.1, s / 1.1);
            ellipse(x - s / 12.9, y - s / 11.3, s / 1.3, s / 1.3);
            ellipse(x - s / 9.0, y - s / 8.1, s / 1.7, s / 1.7);
            ellipse(x - s / 7.3, y - s / 6.5, s / 2.5, s / 2.5);
            }
            pushMatrix();
            translate(0, s / 5.9);
            fill(7, 133, 3);
            ellipse(x - s / 8, y - s / 4, s / 8, s / 8);
            ellipse(x + s / 8, y - s / 4, s / 8, s / 8);
            popMatrix();
            
            pushMatrix();
            translate(0, s / 1.8);
            fill(0, 69, 15, 30);
            ellipse(x - s / 4.4, y - s / 3.8, s / 8, s / 8);
            ellipse(x + s / 4.4, y - s / 3.8, s / 8, s / 8);
            popMatrix();
            
            noFill();
            stroke(7, 133, 3);
            strokeWeight(s / 20);
            arc(x, y + s / 3.6, s / 3.1, s / 5.2, 180 + 45, 360 - 45);
            arc(x - s / 5.8, y + s / 3.8, s / 8.2, s / 7.1, 165 + 90, 364);
            arc(x + s / 5.8, y + s / 4.1, s / 8.2, s / 7.1, 165 + 90 + 180 + 90, 364 + 180 + 90);
            
            pushMatrix();
            translate(0, -s / 4.5);
            strokeWeight(s / 30);
            arc(x + s / 3.1, y - s / 19.7, s / 1.9, -s / 3.6, -67 - 100, -10 - 100);
            arc(x - s / 3.1, y - s / 19.7, s / 1.9, -s / 3.6, -67, -10);
            popMatrix();
            
            break;
    }

};

var rageQuitEmoji = function(x, y, s, emojiType){
    
    noStroke();
    
    switch(emojiType)
    {
        case "angry":
            
            fill(255, 179, 0);
            ellipse(x, y, s, s);
            
            fill(255, 0, 0, 150);
            ellipse(x, y, s, s);
            
            fill(255, 253, 148, 40);
            ellipse(x - s / 24.2, y - s / 29.3, s / 1.1, s / 1.1);
            ellipse(x - s / 12.9, y - s / 11.3, s / 1.3, s / 1.3);
            ellipse(x - s / 9.0, y - s / 8.1, s / 1.7, s / 1.7);
            ellipse(x - s / 7.3, y - s / 6.5, s / 2.5, s / 2.5);
            ellipse(x - s / 6.1, y - s / 5.6, s / 4.1, s / 4.1);
            
            pushMatrix();
            translate(0, sin(frameCount * 10) * s / 30);
            
            pushMatrix();
            translate(0, s / 5.9);
            fill(135, 18, 0);
            ellipse(x - s / 8, y - s / 6, s / 8, s / 6);
            ellipse(x + s / 8, y - s / 6, s / 8, s / 6);
            popMatrix();
            
            noFill();
            stroke(135, 18, 0);
            strokeWeight(s / 20);
            arc(x, y + s / 3.6, s / 4.9, s / 5.2, 180 + 30, 360 - 30);
            
            pushMatrix();
            translate(0, s / 21.4);
            strokeWeight(s / 30);
            arc(x + s / 3.1, y - s / 19.7, s / 1.9, s / 3.6, -67 - 100, -10 - 100);
            arc(x - s / 3.1, y - s / 19.7, s / 1.9, s / 3.6, -67, -10);
            popMatrix();
            popMatrix();
            
            break;
            
        case "angel":
            
            fill(255, 179, 0);
            ellipse(x, y, s, s);
            
            fill(255, 239, 176, 50);
            
            fill(255, 254, 189, 50);
            ellipse(x - s / 24.2, y - s / 29.3, s / 1.1, s / 1.1);
            ellipse(x - s / 12.9, y - s / 11.3, s / 1.3, s / 1.3);
            ellipse(x - s / 9.0, y - s / 8.1, s / 1.7, s / 1.7);
            ellipse(x - s / 7.3, y - s / 6.5, s / 2.5, s / 2.5);
            ellipse(x - s / 6.1, y - s / 5.6, s / 4.1, s / 4.1);
            
            pushMatrix();
            translate(sin(frameCount * 12) * s / 25, 8);
            fill(255, 255, 255);
            ellipse(x + s / 5.4, y - s / 6.5, s / 3, s / 3);
            ellipse(x - s / 5.4, y - s / 6.5, s / 3, s / 3);
            
            fill(0, 0, 0);
            ellipse(x + s / 5.4, y - s / 6.5, s / 6, s / 6);
            ellipse(x - s / 5.4, y - s / 6.5, s / 6, s / 6);
            
            noFill();
            stroke(219, 89, 9);
            strokeWeight(s / 21);
            arc(x, y + s / 9, s / 6.5, -s / 8.9, 0, 180);
            popMatrix();
            
            stroke(37, 133, 250);
            strokeWeight(s / 16);
            ellipse(x, y - s / 2.3, s / 1.1, s / 3.6);
            
            stroke(255, 255, 255, 50);
            strokeWeight(s / 28);
            ellipse(x, y - s / 2.3, s / 1.1, s / 3.6);
            strokeWeight(s / 121);
            ellipse(x, y - s / 2.3, s / 1.1, s / 3.6);
            
            break;
            
    }

};

//poop emoji menu
var poopLump = function(x, y, s, r){
    
    noFill();
    pushMatrix();
    translate(x, y);
    rotate(r);
    strokeWeight(s / 2);
    stroke(145, 56, 0);
    arc(0, 0, s * 2, s, 10, 86);
    
    if(deLag === false)
    {
    strokeWeight(s / 2.8);
    stroke(255, 255, 255, 20);
    arc(-s / 22.1, -s / 30, s * 2, s, 10, 86);
    
    strokeWeight(s / 4.9);
    arc(-s / 19.3, -s / 16, s * 2, s, 10, 86);
    
    }
    
    popMatrix();
};
var poopLump2 = function(x, y, s, r){
    
    noFill();
    pushMatrix();
    translate(x, y);
    rotate(r);
    strokeWeight(s / 2);
    stroke(145, 56, 0);
    arc(0, 0, s * 2, s, 10, 86);
    
    if(deLag === false)
    {
    strokeWeight(s / 2.8);
    stroke(255, 255, 255, 20);
    arc(-s / 22.1, -s / 30, s * 2, s, 50, 86);
    
    strokeWeight(s / 4.9);
    arc(-s / 19.3, -s / 16, s * 2, s, 50, 86);
    }
    noStroke();
    
    popMatrix();
};
var poopEmoji = function(x, y, s){
    
    //poopLump(x + s / 1.9, y + s / 10.7, s / 1.4, -125);

    poopLump(x + s / 4.7, y, s, 18);
    
    poopLump(x - s / 6, y, s * 1.1);
    
    poopLump(x - s / 28, y - s / 3.4, s / 1.2);
    
    poopLump2(x + s / 19, y - s / 1.9, s / 1.6);
    
    fill(145, 56, 0);
    
    arc(x + s / 2.8, y - s / 1.0, s * 1.3, s * 1.4, 46, 115);
    
    if(deLag === false)
    {
    fill(255, 255, 255, 17);
    arc(x + s / 2.8, y - s / 1.0, s * 0.8, s * 1.0, 58, 117);
    arc(x + s / 2.8, y - s / 1.0, s * 0.8, s * 0.8, 72, 112);
    arc(x + s / 2.8, y - s / 1.0, s * 0.8, s * 0.5, 85, 99);
    arc(x + s / 2.8, y - s / 1.0, s * 0.8, s * 1.2, 47, 119);
    }
    
    fill(255, 255, 255, 10);
    arc(x + s / 2.8, y - s / 1.0, s * 1.0, s * 1.5, 40, 119);
    
    fill(255, 255, 255);
    ellipse(x + s / 4.4, y - s / 22.7, s / 2.4, s / 1.8);
    ellipse(x + s / 1.4, y - s / 22.7, s / 2.4, s / 1.8);
    
    fill(0, 0, 0);
    ellipse(x + s / 4.4, y - s / 22.7, s / 4.2, s / 3.4);
    ellipse(x + s / 1.4, y - s / 22.7, s / 4.2, s / 3.4);
    
    noStroke();
    fill(255, 255, 255);
    arc(x + s / 2, y + s / 2.8, s / 1.8, s / 2.3, 0, 180);
    
    fill(0, 0, 0, 20);
    arc(x + s / 2, y + s / 2.8, s / 1.8, s / 3.6, 0, 180);
    arc(x + s / 2, y + s / 2.8, s / 1.8, s / 7.4, 0, 180);
    arc(x + s / 2, y + s / 2.8, s / 1.8, s / 8.8, 0, 180);
};

/*
//poop emoji spike
var candyCorn = function(x, y, s){
    
    //orange
    fill(255, 89, 0);
    strokeWeight(s / 21);
    stroke(255, 119, 0);
    beginShape();
    vertex(x - s / 7.4, y - s / 2.8);
    vertex(x - s / 16.4, y - s / 2.3);
    vertex(x, y - s / 2.2);
    vertex(x + s / 16.4, y - s / 2.3);
    vertex(x + s / 7.4, y - s / 2.8);
    vertex(x + s / 2.8, y + s / 4.2);
    vertex(x + s / 4.4, y + s / 3.2);
    vertex(x + s / 11.8, y + s / 2.9);
    vertex(x, y + s / 2.9);
    vertex(x - s / 11.8, y + s / 2.9);
    vertex(x - s / 4.4, y + s / 3.2);
    vertex(x - s / 2.8, y + s / 4.2);
    vertex(x - s / 7.4, y - s / 2.8);
    endShape();
    
    //white
    fill(255, 255, 255);
    beginShape();
    vertex(x - s / 5.8, y - s / 3.8);
    vertex(x - s / 16.4, y - s / 2.3);
    vertex(x, y - s / 2.2);
    vertex(x + s / 16.4, y - s / 2.3);
    vertex(x + s / 5.7, y - s / 3.8);
    endShape();
    
    //yellow
    fill(255, 195, 43);
    beginShape();
    vertex(x + s / 3.4, y + s / 12.1);
    vertex(x + s / 2.8, y + s / 4.2);
    vertex(x + s / 4.4, y + s / 3.2);
    vertex(x + s / 11.8, y + s / 2.9);
    vertex(x, y + s / 2.9);
    vertex(x - s / 11.8, y + s / 2.9);
    vertex(x - s / 4.4, y + s / 3.2);
    vertex(x - s / 2.8, y + s / 4.5);
    vertex(x - s / 3.4, y + s / 12.1);
    endShape();
    
    //shade
    fill(0, 0, 0, 40);
    beginShape();
    vertex(x + s / 16.4, y - s / 2.3);
    vertex(x + s / 7.4, y - s / 2.8);
    vertex(x + s / 2.8, y + s / 4.2);
    vertex(x + s / 4.4, y + s / 3.2);
    endShape();
    
    noStroke();
    fill(255, 255, 255);
    ellipse(x - s / 10.0, y - s / 32.2, s / 5, s / 4);
    ellipse(x + s / 10, y - s / 32.2, s / 5, s / 4);
    arc(x, y + s / 8.2, s / 4, s / 4, 0, 180);
    
    fill(0, 0, 0);
    ellipse(x - s / 10.0, y - s / 32.2, s / 9, s / 8);
    ellipse(x + s / 10.0, y - s / 32.2, s / 9, s / 8);
};
*/

var poopLumpSpike = function(x, y, s, r, styles){
    
    pushMatrix();
    translate(x, y);
    rotate(r);
    
    noStroke();
    
    rotate(-20);
    
    switch(styles)
    {
        case "defualt":
        noStroke();
        fill(145, 56, 0);
        ellipse(s - s / 1.8, s - s / 1.8, s * 1.6, s / 1.6);
        break;
        
        case "retro":
        fill(0, 0, 0);
        stroke(173, 70, 5);
        strokeWeight(3);
        ellipse(s - s / 1.8, s - s / 1.8, s * 1.6, s / 1.6);
        break;
        
        case "candy":
        noStroke();
        ellipse(s - s / 1.8, s - s / 1.8, s * 1.6, s / 1.6);
        break;
        
        case "roman":
        noStroke();
        ellipse(s - s / 1.8, s - s / 1.8, s * 1.6, s / 1.6);
        break;
    }
    
    popMatrix();
};
var poopEmojiSpike = function(x, y, s, styles){
    
    switch(styles)
    {
        case "defualt":
            
    noStroke();
    
    poopLumpSpike(x + s / 4.7, y, s, 18, styles);
    
    poopLumpSpike(x - s / 6, y, s * 1.1, 0, styles);
    
    poopLumpSpike(x - s / 28, y - s / 3.4, s / 1.2, 0, styles);
    
    poopLumpSpike(x + s / 19, y - s / 1.9, s / 1.6, 0, styles);
    
    fill(145, 56, 0);
    arc(x + s / 2.8, y - s / 1.0, s * 1.3, s * 1.4, 45, 115);
    
    fill(255, 255, 255);
    ellipse(x + s / 4.4, y - s / 22.7, s / 2.4, s / 1.8);
    ellipse(x + s / 1.4, y - s / 22.7, s / 2.4, s / 1.8);
    
    fill(0, 0, 0);
    ellipse(x + s / 4.4, y - s / 22.7, s / 4.2, s / 3.4);
    ellipse(x + s / 1.4, y - s / 22.7, s / 4.2, s / 3.4);
    
    fill(255, 255, 255);
    arc(x + s / 2, y + s / 2.8, s / 1.8, s / 2.3, 0, 180);
            break;
            
        case "retro":
    poopLumpSpike(x + s / 4.7, y, s, 18, styles);
    
    poopLumpSpike(x - s / 6, y, s * 1.1, 0, styles);
    
    poopLumpSpike(x - s / 28, y - s / 3.4, s / 1.2, 0, styles);
    
    poopLumpSpike(x + s / 19, y - s / 1.9, s / 1.6, 0, styles);
    
    noStroke();
    fill(173, 70, 5);
    arc(x + s / 2.8, y - s / 1.0, s * 1.3, s * 1.4, 45, 115);
    fill(0, 0, 0);
    arc(x + s / 2.7, y - s / 1.2, s * 2.2, s * 3.1, 40, 115);
    
    fill(255, 255, 255);
    ellipse(x + s / 4.4, y - s / 22.7, s / 2.4, s / 1.8);
    ellipse(x + s / 1.4, y - s / 22.7, s / 2.4, s / 1.8);
    
    fill(0, 0, 0);
    ellipse(x + s / 4.4, y - s / 22.7, s / 4.2, s / 3.4);
    ellipse(x + s / 1.4, y - s / 22.7, s / 4.2, s / 3.4);
    
    fill(255, 255, 255);
    arc(x + s / 2, y + s / 2.8, s / 1.8, s / 2.3, 0, 180);
            break;
            
        case "candy":
            
    //candyCorn(x + s / 2.3, y + s / 15.7, s * 2.4);
    
    noStroke();
    
    fill(255, 195, 43);
    poopLumpSpike(x + s / 4.7, y, s, 18, styles);
    
    poopLumpSpike(x - s / 6, y, s * 1.1, 0, styles);
    
    fill(255, 89, 0);
    poopLumpSpike(x - s / 28, y - s / 3.4, s / 1.2, 0, styles);
    
    poopLumpSpike(x + s / 19, y - s / 1.9, s / 1.6, 0, styles);
    
    fill(255, 89, 0, 150);
    arc(x + s / 3.0, y - s / 0.9, s * 1.7, s * 1.6, 45, 115);
    
    fill(255, 255, 255);
    arc(x + s / 2.8, y - s / 1.0, s * 1.3, s * 1.2, 45, 115);
    
    fill(255, 255, 255);
    ellipse(x + s / 4.4, y - s / 22.7, s / 2.4, s / 1.8);
    ellipse(x + s / 1.4, y - s / 22.7, s / 2.4, s / 1.8);
    
    fill(0, 0, 0);
    ellipse(x + s / 4.4, y - s / 22.7, s / 4.2, s / 3.4);
    ellipse(x + s / 1.4, y - s / 22.7, s / 4.2, s / 3.4);
    
    fill(255, 255, 255);
    arc(x + s / 2, y + s / 2.8, s / 1.8, s / 2.3, 0, 180);
    
            break;
            
        case "roman":
    
    noStroke();
    
    fill(145, 145, 145);
    poopLumpSpike(x + s / 4.7, y, s, 18, styles);
    
    poopLumpSpike(x - s / 6, y, s * 1.1, 0, styles);
    
    fill(135, 135, 135, 150);
    poopLumpSpike(x - s / 28, y - s / 3.4, s / 1.2, 0, styles);
    
    poopLumpSpike(x + s / 19, y - s / 1.9, s / 1.6, 0, styles);
    
    fill(135, 135, 135, 150);
    arc(x + s / 3.0, y - s / 0.9, s * 1.7, s * 1.6, 45, 115);
    
    fill(212, 210, 212);
    arc(x + s / 2.8, y - s / 1.0, s * 1.3, s * 1.2, 45, 115);
    
    fill(69, 69, 69);
    ellipse(x + s / 4.4, y - s / 22.7, s / 2.4, s / 1.8);
    ellipse(x + s / 1.4, y - s / 22.7, s / 2.4, s / 1.8);
    
    fill(255, 255, 255);
    ellipse(x + s / 4.4, y - s / 22.7, s / 4.2, s / 3.4);
    ellipse(x + s / 1.4, y - s / 22.7, s / 4.2, s / 3.4);
    
    fill(135, 0, 14);
    arc(x + s / 2, y + s / 2.1, s / 1.8, s / 2.3, -180, 0);
    
            break;
    }
    
};

//heart placeholder
var heartPlaceholder = function(x, y, s){
    
    
    fill(69, 69, 69);
    arc(x - s / 4, y - s / 6, s / 2, s / 2, -179, 76);
    arc(x + s / 4, y - s / 6, s / 2, s / 2, -254, -1);
    triangle(x - s / 2.0, y - s / 5.8,   x + s / 2.0, y - s / 5.8,   x, y + s / 2);
    
};

//grey star (star place-holder)
var starPlaceholder = function(x, y, s){
    
    stroke(120, 120, 120);
    strokeWeight(s / 15);
    fill(171, 171, 171);
    beginShape();
    vertex(x, y - s / 2);
    vertex(x + s / 7, y - s / 5);
    vertex(x + s / 2.1, y - s / 6.1);
    vertex(x + s / 4.5, y + s / 17.0);
    vertex(x + s / 2.7, y + s / 2.8);
    vertex(x, y + s / 4.7);
    vertex(x - s / 2.7, y + s / 2.8);
    vertex(x - s / 4.5, y + s / 17.0);
    vertex(x - s / 2.1, y - s / 6.1);
    vertex(x - s / 7, y - s / 5);
    vertex(x, y - s / 2);
    endShape();
    noStroke();
};

//player
var jumpBubleAnim = 0, jumpBubleAnimY = 0; 
var player = function(){
    
    fill(255, 0, 0);
    //rect(playerX, playerY, playerSize, playerSize);
        
    noStroke();
    fill(255, 255, 255, 150);
    
    if(extraSpeedTimer <= 0)
    {
        ellipse(playerX - 100 + jumpBubleAnim * 4, jumpBubleAnimY, jumpBubleAnim, jumpBubleAnim / 2);
        ellipse(playerX - 110 + jumpBubleAnim * 4, jumpBubleAnimY, jumpBubleAnim / 2, jumpBubleAnim / 3);
        ellipse(playerX - 120 + jumpBubleAnim * 4, jumpBubleAnimY, jumpBubleAnim / 3, jumpBubleAnim / 4);
        ellipse(playerX - 120 + jumpBubleAnim * 4, jumpBubleAnimY - jumpBubleAnim, jumpBubleAnim / 4, jumpBubleAnim / 4);
        ellipse(playerX - 120 + jumpBubleAnim * 5, jumpBubleAnimY - jumpBubleAnim / 2, jumpBubleAnim / 4, jumpBubleAnim / 4);
    }
        
    if(extraSpeedTimer > 0)
    {
        ellipse(playerX - 200 + jumpBubleAnim * 8, jumpBubleAnimY, jumpBubleAnim, jumpBubleAnim / 2);
        ellipse(playerX - 210 + jumpBubleAnim * 8, jumpBubleAnimY, jumpBubleAnim / 2, jumpBubleAnim / 3);
        ellipse(playerX - 220 + jumpBubleAnim * 8, jumpBubleAnimY, jumpBubleAnim / 3, jumpBubleAnim / 4);
        ellipse(playerX - 220 + jumpBubleAnim * 8, jumpBubleAnimY - jumpBubleAnim, jumpBubleAnim / 4, jumpBubleAnim / 4);
        ellipse(playerX - 220 + jumpBubleAnim * 8, jumpBubleAnimY - jumpBubleAnim / 2, jumpBubleAnim / 4, jumpBubleAnim / 4);
    }
    
    jumpBubleAnim -= 1;
            
    if(jumpBubleAnim <= 0)
    {
        jumpBubleAnim = 0;
    }
    
    if(powerupApply === true && playerY <= 0 && currentPowerup === "bird")
    {
        playerY = 0;
    }
    
    if(keys[UP] || keys[32] || keys[87])
    {
        if(powerupApply === true && currentPowerup === "bird" && levelDone === false && death === false)
        {
           playerGravity = -5;
           flap -= 50;
        }
    }else
    {
        flap += 2;
    }
    
    if(flap <= -50)
    {
        flap = -50;
    }
    
    if(flap >= 0)
    {
        flap = 0;
    }
    
    
    if(powerupApply === true && powerupDelayTimer <= 0 && stopGameForSign === false)
    {
        powerupDelayTimer = 0;
        powerupApply = false;
        currentPowerup = "defualt";
    }
    
    if(powerupApply === true && stopGameForSign === false)
    {
        powerupDelayTimer -= 1;
    }
    
    if(powerupApply === true && currentPowerup === "bird")
    {
        noStroke();
        
        //player particle stuff
        for(var i = 0; i < particleCount.length; ++i)
        {
            pushMatrix();
            translate(particleX[i], particleY[i]);
            rectMode(CENTER);
            rotate(frameCount % 380 * 3);
            
            particleStyle(0, 0, particleSize[i] * 2, particleSize[i] * 2, currentBackdrop);
            rectMode(0);
            popMatrix();
            
            if(death === false && levelDone === false)
            {
                particleSize[i] -= 0.2;
                particleX[i] -= 4;
            }
            
            if(particleSize[i] <= 0)
            {
                particleSize[i] = 10;
                
                particleX[i] = playerX + playerSize / 2;
                particleY[i] = playerY + playerSize / 2;
                
            }
        }
        particleX.push(playerX + playerSize / 2);
        particleY.push(playerY + playerSize / 2);
        particleSize.push(0);
    }
    
    pushMatrix();
    translate(playerX + playerSize / 2, playerY + playerSize / 2);
    rotate(rotateEmoji);
    
    if(respawnDelay <= 1 || respawnDelay >= 10 && respawnDelay <= 20 || respawnDelay >= 40 && respawnDelay <= 50 || respawnDelay >= 60 && respawnDelay <= 70 || respawnDelay >= 90 && respawnDelay <= 100)
    {
        if(currentPowerup === "defualt")
        {
            emojiBody(0, 0, playerSize * 1.2, currentEmoji);
            bubbleBoY = 500 - playerSize;
            bubbleBoYSwitch = "UP";
        
        }
    }
    
    if(powerupApply === true && currentPowerup === "gravity-guy")
    {
        noStroke();
        
        rotate(-rotateEmoji);
        
        if(switchGravity === "UP")
        {
            rotate(180);
        }
        
        emojiBody(0, 0, playerSize * 1.2, currentEmoji);
        
        powerUpNum[2] = true;
        
        noStroke();
        fill(0, 88, 240, 100);
        stroke(255, 255, 255, 100);
        strokeWeight(2);
        
        for(var i = 0; i < coolGravityguyAnimation.length; ++i)
        {
            ellipse(0, 0, coolGravityguyAnimation[i], coolGravityguyAnimation[i]);
            coolGravityguyAnimation[i] += 3;
            
            if(coolGravityguyAnimation[i] >= 65)
            {
                coolGravityguyAnimation[i] = 0;
            }
        }
    }
    
    if(powerupApply === true && currentPowerup === "bird")
    {
        noStroke();
        
        rotate(-rotateEmoji);
        birdStyle(0, 0, playerSize, playerSize, -90, currentBackdrop);
        
        powerUpNum[0] = true;
    }
    
    if(powerupApply === true && currentPowerup === "emoji-box")
    {
        noStroke();
        
        rotate(-rotateEmoji);
        
        if(!levelDone)
        {
        //transport string
        strokeWeight(6);
        stroke(0, 64, 255, 100);
        line(playerSize / 2, -playerSize / 46, -playerSize / 2 + 225, -(playerY + (playerSize / 6)) + bubbleBoY);
        
        strokeWeight(4);
        stroke(0, 128, 255, 150);
        line(playerSize / 2, -playerSize / 46, -playerSize / 2 + 225, -(playerY + (playerSize / 6)) + bubbleBoY);
        
        strokeWeight(2);
        stroke(0, 213, 255, 150);
        line(playerSize / 2, -playerSize / 46, -playerSize / 2 + 225, -(playerY + (playerSize / 6)) + bubbleBoY);
        
        }
        //lightning
        noStroke();
        fill(0, 119, 255);
        
        pushMatrix();
        
        translate(-25, 0);
        
        beginShape();
        for(var i =  0; i < 20; ++i)
        {
            vertex(playerSize / 2 - i * 10 + random(-20, 20), -playerSize / 46 - i * 20);
        }
        endShape();
        
        beginShape();
        for(var i =  0; i < 20; ++i)
        {
            vertex(playerSize / 2 - i * 10 + random(-20, 20), -playerSize / 46 + i * 20);
        }
        endShape();
        
        beginShape();
        for(var i =  0; i < 30; ++i)
        {
            vertex(playerSize / 2 + i * 10 + random(-20, 20), -playerSize / 46 + i * 20);
        }
        endShape();
        
        beginShape();
        for(var i =  0; i < 30; ++i)
        {
            vertex(playerSize / 2 + i * 10 + random(-20, 20), -playerSize / 46 - i * 20);
        }
        endShape();
        
        popMatrix();
        
        if(!levelDone)
        {
        //police box
        emojiBox(-playerSize / 2 - growAnimBox, -playerSize / 2 - growAnimBox, playerSize + growAnimBox * 2, playerSize + growAnimBox * 2);
        emojiBoxBubble(-playerSize / 2 + 225, -(playerY + (playerSize / 2)) + bubbleBoY, playerSize, playerSize);
        }
        
        powerUpNum[1] = true;
        
        //UP & DOWN mechanics
        if(bubbleBoY >= 500 - playerSize)
        {
            bubbleBoYSwitch = "UP";
        }
        
        if(bubbleBoY <= 0)
        {
            bubbleBoYSwitch = "DOWN";
        }
        if(stopGameForSign === false)
        {
            switch(bubbleBoYSwitch)
            {
                case "UP":
                    bubbleBoY -= 5;
                    break;
                    
                case "DOWN":
                    bubbleBoY += 5;
                    break;
            }
        }
        
        if(growAnimBox >= 0)
        {
            growAnimBox = 0;
        }
        
        //space
        if(keys[32] && keyIsPressed && delayClick < 2 && teleportNum > 0 && stopGameForSign === false)
        {
            teleportNum -= 1;
            mapMove += 225;
            playerY = bubbleBoY;
            delayClick += 2;
            growAnimBox = -30;
        }else
        {
            growAnimBox += 3;
        }
    }
    
    if(!keyIsPressed)
    {
        delayClick = 0;
    }
    
    noStroke();
    fill(5, 171, 14, 130);
    ellipse(0, 0, respawnDelay / 1.8, respawnDelay / 1.8);
    ellipse(0, 0, respawnDelay / 2, respawnDelay / 2);
    ellipse(0, 0, respawnDelay / 4, respawnDelay / 4);
    ellipse(0, 0, respawnDelay / 6, respawnDelay / 6);
    ellipse(0, 0, respawnDelay / 5, respawnDelay / 5);
    ellipse(0, 0, respawnDelay / 3, respawnDelay / 3);
    
    popMatrix();
    
    if(death === false && levelDone === false && stopGameForSign === false)
    {
        rotateEmoji += 3;
    }
    
    resetMatrix();

};

//block physics 
var blockSide = function(x, y, w, h, switchSide){

switch(switchSide)
{
    
    case "right":
    //right collision
    if(playerX > x - playerSize && playerX < x + w && playerY > y - playerSize && playerY < y + h)
    {
        playerX = x - playerSize;
    }
        break;
        
    case "left":
    //left collision
    if(playerX > x - playerSize && playerX < x + w && playerY > y - playerSize && playerY < y + h)
    {
        playerX = x + w;
    }
        break;
        
    case "up":
    //up collision
    if(playerX > x - playerSize && playerX < x + w && playerY > y - playerSize&& playerY < y + h)
    {
        
        if(currentPowerup !== "gravity-guy")
        {
            playerY = y - playerSize;
            playerGravity = 0;
        }
        
        if(currentPowerup === "gravity-guy")
        {
            
            playerY = y - playerSize;
            
            
            if(switchGravity === "DOWN")
            {
                playerGravity = 0;
            }else{
                playerGravity = -5;
            }
            
            if(currentPowerup === 'gravity-guy' && keys[32] && keyIsPressed && delayClick < 2 && levelDone === false && death === false)
            {
                delayClick += 2;
                
                playerGravity -= 5;
                
                switchGravity = "UP";
                
            }
        }
        
        if(keys[UP] || keys[87])
        {
            if(currentPowerup !== "emoji-box" && levelDone === false && death === false)
            {
                if(currentPowerup !== "gravity-guy")
                {
                    playerGravity = -9;
                    jumpBubleAnimY = playerY + 50;
                    jumpBubleAnim = 30;
                }
                if(currentPowerup === "gravity-guy" && !keys[32])
                {
                    if(switchGravity === "DOWN")
                    {
                        jumpBubleAnimY = playerY + 50;
                        jumpBubleAnim = 30;
                        playerGravity = -14;
                    }else
                    {
                        playerGravity = -5;
                    }
            }
        }
        
    }
    }
        break;
        
    case "down":
    //down collision
    if(playerX > x - playerSize && playerX < x + w && playerY > y - playerSize && playerY < y + h && currentPowerup !== "gravity-guy")
    {
        if(currentPowerup !== "gravity-guy")
        {
            playerY = y + h;
        }
        
    }
    
    if(playerX > x - playerSize && playerX < x + w && playerY > y - playerSize && playerY < y + h + 5 && currentPowerup === "gravity-guy")
    {
        
        if(currentPowerup === "gravity-guy")
        {
            playerY = y + h + 5;
            playerGravity = -5;
            
            if(currentPowerup === 'gravity-guy' && keys[32] && keyIsPressed && delayClick < 2 && levelDone === false)
            {
                delayClick += 2;
                
                playerGravity -= 5;
                
                switchGravity = "DOWN";
            }
        }
        
        if(keys[UP] || keys[87])
        {
            if(currentPowerup === "gravity-guy" && levelDone === false)
            {
                if(switchGravity === "UP" && !keys[32])
                {
                    jumpBubleAnimY = playerY;
                    jumpBubleAnim = 30;
                    playerGravity = 5;
                }
            }
        }
    }
        break;
}

};

//kill detection
var deathCollision = function(x, y, w, h, switchSound){
    
    if(playerX > x - playerSize && playerX < x + w && playerY > y - playerSize && playerY < y + h)
    {   
        death = true;
    }
    
    //fill(255, 0, 0);
    //rect(x, y, w, h);
};

var lavaBlock = function(x, y, w, h, styles){
    
    if(x <= -mapMove + mapMove + 500 && x >= -mapMove + mapMove - w)
    {
    deathCollision(x, y, w, h, "lava");
    
    fill(0, 0, 0);
    //rect(x, y, w, h);
    
    var wavyness = sin(frameCount * 5) * 4;
    
    switch(styles)
    {
        case "defualt":
    if(deLag === true)
    {
        fill(255, 0, 0);
        rect(x, y, w, h);
    }
    
    if(deLag === false)
    {
        noStroke();
        pushMatrix();
        translate(0, -h / 1.3);
        fill(240, 0, 0);
        beginShape();
        vertex(x, y + h / 1.3 + wavyness / 2);
        vertex(x + w / 8.7, y + h / 1.3 - wavyness / 2);
        vertex(x + w / 4.5, y + h / 1.3 + wavyness / 2);
        vertex(x + w / 3.1, y + h / 1.3 - wavyness / 2);
        vertex(x + w / 2.3, y + h / 1.3 + wavyness / 2);
        vertex(x + w / 1.8, y + h / 1.3 - wavyness / 2);
        vertex(x + w / 1.5, y + h / 1.3 + wavyness / 2);
        vertex(x + w / 1.31, y + h / 1.3 - wavyness / 2);
        vertex(x + w / 1.1, y + h / 1.3 + wavyness / 2);
        vertex(x + w, y + h / 1.3 - wavyness / 2);
        vertex(x + w, y + h * 1.6);
        vertex(x, y + h * 1.6);
        endShape();
        popMatrix();
        
        
        pushMatrix();
        translate(0, -h / 1.8);
        fill(209, 2, 2);
        beginShape();
        vertex(x, y + h / 1.3 + wavyness);
        vertex(x + w / 8.7, y + h / 1.3 - wavyness);
        vertex(x + w / 4.5, y + h / 1.3 + wavyness);
        vertex(x + w / 3.1, y + h / 1.3 - wavyness);
        vertex(x + w / 2.3, y + h / 1.3 + wavyness);
        vertex(x + w / 1.8, y + h / 1.3 - wavyness);
        vertex(x + w / 1.5, y + h / 1.3 + wavyness);
        vertex(x + w / 1.31, y + h / 1.3 - wavyness);
        vertex(x + w / 1.1, y + h / 1.3 + wavyness);
        vertex(x + w, y + h / 1.3 - wavyness);
        vertex(x + w, y + h * 1.2);
        vertex(x, y + h * 1.2);
        endShape();
        popMatrix();
        
        pushMatrix();
        translate(0, -h / 4);
        fill(181, 2, 2);
        beginShape();
        vertex(x, y + h / 1.3 + wavyness);
        vertex(x + w / 8.7, y + h / 1.3 - wavyness);
        vertex(x + w / 4.5, y + h / 1.3 + wavyness);
        vertex(x + w / 3.1, y + h / 1.3 - wavyness);
        vertex(x + w / 2.3, y + h / 1.3 + wavyness);
        vertex(x + w / 1.8, y + h / 1.3 - wavyness);
        vertex(x + w / 1.5, y + h / 1.3 + wavyness);
        vertex(x + w / 1.31, y + h / 1.3 - wavyness);
        vertex(x + w / 1.1, y + h / 1.3 + wavyness);
        vertex(x + w, y + h / 1.3 - wavyness);
        vertex(x + w, y + h * 1.2);
        vertex(x, y + h * 1.2);
        endShape();
        popMatrix();
        
        fill(143, 2, 2);
        beginShape();
        vertex(x, y + h / 1.3 + wavyness);
        vertex(x + w / 8.7, y + h / 1.3 - wavyness);
        vertex(x + w / 4.5, y + h / 1.3 + wavyness);
        vertex(x + w / 3.1, y + h / 1.3 - wavyness);
        vertex(x + w / 2.3, y + h / 1.3 + wavyness);
        vertex(x + w / 1.8, y + h / 1.3 - wavyness);
        vertex(x + w / 1.5, y + h / 1.3 + wavyness);
        vertex(x + w / 1.31, y + h / 1.3 - wavyness);
        vertex(x + w / 1.1, y + h / 1.3 + wavyness);
        vertex(x + w, y + h / 1.3 - wavyness);
        vertex(x + w, y + h);
        vertex(x, y + h);
        endShape();
        }
        break;
        
    case "retro":
        
    stroke(255, 0, 0);
    strokeWeight(3);
    fill(0, 0, 0);
    rect(x, y, w, h);
    
    if(deLag === false)
    {
    pushMatrix();
    translate(0, -h / 1.3);
    stroke(240, 0, 0);
    beginShape();
    vertex(x, y + h / 1.3 + wavyness / 2);
    vertex(x + w / 8.7, y + h / 1.3 - wavyness / 2);
    vertex(x + w / 4.5, y + h / 1.3 + wavyness / 2);
    vertex(x + w / 3.1, y + h / 1.3 - wavyness / 2);
    vertex(x + w / 2.3, y + h / 1.3 + wavyness / 2);
    vertex(x + w / 1.8, y + h / 1.3 - wavyness / 2);
    vertex(x + w / 1.5, y + h / 1.3 + wavyness / 2);
    vertex(x + w / 1.31, y + h / 1.3 - wavyness / 2);
    vertex(x + w / 1.1, y + h / 1.3 + wavyness / 2);
    vertex(x + w, y + h / 1.3 - wavyness / 2);
    vertex(x + w, y + h * 1.6);
    vertex(x, y + h * 1.6);
    endShape();
    popMatrix();
    
    pushMatrix();
    translate(0, -h / 1.8);
    stroke(209, 2, 2);
    beginShape();
    vertex(x, y + h / 1.3 + wavyness);
    vertex(x + w / 8.7, y + h / 1.3 - wavyness);
    vertex(x + w / 4.5, y + h / 1.3 + wavyness);
    vertex(x + w / 3.1, y + h / 1.3 - wavyness);
    vertex(x + w / 2.3, y + h / 1.3 + wavyness);
    vertex(x + w / 1.8, y + h / 1.3 - wavyness);
    vertex(x + w / 1.5, y + h / 1.3 + wavyness);
    vertex(x + w / 1.31, y + h / 1.3 - wavyness);
    vertex(x + w / 1.1, y + h / 1.3 + wavyness);
    vertex(x + w, y + h / 1.3 - wavyness);
    vertex(x + w, y + h * 1.2);
    vertex(x, y + h * 1.2);
    endShape();
    popMatrix();
    
    pushMatrix();
    translate(0, -h / 4);
    stroke(181, 2, 2);
    beginShape();
    vertex(x, y + h / 1.3 + wavyness);
    vertex(x + w / 8.7, y + h / 1.3 - wavyness);
    vertex(x + w / 4.5, y + h / 1.3 + wavyness);
    vertex(x + w / 3.1, y + h / 1.3 - wavyness);
    vertex(x + w / 2.3, y + h / 1.3 + wavyness);
    vertex(x + w / 1.8, y + h / 1.3 - wavyness);
    vertex(x + w / 1.5, y + h / 1.3 + wavyness);
    vertex(x + w / 1.31, y + h / 1.3 - wavyness);
    vertex(x + w / 1.1, y + h / 1.3 + wavyness);
    vertex(x + w, y + h / 1.3 - wavyness);
    vertex(x + w, y + h * 1.2);
    vertex(x, y + h * 1.2);
    endShape();
    popMatrix();
    
    stroke(143, 2, 2);
    beginShape();
    vertex(x, y + h / 1.3 + wavyness);
    vertex(x + w / 8.7, y + h / 1.3 - wavyness);
    vertex(x + w / 4.5, y + h / 1.3 + wavyness);
    vertex(x + w / 3.1, y + h / 1.3 - wavyness);
    vertex(x + w / 2.3, y + h / 1.3 + wavyness);
    vertex(x + w / 1.8, y + h / 1.3 - wavyness);
    vertex(x + w / 1.5, y + h / 1.3 + wavyness);
    vertex(x + w / 1.31, y + h / 1.3 - wavyness);
    vertex(x + w / 1.1, y + h / 1.3 + wavyness);
    vertex(x + w, y + h / 1.3 - wavyness);
    vertex(x + w, y + h);
    vertex(x, y + h);
    endShape();
            }
        break;
        
    case "candy":
        
    if(deLag === true)
    {
        fill(11, 217, 18);
        rect(x, y, w, h);
    }
        
    if(deLag === false)
    {
    noStroke();
    pushMatrix();
    translate(0, -h / 1.3);
    fill(0, 240, 36);
    beginShape();
    vertex(x, y + h / 1.3 + wavyness / 2);
    vertex(x + w / 8.7, y + h / 1.3 - wavyness / 2);
    vertex(x + w / 4.5, y + h / 1.3 + wavyness / 2);
    vertex(x + w / 3.1, y + h / 1.3 - wavyness / 2);
    vertex(x + w / 2.3, y + h / 1.3 + wavyness / 2);
    vertex(x + w / 1.8, y + h / 1.3 - wavyness / 2);
    vertex(x + w / 1.5, y + h / 1.3 + wavyness / 2);
    vertex(x + w / 1.31, y + h / 1.3 - wavyness / 2);
    vertex(x + w / 1.1, y + h / 1.3 + wavyness / 2);
    vertex(x + w, y + h / 1.3 - wavyness / 2);
    vertex(x + w, y + h * 1.6);
    vertex(x, y + h * 1.6);
    endShape();
    popMatrix();
    
    pushMatrix();
    translate(0, -h / 1.8);
    fill(2, 207, 2);
    beginShape();
    vertex(x, y + h / 1.3 + wavyness);
    vertex(x + w / 8.7, y + h / 1.3 - wavyness);
    vertex(x + w / 4.5, y + h / 1.3 + wavyness);
    vertex(x + w / 3.1, y + h / 1.3 - wavyness);
    vertex(x + w / 2.3, y + h / 1.3 + wavyness);
    vertex(x + w / 1.8, y + h / 1.3 - wavyness);
    vertex(x + w / 1.5, y + h / 1.3 + wavyness);
    vertex(x + w / 1.31, y + h / 1.3 - wavyness);
    vertex(x + w / 1.1, y + h / 1.3 + wavyness);
    vertex(x + w, y + h / 1.3 - wavyness);
    vertex(x + w, y + h * 1.2);
    vertex(x, y + h * 1.2);
    endShape();
    popMatrix();
    
    pushMatrix();
    translate(0, -h / 4);
    fill(4, 179, 4);
    beginShape();
    vertex(x, y + h / 1.3 + wavyness);
    vertex(x + w / 8.7, y + h / 1.3 - wavyness);
    vertex(x + w / 4.5, y + h / 1.3 + wavyness);
    vertex(x + w / 3.1, y + h / 1.3 - wavyness);
    vertex(x + w / 2.3, y + h / 1.3 + wavyness);
    vertex(x + w / 1.8, y + h / 1.3 - wavyness);
    vertex(x + w / 1.5, y + h / 1.3 + wavyness);
    vertex(x + w / 1.31, y + h / 1.3 - wavyness);
    vertex(x + w / 1.1, y + h / 1.3 + wavyness);
    vertex(x + w, y + h / 1.3 - wavyness);
    vertex(x + w, y + h * 1.2);
    vertex(x, y + h * 1.2);
    endShape();
    popMatrix();
    
    fill(3, 143, 7);
    beginShape();
    vertex(x, y + h / 1.3 + wavyness);
    vertex(x + w / 8.7, y + h / 1.3 - wavyness);
    vertex(x + w / 4.5, y + h / 1.3 + wavyness);
    vertex(x + w / 3.1, y + h / 1.3 - wavyness);
    vertex(x + w / 2.3, y + h / 1.3 + wavyness);
    vertex(x + w / 1.8, y + h / 1.3 - wavyness);
    vertex(x + w / 1.5, y + h / 1.3 + wavyness);
    vertex(x + w / 1.31, y + h / 1.3 - wavyness);
    vertex(x + w / 1.1, y + h / 1.3 + wavyness);
    vertex(x + w, y + h / 1.3 - wavyness);
    vertex(x + w, y + h);
    vertex(x, y + h);
    endShape();
    }
        break;
        
    case "roman":
    
    if(deLag === true)
    {
        fill(191, 0, 0);
        rect(x, y, w, h);
    }
    
    if(deLag === false)
    {
    noStroke();
    pushMatrix();
    translate(0, -h / 1.3);
    fill(168, 3, 3);
    beginShape();
    vertex(x, y + h / 1.3 + wavyness / 2);
    vertex(x + w / 8.7, y + h / 1.3 - wavyness / 2);
    vertex(x + w / 4.5, y + h / 1.3 + wavyness / 2);
    vertex(x + w / 3.1, y + h / 1.3 - wavyness / 2);
    vertex(x + w / 2.3, y + h / 1.3 + wavyness / 2);
    vertex(x + w / 1.8, y + h / 1.3 - wavyness / 2);
    vertex(x + w / 1.5, y + h / 1.3 + wavyness / 2);
    vertex(x + w / 1.31, y + h / 1.3 - wavyness / 2);
    vertex(x + w / 1.1, y + h / 1.3 + wavyness / 2);
    vertex(x + w, y + h / 1.3 - wavyness / 2);
    vertex(x + w, y + h * 1.6);
    vertex(x, y + h * 1.6);
    endShape();
    popMatrix();

    pushMatrix();
    translate(0, -h / 1.8);
    fill(181, 4, 4);
    beginShape();
    vertex(x, y + h / 1.3 + wavyness);
    vertex(x + w / 8.7, y + h / 1.3 - wavyness);
    vertex(x + w / 4.5, y + h / 1.3 + wavyness);
    vertex(x + w / 3.1, y + h / 1.3 - wavyness);
    vertex(x + w / 2.3, y + h / 1.3 + wavyness);
    vertex(x + w / 1.8, y + h / 1.3 - wavyness);
    vertex(x + w / 1.5, y + h / 1.3 + wavyness);
    vertex(x + w / 1.31, y + h / 1.3 - wavyness);
    vertex(x + w / 1.1, y + h / 1.3 + wavyness);
    vertex(x + w, y + h / 1.3 - wavyness);
    vertex(x + w, y + h * 1.2);
    vertex(x, y + h * 1.2);
    endShape();
    popMatrix();
    
    pushMatrix();
    translate(0, -h / 4);
    fill(161, 3, 3);
    beginShape();
    vertex(x, y + h / 1.3 + wavyness);
    vertex(x + w / 8.7, y + h / 1.3 - wavyness);
    vertex(x + w / 4.5, y + h / 1.3 + wavyness);
    vertex(x + w / 3.1, y + h / 1.3 - wavyness);
    vertex(x + w / 2.3, y + h / 1.3 + wavyness);
    vertex(x + w / 1.8, y + h / 1.3 - wavyness);
    vertex(x + w / 1.5, y + h / 1.3 + wavyness);
    vertex(x + w / 1.31, y + h / 1.3 - wavyness);
    vertex(x + w / 1.1, y + h / 1.3 + wavyness);
    vertex(x + w, y + h / 1.3 - wavyness);
    vertex(x + w, y + h * 1.2);
    vertex(x, y + h * 1.2);
    endShape();
    popMatrix();
    
    fill(143, 4, 4);
    beginShape();
    vertex(x, y + h / 1.3 + wavyness);
    vertex(x + w / 8.7, y + h / 1.3 - wavyness);
    vertex(x + w / 4.5, y + h / 1.3 + wavyness);
    vertex(x + w / 3.1, y + h / 1.3 - wavyness);
    vertex(x + w / 2.3, y + h / 1.3 + wavyness);
    vertex(x + w / 1.8, y + h / 1.3 - wavyness);
    vertex(x + w / 1.5, y + h / 1.3 + wavyness);
    vertex(x + w / 1.31, y + h / 1.3 - wavyness);
    vertex(x + w / 1.1, y + h / 1.3 + wavyness);
    vertex(x + w, y + h / 1.3 - wavyness);
    vertex(x + w, y + h);
    vertex(x, y + h);
    endShape();
    }
        break;
    }
    
    }
};

//generate block
var castleBlockTexture = function(x, y, w, h){
    
    w = 48;
    h = 44;
        
    fill(110, 110, 110);
    rect(x, y, w, h, 4);
    
    var roundness = (w + h) / 12;
    
    pushMatrix();
    translate(-1, 0);
    fill(140, 140, 140);
    rect(x + w / 24.6, y + h / 19.4, w / 2.4, h / 2.2, roundness);
    rect(x + w / 1.8, y + h / 19.4, w / 3.7, h / 3.3, roundness);
    rect(x + w / 2.2, y + h / 28.1, w / 9.6, h / 8.4, roundness);
    rect(x + w / 2.09, y + h / 3.4, w / 14.8, h / 13.6, roundness);
    rect(x + w / 1.9, y + h / 2.6, w / 4.3, h / 4.1, roundness);
    rect(x + w / 1.26, y + h / 3.2, w / 5.4, h / 4.4, roundness);
    rect(x + w / 1.18, y + h / 20.5, w / 7.7, h / 7.0, roundness);
    rect(x + w / 1.13, y + h / 4.8, w / 11.7, h / 14.3, roundness);
    rect(x + w / 1.31, y + h / 1.7, w / 7.9, h / 6.4, roundness);
    rect(x + w / 2.67, y + h / 1.9, w / 7.9, h / 7.6, roundness);
    rect(x + w / 11.54, y + h / 1.8, w / 4.0, h / 4.2, roundness);
    rect(x + w / 2.83, y + h / 1.4, w / 4.0, h / 4.2, roundness);
    rect(x + w / 13.43, y + h / 1.22, w / 4.0, h / 6.8, roundness);
    rect(x + w / 1.58, y + h / 1.52, w / 8.3, h / 3.8, roundness);
    rect(x + w / 1.28, y + h / 1.25, w / 8.3, h / 7.9, roundness);
    rect(x + w / 1.09, y + h / 1.73, w / 13.6, h / 7.9, roundness);
    rect(x + w / 1.09, y + h / 1.36, w / 14.7, h / 9.7, roundness);
    rect(x + w / 1.09, y + h / 1.15, w / 14.7, h / 11.4, roundness);
    popMatrix();
};
var compileCblock = function(x, y, w, h)
{
    fill(255, 0, 0);
    //rect(x, y, w, h);
    
    pushMatrix();
    translate(x, y);
    scale(w / 48, h / 44);
    castleBlockTexture(0, 0, w, h);
    popMatrix();
    
};
var stonBlock = function(x, y, w, h)
{
    fill(255, 0, 0);
    //rect(x, y, w, h);
    
    
    if(w <= 100)
    {
        compileCblock(x, y, w, h);
    }
    
    if(w >= 100 && w < 200)
    {
        
        compileCblock(x, y, w / 2, h);
        
        compileCblock(x + w / 2.2, y, w / 1.84, h);
    }
    
    if(w >= 200 && w < 450)
    {
        
        compileCblock(x, y, w / 3, h);
        
        compileCblock(x + w / 3.3, y, w / 2.73, h);
        
        compileCblock(x + w / 1.58, y, w / 2.73, h);
    }
    
    if(w >= 450)
    {
        
        compileCblock(x, y, w / 4.0, h);
        
        compileCblock(x + w / 4.2, y, w / 3.79, h);
        
        compileCblock(x + w / 2.06, y, w / 3.82, h);
        
        compileCblock(x + w / 1.35, y, w / 3.82, h);
    }
    
};

var chocolate = function(x, y, w, h){
    
    fill(105, 49, 3);
    rect(x, y, w, h);
    
    fill(138, 64, 3, 120);
    rect(x, y, w, h / 1.5);
    rect(x, y, w, h / 2.2);
    rect(x, y, w, h / 4.0);
    
    rectMode(CENTER);
    fill(97, 47, 1);
    rect(x + w / 5.7, y + h / 3.8, w / 3.8, h / 3.2);
    rect(x + w / 2.00, y + h / 3.8, w / 3.8, h / 3.2);
    rect(x + w / 1.20, y + h / 3.8, w / 3.8, h / 3.2);
    rect(x + w / 5.7, y + h / 1.4, w / 3.8, h / 3.2);
    rect(x + w / 2.00, y + h / 1.4, w / 3.8, h / 3.2);
    rect(x + w / 1.20, y + h / 1.4, w / 3.8, h / 3.2);
    
    fill(255, 145, 0, 30);
    rect(x + w / 5.7, y + h / 3.8, w / 4.8, h / 4.1);
    rect(x + w / 2.00, y + h / 3.8, w / 4.8, h / 4.1);
    rect(x + w / 1.20, y + h / 3.8, w / 4.8, h / 4.1);
    rect(x + w / 5.7, y + h / 1.4, w / 4.8, h / 4.1);
    rect(x + w / 2.00, y + h / 1.4, w / 4.8, h / 4.1);
    rect(x + w / 1.20, y + h / 1.4, w / 4.8, h / 4.1);
    
    fill(89, 48, 1);
    rect(x + w / 5.7, y + h / 3.8, w / 6.6, h / 6.0);
    rect(x + w / 2.00, y + h / 3.8, w / 6.6, h / 6.0);
    rect(x + w / 1.20, y + h / 3.8, w / 6.6, h / 6.0);
    rect(x + w / 5.7, y + h / 1.4, w / 6.6, h / 6.0);
    rect(x + w / 2.00, y + h / 1.4, w / 6.6, h / 6.0);
    rect(x + w / 1.20, y + h / 1.4, w / 6.6, h / 6.0);
    
    rectMode(0);
    
};
var block = function(x, y, w, h, styles){
    
    if(x <= -mapMove + mapMove + 500 && x >= -mapMove + mapMove - w)
    {
        noStroke();
        
        if(currentPowerup !== "emoji-box")
        {
            blockSide(x + 2, y - 4, w - 4, 2, "up");
            
            blockSide(x, y + h + 2, w, 2, "down");
            
            deathCollision(x - 3, y + 7, 2, h / 1.1, "block");
            
            deathCollision(x + w + 1, y + 10, 2, h / 4, "block");
            
        } else
        {
            lavaBlock(x - 2, y, w + 4, h + 8);
        }
        
        switch(styles)
        {
            case "defualt":
            noStroke();
            fill(143, 143, 143);
            rect(x - 2, y, w + 4, h + 8);
            
            if(deLag === false)
            {
            fill(255, 255, 255, 25);
            rect(x - 2, y, w + 4, h / 2.2);
            
            fill(255, 255, 255, 15);
            rect(x - 2, y, w / 1.2, h);
            rect(x - 2, y, w / 1.5, h / 1.3);
            }
                break;
                
            case "retro":
            
            strokeWeight(2);
            stroke(0, 98, 255);
            fill(0, 0, 0);
            rect(x - 2, y, w + 4, h + 8);
                break;
                
            case "candy":
            chocolate(x - 2, y, w + 4, h + 8);
                break;
                
            case "roman":
            stonBlock(x - 2, y, w + 4, h + 8);
                break;
        }
    }

};

//speed block
var speedArcThing = function(x, y, w, h){
    
    beginShape();
    vertex(x, y);
    vertex(x + w / 2.3, y);
    vertex(x + w, y + h / 2);
    vertex(x + w / 2.3, y + h);
    vertex(x, y + h);
    vertex(x + w / 2.3, y + h / 2);
    vertex(x, y);
    endShape();
};
var speedBlock = function(x, y, w, h, styles){
    
    if(x <= -mapMove + mapMove + 500 && x >= -mapMove + mapMove - w)
    {
        if(playerX > x - playerSize && playerX < x + w && playerY > y - playerSize && playerY < y + h)
        {
            extraSpeedTimer = 100;
        }
        
        switch(styles)
        {
            case "defualt":
            fill(0, 119, 255);
            speedArcThing(x + w / 1.5, y, w / 3, h);
            speedArcThing(x + w / 2.6, y, w / 3, h);
            speedArcThing(x + w / 10.9, y, w / 3, h);
            
            
            fill(45, 173, 252);
            speedArcThing(x + w / 1.9, y, w / 3, h);
            speedArcThing(x + w / 4.2, y, w / 3, h);
                break;
                
            case "retro":
                
            noFill();
            strokeWeight(2);
            stroke(0, 119, 255);
            speedArcThing(x + w / 1.5, y, w / 3, h);
            speedArcThing(x + w / 2.6, y, w / 3, h);
            speedArcThing(x + w / 10.9, y, w / 3, h);
            
            
            stroke(45, 173, 252);
            speedArcThing(x + w / 1.9, y, w / 3, h);
            speedArcThing(x + w / 4.2, y, w / 3, h);
                break;
                
            case "candy":
                
            noFill();
            fill(255, 255, 255);
            speedArcThing(x + w / 1.5, y, w / 3, h);
            speedArcThing(x + w / 2.6, y, w / 3, h);
            speedArcThing(x + w / 10.9, y, w / 3, h);
            
            fill(250, 42, 42);
            speedArcThing(x + w / 1.9, y, w / 3, h);
            speedArcThing(x + w / 4.2, y, w / 3, h);
            
            fill(255, 255, 255, 30);
            speedArcThing(x + w / 2.2, y, w / 3, h);
            speedArcThing(x + w / 6.5, y, w / 3, h);
                break;
                
            case "roman":
                
            noFill();
            fill(143, 0, 10);
            speedArcThing(x + w / 1.5, y, w / 3, h);
            speedArcThing(x + w / 2.6, y, w / 3, h);
            speedArcThing(x + w / 10.9, y, w / 3, h);
            
            fill(26, 26, 26);
            speedArcThing(x + w / 1.9, y, w / 3, h);
            speedArcThing(x + w / 4.2, y, w / 3, h);
            
            fill(255, 255, 255, 30);
            speedArcThing(x + w / 2.2, y, w / 3, h);
            speedArcThing(x + w / 6.5, y, w / 3, h);
                break;
        }
    }
};

//spike detection & style
var spike = function(x, y, s, styles){
    
    if(x <= -mapMove + mapMove + 510 && x >= -mapMove + mapMove - s)
    {
    
    noStroke();
    noFill();
    for(var i = 0; i < s; ++i)
    {
        
        deathCollision(x + i / 2, y + s - i, s - i, 1, "spike");
        
    }
        
      
    poopEmojiSpike(x + s / 4.7, y + s / 1.7, s / 1.7, styles);
    
    }
    
};

//balloon block variables
var ballonBlockMove = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var castleBlockTextureDirt = function(x, y, w, h){
    
    w = 48;
    h = 44;
        
    fill(161, 106, 3);
    rect(x, y, w, h, 4);
    
    var roundness = (w + h) / 12;
    
    pushMatrix();
    translate(-1, 0);
    fill(201, 132, 4);
    rect(x + w / 24.6, y + h / 19.4, w / 2.4, h / 2.2, roundness);
    rect(x + w / 1.8, y + h / 19.4, w / 3.7, h / 3.3, roundness);
    rect(x + w / 2.2, y + h / 28.1, w / 9.6, h / 8.4, roundness);
    rect(x + w / 2.09, y + h / 3.4, w / 14.8, h / 13.6, roundness);
    rect(x + w / 1.9, y + h / 2.6, w / 4.3, h / 4.1, roundness);
    rect(x + w / 1.26, y + h / 3.2, w / 5.4, h / 4.4, roundness);
    rect(x + w / 1.18, y + h / 20.5, w / 7.7, h / 7.0, roundness);
    rect(x + w / 1.13, y + h / 4.8, w / 11.7, h / 14.3, roundness);
    rect(x + w / 1.31, y + h / 1.7, w / 7.9, h / 6.4, roundness);
    rect(x + w / 2.67, y + h / 1.9, w / 7.9, h / 7.6, roundness);
    rect(x + w / 11.54, y + h / 1.8, w / 4.0, h / 4.2, roundness);
    rect(x + w / 2.83, y + h / 1.4, w / 4.0, h / 4.2, roundness);
    rect(x + w / 13.43, y + h / 1.22, w / 4.0, h / 6.8, roundness);
    rect(x + w / 1.58, y + h / 1.52, w / 8.3, h / 3.8, roundness);
    rect(x + w / 1.28, y + h / 1.25, w / 8.3, h / 7.9, roundness);
    rect(x + w / 1.09, y + h / 1.73, w / 13.6, h / 7.9, roundness);
    rect(x + w / 1.09, y + h / 1.36, w / 14.7, h / 9.7, roundness);
    rect(x + w / 1.09, y + h / 1.15, w / 14.7, h / 11.4, roundness);
    popMatrix();
};
var compileCblockDirt = function(x, y, w, h)
{
    fill(255, 0, 0);
    //rect(x, y, w, h);
    
    pushMatrix();
    translate(x, y);
    scale(w / 48, h / 44);
    castleBlockTextureDirt(0, 0, w, h);
    popMatrix();
    
};
var stonBlockDirt = function(x, y, w, h)
{
    fill(255, 0, 0);
    //rect(x, y, w, h);
    
    
    if(w <= 100)
    {
        compileCblockDirt(x, y, w, h);
    }
    
    if(w >= 100 && w < 200)
    {
        
        compileCblockDirt(x, y, w / 2, h);
        
        compileCblockDirt(x + w / 2.2, y, w / 1.84, h);
    }
    
    if(w >= 200 && w < 450)
    {
        
        compileCblockDirt(x, y, w / 3, h);
        
        compileCblockDirt(x + w / 3.3, y, w / 2.73, h);
        
        compileCblockDirt(x + w / 1.58, y, w / 2.73, h);
    }
    
    if(w >= 450)
    {
        
        compileCblockDirt(x, y, w / 4.0, h);
        
        compileCblockDirt(x + w / 4.2, y, w / 3.79, h);
        
        compileCblockDirt(x + w / 2.06, y, w / 3.82, h);
        
        compileCblockDirt(x + w / 1.35, y, w / 3.82, h);
    }
    
};

var chocolateWhite = function(x, y, w, h){
    
    fill(255, 220, 191);
    rect(x, y, w, h);
    
    fill(252, 215, 187, 100);
    rect(x, y, w, h / 1.5);
    rect(x, y, w, h / 2.2);
    rect(x, y, w, h / 4.0);
    
    rectMode(CENTER);
    fill(250, 192, 145);
    rect(x + w / 5.7, y + h / 3.8, w / 3.8, h / 3.2);
    rect(x + w / 2.00, y + h / 3.8, w / 3.8, h / 3.2);
    rect(x + w / 1.20, y + h / 3.8, w / 3.8, h / 3.2);
    rect(x + w / 5.7, y + h / 1.4, w / 3.8, h / 3.2);
    rect(x + w / 2.00, y + h / 1.4, w / 3.8, h / 3.2);
    rect(x + w / 1.20, y + h / 1.4, w / 3.8, h / 3.2);
    
    fill(252, 208, 174);
    rect(x + w / 5.7, y + h / 3.8, w / 4.8, h / 4.1);
    rect(x + w / 2.00, y + h / 3.8, w / 4.8, h / 4.1);
    rect(x + w / 1.20, y + h / 3.8, w / 4.8, h / 4.1);
    rect(x + w / 5.7, y + h / 1.4, w / 4.8, h / 4.1);
    rect(x + w / 2.00, y + h / 1.4, w / 4.8, h / 4.1);
    rect(x + w / 1.20, y + h / 1.4, w / 4.8, h / 4.1);
    
    fill(250, 183, 132);
    rect(x + w / 5.7, y + h / 3.8, w / 6.6, h / 6.0);
    rect(x + w / 2.00, y + h / 3.8, w / 6.6, h / 6.0);
    rect(x + w / 1.20, y + h / 3.8, w / 6.6, h / 6.0);
    rect(x + w / 5.7, y + h / 1.4, w / 6.6, h / 6.0);
    rect(x + w / 2.00, y + h / 1.4, w / 6.6, h / 6.0);
    rect(x + w / 1.20, y + h / 1.4, w / 6.6, h / 6.0);
    
    rectMode(0);
    
};
var balloonBlockPic = function(x, y, w, h, styles){
    
    switch(styles)
    {
        case "defualt":
        noStroke();
        fill(181, 110, 4);
        rect(x, y, w, h);
        
        if(deLag === false)
        {
        fill(140, 83, 3);
        rect(x, y + h / 5.5, w, h / 10);
        rect(x, y + h / 2.2, w, h / 13);
        
        fill(255, 255, 255, 50);
        rect(x, y + h / 3.3, w, h / 15);
        rect(x, y + h / 2.0, w, h / 15);
        rect(x, y + h / 1.4, w, h / 17);
        }
            break;
            
        case "retro":
        strokeWeight(2);
        fill(0, 0, 0);
        stroke(181, 110, 4);
        rect(x, y, w, h);
            break;
            
        case "candy":
        chocolateWhite(x, y, w, h);
        
        if(deLag === false)
            {
        fill(140, 97, 4, 130);
        ellipse(x + w / 6.5, y + h / 4.3, w / 16.2, h / 6.9);
        ellipse(x + w / 3.1, y + h / 4.3, w / 20.7, h / 9.9);
        ellipse(x + w / 4.0, y + h / 2.3, w / 20.7, h / 9.9);
        ellipse(x + w / 6.4, y + h / 1.4, w / 20.7, h / 9.9);
        ellipse(x + w / 3.0, y + h / 1.4, w / 20.7, h / 10.9);
        ellipse(x + w / 2.0, y + h / 2.3, w / 20.7, h / 11.8);
        ellipse(x + w / 1.6, y + h / 1.4, w / 20.7, h / 11.8);
        ellipse(x + w / 1.4, y + h / 2.7, w / 18.0, h / 9.9);
        ellipse(x + w / 1.7, y + h / 4.0, w / 29.3, h / 20.4);
        ellipse(x + w / 1.2, y + h / 1.3, w / 27.1, h / 20.4);
            }
            break;
            
        case "roman":
            stonBlockDirt(x, y, w, h);
            break;
    }
};
var blockSideBaloon = function(x, y, w, h, switchSide, BNUMSIDE, Bspeed){

switch(switchSide)
{
    
    case "right":
    //right collision
    if(playerX > x - playerSize && playerX < x + w && playerY > y - playerSize && playerY < y + h)
    {
        playerX = x - playerSize;
    }
        break;
        
    case "left":
    //left collision
    if(playerX > x - playerSize && playerX < x + w && playerY > y - playerSize && playerY < y + h)
    {
        playerX = x + w;
    }
        break;
        
    case "up":
    //up collision
    if(playerX > x - playerSize && playerX < x + w && playerY > y - playerSize&& playerY < y + h)
    {
        playerY = y - playerSize;
        playerGravity = 0;
        playerY += Bspeed;
        
        ballonBlockMove[BNUMSIDE] += Bspeed;
        
        if(keys[UP] || keys[87])
        {
           playerGravity = -9;
           
            jumpBubleAnimY = playerY + 50;
            jumpBubleAnim = 30;
        }
        
    }
        break;
        
    case "down":
    //down collision
    if(playerX > x - playerSize && playerX < x + w && playerY > y - playerSize && playerY < y + h)
    {
        playerY = y + h;
    }
        break;
}

};
var lolipopBalloon = function(x, y, w, h){
    
    noStroke();
    
    fill(255, 255, 255);
    ellipse(x, y, w, h);
    
    noFill();
    strokeWeight(((w / 6) + (h / 6)) / 2);
    pushMatrix();
    translate(x, y);
    
    stroke(255, 0, 0);
    for(var i = 0; i < 5; ++i)
    {
        arc(0, 0, (w / 1.2) - i * (w / 6), (h / 1.2) - i * (w / 6), 0 + i * (w / 6), 45 + i * (w / 6));
    }
    
    rotate(52);
    stroke(255, 119, 0);
    for(var i = 0; i < 5; ++i)
    {
        arc(0, 0, (w / 1.2) - i * (w / 6), (h / 1.2) - i * (w / 6), 0 + i * (w / 6), 45 + i * (w / 6));
    }
    
    rotate(52);
    stroke(255, 213, 0);
    for(var i = 0; i < 5; ++i)
    {
        arc(0, 0, (w / 1.2) - i * (w / 6), (h / 1.2) - i * (w / 6), 0 + i * (w / 6), 45 + i * (w / 6));
    }
    
    rotate(52);
    stroke(0, 255, 51);
    for(var i = 0; i < 5; ++i)
    {
        arc(0, 0, (w / 1.2) - i * (w / 6), (h / 1.2) - i * (w / 6), 0 + i * (w / 6), 45 + i * (w / 6));
    }
    
    rotate(52);
    stroke(0, 153, 255);
    for(var i = 0; i < 5; ++i)
    {
        arc(0, 0, (w / 1.2) - i * (w / 6), (h / 1.2) - i * (w / 6), 0 + i * (w / 6), 45 + i * (w / 6));
    }
    
    rotate(52);
    stroke(220, 0, 240);
    for(var i = 0; i < 5; ++i)
    {
        arc(0, 0, (w / 1.2) - i * (w / 6), (h / 1.2) - i * (w / 6), 0 + i * (w / 6), 45 + i * (w / 6));
    }
    
     rotate(52);
    stroke(237, 73, 252);
    for(var i = 0; i < 5; ++i)
    {
        arc(0, 0, (w / 1.2) - i * (w / 6), (h / 1.2) - i * (w / 6), 0 + i * (w / 6), 45 + i * (w / 6));
    }
    popMatrix();
};

var batCastle = function(x, y, s){

    fill(0, 0, 0);
    
    beginShape();
    vertex(x, y - s / 3.0);
    vertex(x + s / 7.7, y - s / 3.3);
    vertex(x + s / 4.8, y - s / 2.2);
    vertex(x + s / 4.0, y - s / 5.3);
    vertex(x + s / 2.1, y - s / 3.9 + sin(frameCount * 20) * s / 3);
    vertex(x + s / 1.5, y - s / 2.7 + sin(frameCount * 20) * s / 3);
    vertex(x + s / 1.3, y - s / 1.7 + sin(frameCount * 20) * s / 3);
    vertex(x + s / 0.9, y - s / 2.3 + sin(frameCount * 20) * s / 3);
    vertex(x + s / 1.1, y - s / 3.3 + sin(frameCount * 20) * s / 3);
    vertex(x + s / 1.2, y - s / 12.4 + sin(frameCount * 20) * s / 3);
    vertex(x + s / 1.7, y - s / 12.4 + sin(frameCount * 20) * s / 3);
    vertex(x + s / 3.2, y + s / 11.7);
    vertex(x, y + s / 2.1);
    vertex(x - s / 3.2, y + s / 11.7);
    vertex(x - s / 1.7, y - s / 12.4 + sin(frameCount * 20) * s / 3);
    vertex(x - s / 1.2, y - s / 12.4 + sin(frameCount * 20) * s / 3);
    vertex(x - s / 1.1, y - s / 3.3 + sin(frameCount * 20) * s / 3);
    vertex(x - s / 0.9, y - s / 2.3 + sin(frameCount * 20) * s / 3);
    vertex(x - s / 1.3, y - s / 1.7 + sin(frameCount * 20) * s / 3);
    vertex(x - s / 1.5, y - s / 2.7 + sin(frameCount * 20) * s / 3);
    vertex(x - s / 2.1, y - s / 3.9 + sin(frameCount * 20) * s / 3);
    vertex(x - s / 4.0, y - s / 5.3);
    vertex(x - s / 4.8, y - s / 2.2);
    vertex(x - s / 7.7, y - s / 3.3);
    vertex(x, y - s / 3.0);
    endShape();
    
    noStroke();
            
};
var wingsCastle = function(x, y, w, h){

    fill(255, 255, 255);
    
    beginShape();
    vertex(x, y - h / 3.0);
    vertex(x + w / 7.7, y - h / 3.3);
    vertex(x + w / 4.8, y - h / 2.2);
    vertex(x + w / 4.0, y - h / 5.3);
    vertex(x + w / 2.1, y - h / 3.9 + sin(frameCount * 20) * h / 3);
    vertex(x + w / 1.5, y - h / 2.7 + sin(frameCount * 20) * h / 3);
    vertex(x + w / 1.3, y - h / 1.7 + sin(frameCount * 20) * h / 3);
    vertex(x + w / 0.9, y - h / 2.3 + sin(frameCount * 20) * h / 3);
    vertex(x + w / 1.1, y - h / 3.3 + sin(frameCount * 20) * h / 3);
    vertex(x + w / 1.2, y - h / 12.4 + sin(frameCount * 20) * h / 3);
    vertex(x + w / 1.7, y - h / 12.4 + sin(frameCount * 20) * h / 3);
    vertex(x + w / 3.2, y + h / 11.7);
    vertex(x, y + h / 2.1);
    vertex(x - w / 3.2, y + h / 11.7);
    vertex(x - w / 1.7, y - h / 12.4 + sin(frameCount * 20) * h / 3);
    vertex(x - w / 1.2, y - h / 12.4 + sin(frameCount * 20) * h / 3);
    vertex(x - w / 1.1, y - h / 3.3 + sin(frameCount * 20) * h / 3);
    vertex(x - w / 0.9, y - h / 2.3 + sin(frameCount * 20) * h / 3);
    vertex(x - w / 1.3, y - h / 1.7 + sin(frameCount * 20) * h / 3);
    vertex(x - w / 1.5, y - h / 2.7 + sin(frameCount * 20) * h / 3);
    vertex(x - w / 2.1, y - h / 3.9 + sin(frameCount * 20) * h / 3);
    vertex(x - w / 4.0, y - h / 5.3);
    vertex(x - w / 4.8, y - h / 2.2);
    vertex(x - w / 7.7, y - h / 3.3);
    vertex(x, y - h / 3.0);
    endShape();
    
    noStroke();
            
};
var balloon = function(x, y, s, styles){
    
    switch(styles)
    {
        case "defualt":
        noStroke();
        fill(255, 0, 0);
        ellipse(x, y, s, s * 1.3);
        arc(x, y + s / 1.2, s / 3, s / 1.5, -180, 0);
        
        fill(255, 110, 110, 80);
        ellipse(x - s / 19, y - s / 21, s / 1.1, s / 0.9);
        ellipse(x - s / 8, y - s / 7, s / 1.5, s / 1.2);
            break;
            
        case "retro":
        stroke(255, 0, 0);
        ellipse(x, y, s, s * 1.3);
        noFill();
        arc(x, y + s / 1.07, s / 3, s / 1.5, -180, 0);
        
            break;
            
        case "candy":
        lolipopBalloon(x, y, s, s);
            break;
            
        case "roman":
        batCastle(x, y, s, s);
            break;
    }
};

var rocketBooster = function(x, y, w, h, styles){
    
    var randomiseFire = floor(random(-h / 5, h * 1.5));
    
    switch(styles)
    {
        case "retro":
        
        strokeWeight(2);
        fill(0, 0, 0);
        stroke(255, 157, 0);
        ellipse(x + w / 2, y + h, w / 3.3, h + randomiseFire);
        stroke(255, 60, 0);
        ellipse(x + w / 2, y + h, w / 5.3, h / 1.6 + randomiseFire);
        stroke(255, 0, 0);
        ellipse(x + w / 2, y + h, w / 13.1, h / 4.2 + randomiseFire);
        
        stroke(117, 117, 117);
        fill(0, 0, 0);
        beginShape();
        vertex(x + w / 3, y);
        vertex(x + w / 1.5, y);
        vertex(x + w, y + h / 2.5);
        vertex(x + w / 1.35, y + h);
        vertex(x + w / 4, y + h);
        vertex(x, y + h / 2.5);
        endShape();
        noStroke();
            break;
            
        case "defualt":
        
        fill(255, 230, 0, 120);
        ellipse(x + w / 2, y + h, w / 2.3, h * 1.3 + randomiseFire);
        fill(255, 157, 0);
        ellipse(x + w / 2, y + h, w / 3.3, h + randomiseFire);
        fill(255, 60, 0);
        ellipse(x + w / 2, y + h, w / 5.3, h / 1.6 + randomiseFire);
        fill(255, 0, 0);
        ellipse(x + w / 2, y + h, w / 13.1, h / 4.2 + randomiseFire);
        
        
        fill(102, 102, 102);
        beginShape();
        vertex(x + w / 3, y);
        vertex(x + w / 1.5, y);
        vertex(x + w, y + h / 2.5);
        vertex(x + w / 1.35, y + h);
        vertex(x + w / 4, y + h);
        vertex(x, y + h / 2.5);
        endShape();
        
        fill(255, 255, 255, 40);
    
        beginShape();
        vertex(x + w / 3, y);
        vertex(x + w / 1.5, y);
        vertex(x + w, y + h / 2.5);
        vertex(x + w / 1.35, y + h);
        vertex(x, y + h / 2.5);
        endShape();
            break;
            
        case "candy":
        
        fill(255, 255, 255, 120);
        ellipse(x + w / 2, y + h, w / 2.3, h * 1.3 + randomiseFire);
        fill(255, 218, 143);
        ellipse(x + w / 2, y + h, w / 3.3, h + randomiseFire);
        fill(255, 224, 150);
        ellipse(x + w / 2, y + h, w / 5.3, h / 1.6 + randomiseFire);
        fill(255, 255, 255);
        ellipse(x + w / 2, y + h, w / 13.1, h / 4.2 + randomiseFire);
        
        fill(110, 79, 2);
        beginShape();
        vertex(x + w / 3, y);
        vertex(x + w / 1.5, y);
        vertex(x + w, y + h / 2.5);
        vertex(x + w / 1.35, y + h);
        vertex(x + w / 4, y + h);
        vertex(x, y + h / 2.5);
        endShape();
        
        fill(255, 255, 255, 40);
    
        beginShape();
        vertex(x + w / 3, y);
        vertex(x + w / 1.5, y);
        vertex(x + w, y + h / 2.5);
        vertex(x + w / 1.35, y + h);
        vertex(x, y + h / 2.5);
        endShape();
        
            break;
            
        case "roman":
        
        wingsCastle(x + w / 2.1, y, w * 1.5, h * 0.8);
        
            break;
    }
};
var ballonblock = function(x, y, w, h, BNUM, BSpeed, styles){
    
    if(x <= -mapMove + mapMove + 500 && x >= -mapMove + mapMove - w)
    {
    noStroke();
    
    blockSideBaloon(x + 2, y - 3 + ballonBlockMove[BNUM], w - 4, 1, "up", BNUM, BSpeed);
    
    blockSideBaloon(x, y + h + 2 + ballonBlockMove[BNUM], w, 2, "down", BNUM, BSpeed);
    
    deathCollision(x - 3, y + 6 + ballonBlockMove[BNUM], 2, h, "block");
    
    //deathCollision(x + w + 1, y + 6 + ballonBlockMove[BNUM], 2, h, "block");
    
    switch(styles)
    {
        case "defualt":
        stroke(176, 176, 176);
        strokeWeight(2);
        line(x + w / 2 + sin(frameCount * 2) * 3, y - 76 + sin(frameCount * 4) * 3 + ballonBlockMove[BNUM], x + w / 2, y + ballonBlockMove[BNUM]);
        noStroke();
        
        fill(255, 128, 0);
        balloonBlockPic(x - 2, y + ballonBlockMove[BNUM], w + 4, h + 8, styles);
        
        balloon(x + w / 2 + sin(frameCount * 2) * 3, y - 76 + sin(frameCount * 4) * 3 + ballonBlockMove[BNUM], 33, styles);
            break;
            
        case "retro":
        stroke(176, 176, 176);
        strokeWeight(2);
        line(x + w / 2 + sin(frameCount * 2) * 3, y - 76 + sin(frameCount * 4) * 3 + ballonBlockMove[BNUM], x + w / 2, y + ballonBlockMove[BNUM]);
        noStroke();
        
        fill(255, 128, 0);
        balloonBlockPic(x - 2, y + ballonBlockMove[BNUM], w + 4, h + 8, styles);
        
        balloon(x + w / 2 + sin(frameCount * 2) * 3, y - 76 + sin(frameCount * 4) * 3 + ballonBlockMove[BNUM], 33, styles);
            break;
            
        case "candy":
        stroke(176, 176, 176);
        strokeWeight(2);
        line(x + w / 2 + sin(frameCount * 2) * 3, y - 76 + sin(frameCount * 4) * 3 + ballonBlockMove[BNUM], x + w / 2, y + ballonBlockMove[BNUM]);
        noStroke();
        
        fill(255, 128, 0);
        balloonBlockPic(x - 2, y + ballonBlockMove[BNUM], w + 4, h + 8, styles);
        
        balloon(x + w / 2 + sin(frameCount * 2) * 3, y - 76 + sin(frameCount * 4) * 3 + ballonBlockMove[BNUM], 33, styles);
            break;
            
        case "roman":
            
        stroke(176, 176, 176);
        strokeWeight(2);
        line(x + w / 2 + sin(frameCount * 2) * 3, y - 76 + sin(frameCount * 4) * 3 + ballonBlockMove[BNUM], x + w / 2, y + ballonBlockMove[BNUM]);
        noStroke();
        
        fill(255, 128, 0);
        balloonBlockPic(x - 2, y + ballonBlockMove[BNUM], w + 4, h + 8, styles);
        
        balloon(x + w / 2 + sin(frameCount * 2) * 3, y - 76 + sin(frameCount * 4) * 3 + ballonBlockMove[BNUM], 33, styles);
            break;
    }
    }
    
};
var ballonblockUPMechanics = function(x, y, w, h, BNUM, BSpeed, styles){
    
    if(x <= -mapMove + mapMove + 500 && x >= -mapMove + mapMove - w)
    {
    noStroke();
    
    deathCollision(x - 3, y + 6 + ballonBlockMove[BNUM], 2, h, "block");
    
    deathCollision(x + w + 1, y + 6 + ballonBlockMove[BNUM], 2, h, "block");
    
    blockSideBaloon(x + 2, y - 4 + ballonBlockMove[BNUM], w - 4, 2, "up", BNUM, BSpeed);
    
    blockSideBaloon(x, y + h + 2 + ballonBlockMove[BNUM], w, 2, "down", BNUM, BSpeed);
        
    rocketBooster(x + w / 3.7, y + h * 1.0 + ballonBlockMove[BNUM], w / 2, 30 / 1.5, styles);
    
    fill(0, 0, 0);
    balloonBlockPic(x - 2, y + ballonBlockMove[BNUM], w + 4, h + 8, styles);
    
    }
    
};
var ballonblockUP = function(x, y, w, h, BNUM, BSpeed, styles){
    
    if(x <= -mapMove + mapMove + 500 && x >= -mapMove + mapMove - w)
    {
        ballonblockUPMechanics(x, y, w, h, BNUM, -BSpeed, styles);
    }
    
};

//portal
var chocolateChip = function(x, y, w, h){
    
    fill(112, 49, 0);
    ellipse(x, y, w, h);
    
    fill(250, 110, 3, 50);
    ellipse(x - w / 6.0, y - h / 5.9, w / 2, h / 2);
    
    fill(232, 132, 60, 30);
    ellipse(x + w / 3.8, y + h / 5.9, w / 4, h / 4);
};
var cookiePortal = function(x, y, w, h){
    
    noStroke();
    
    fill(196, 106, 4);
    ellipse(x, y, w, h);
    
    fill(156, 80, 3, 130);
    arc(x, y, w, h, -60, 80);
    
    fill(196, 106, 4);
    arc(x, y, w / 1.3, h / 1.0, -65, 99);
    
    fill(230, 122, 7, 100);
    ellipse(x - w / 8.8, y - h / 8.2, w / 1.8, h / 1.8);
    
    chocolateChip(x - w / 5.3, y - h / 5.8, w / 4.6, h / 5.7);
    chocolateChip(x + w / 26.0, y - h / 2.9, w / 6.3, h / 7.2);
    chocolateChip(x + w / 17.9, y - h / 12.5, w / 8.2, h / 8.7);
    chocolateChip(x - w / 4.4, y + h / 9.5, w / 8.2, h / 8.7);
    chocolateChip(x + w / 7.4, y + h / 6.2, w / 8.2, h / 8.7);
    chocolateChip(x + w / 3.4, y - h / 16.8, w / 8.2, h / 8.7);
    chocolateChip(x - w / 23.4, y + h / 2.9, w / 10.5, h / 11.1);
};
var galaxyHoop = function(x, y, w, h){
    
    noFill();
    strokeWeight(w / 10);
    stroke(255, 255, 255, 130 + sin(frameCount * 5) * 30);
    fill(0, 0, 0);
    ellipse(x, y, w, h);
    
    noStroke();
    fill(255, 255, 255);
    for(var i = 0; i < 8; ++i)
    {
        ellipse(x + random(-w / 2.9, w / 3.2), y + random(-h / 2.3, h / 2.3), 2, 2);
    }
    
};
var portal = function(x, y, w, h, styles){
    
    if(x <= -mapMove + mapMove + 500 && x >= -mapMove + mapMove - w)
    {
    if(playerX > x - playerSize && playerX < x + w && playerY > y - playerSize && playerY < y + h)
    {
        levelDone = true;
    }
    
    switch(styles)
    {
        case "defualt":
        fill(255, 255, 255, 40);
        strokeWeight(w / 13);
        
        stroke(2, 89, 28);
        ellipse(x + w / 1.26, y + h / 2.0 + sin(frameCount * 3) * h / 13, w / 3.5, h / 1.8);
        stroke(3, 171, 59);
        ellipse(x + w / 1.3, y + h / 2.0 + sin(frameCount * 3) * h / 13, w / 3.5, h / 1.8);
        
        stroke(2, 89, 28);
        ellipse(x + w / 1.8, y + h / 2.0 + sin(frameCount * 3.1) * h / 10, w / 2.7, h / 1.2);
        stroke(3, 171, 59);
        ellipse(x + w / 1.9, y + h / 2.0 + sin(frameCount * 3.1) * h / 10, w / 2.7, h / 1.2);
        
        stroke(2, 89, 28);
        ellipse(x + w / 3.7, y + h / 2 + sin(frameCount * 3.2) * h / 7, w / 2, h);
        stroke(3, 171, 59);
        ellipse(x + w / 4.2, y + h / 2 + sin(frameCount * 3.2) * h / 7, w / 2, h);
        
        noStroke();
            break;
            
        case "retro":
        
        noFill();
        strokeWeight(w / 25);
        
        stroke(3, 171, 59);
        ellipse(x + w / 1.3, y + h / 2.0 + sin(frameCount * 3) * h / 13, w / 3.5, h / 1.8);
        
        stroke(3, 171, 59);
        ellipse(x + w / 1.9, y + h / 2.0 + sin(frameCount * 3.1) * h / 10, w / 2.7, h / 1.2);
        
        stroke(3, 171, 59);
        ellipse(x + w / 4.2, y + h / 2 + sin(frameCount * 3.2) * h / 7, w / 2, h);
        
        noStroke();
            break;
            
        case "candy":
        
        cookiePortal(x + w / 1.3, y + h / 2.0 + sin(frameCount * 3) * h / 13, w / 3.5, h / 1.8);
        
        cookiePortal(x + w / 1.9, y + h / 2.0 + sin(frameCount * 3.1) * h / 10, w / 2.7, h / 1.2);
        
        cookiePortal(x + w / 4.2, y + h / 2 + sin(frameCount * 3.2) * h / 7, w / 2, h);
            break;
            
        case "roman":
        
        galaxyHoop(x + w / 1.3, y + h / 2.0 + sin(frameCount * 3) * h / 13, w / 3.5, h / 1.8);
        
        galaxyHoop(x + w / 1.9, y + h / 2.0 + sin(frameCount * 3.1) * h / 10, w / 2.7, h / 1.2);
        
        galaxyHoop(x + w / 4.2, y + h / 2 + sin(frameCount * 3.2) * h / 7, w / 2, h);
            break;
    }
    }
};

//trampoline vars
var trampAnimation = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var jelloBumpTramp = function(x, y, w, h){

    strokeWeight(3);
    fill(255, 0, 0, 210);
    stroke(184, 0, 0, 130);
    beginShape();
    vertex(x - w / 7.4, y - h / 2.8);
    vertex(x - w / 16.4, y - h / 2.3);
    vertex(x, y - h / 2.2);
    vertex(x + w / 16.4, y - h / 2.3);
    vertex(x + w / 7.4, y - h / 2.8);
    vertex(x + w / 3.7, y + h / 4.9);
    vertex(x + w / 4.4, y + h / 3.2);
    vertex(x + w / 11.8, y + h / 2.9);
    vertex(x, y + h / 2.9);
    vertex(x - w / 11.8, y + h / 2.9);
    vertex(x - w / 4.4, y + h / 3.2);
    vertex(x - w / 3.7, y + h / 4.9);
    vertex(x - w / 7.4, y - h / 2.8);
    endShape();
    
    //shade
    fill(0, 0, 0, 40);
    beginShape();
    vertex(x + w / 16.4, y - h / 2.3);
    vertex(x + w / 7.4, y - h / 2.8);
    vertex(x + w / 3.7, y + h / 4.9);
    vertex(x + w / 4.4, y + h / 3.2);
    endShape();
};
var JelloTramp = function(x, y, w, h){
    
    jelloBumpTramp(x + w / 2.0, y + h / 6.9, w / 1.8, h * 1.1);
    jelloBumpTramp(x + w / 1.7, y + h / 6.9, w / 1.8, h * 1.1);
    jelloBumpTramp(x + w / 2.5, y + h / 6.9, w / 1.8, h * 1.1);
    jelloBumpTramp(x + w / 3.0, y + h / 3.3, w / 1.8, h * 1.1);
    jelloBumpTramp(x + w / 1.5, y + h / 3.3, w / 1.8, h * 1.1);
    jelloBumpTramp(x + w / 2.4, y + h / 2.1, w / 1.5, h * 1.3);
    jelloBumpTramp(x + w / 1.7, y + h / 2.1, w / 1.5, h * 1.3);
    jelloBumpTramp(x + w / 2, y + h / 1.8, w / 1.8, h * 1.4);
};
var forkTramp = function(x, y, w, h){
    
    fill(163, 163, 163);
    arc(x + w / 2, y, w, h * 2.0, 51, 130);
    
    fill(255, 255, 255, 120);
    arc(x + w / 2, y, w, h * 2.0, 51, 79);
    
    fill(163, 163, 163);
    arc(x + w / 2.0, y + h / 20.1, w / 1.7, h / 3.5, 0, 180);
    arc(x + w / 1.5, y - h / 17.8, w / 2.5, h / 1.9, 0, 119);
    arc(x + w / 3.2, y - h / 17.8, w / 2.5, h / 1.9, 71, 180);
    rect(x + w / 2.4, y - h / 17.0, w / 8, h / 4);
    
    fill(255, 255, 255, 100);
    arc(x + w / 1.3, y - h / 17.8, w / 4.6, h / 2.4, 0, 89);
    arc(x + w / 3.2, y - h / 17.8, w / 6.1, h / 4.1, 71, 180);
    rect(x + w / 2.1, y - h / 17.0, w / 16, h / 10);
};
var trampoline = function(x, y, w, h, currentAnim, styles){
    
    if(x <= -mapMove + mapMove + 510 && x >= -mapMove + mapMove - 10 - w)
    {
    
    if(playerX > x - playerSize && playerX < x + w && playerY > y - playerSize && playerY < y + h && death === false)
    {
        playerGravity = -12;
        trampAnimation[currentAnim] += 15;
        jumpBubleAnimY = playerY + 45;
        jumpBubleAnim = 30;
    }else
    {
        trampAnimation[currentAnim] -= 3;
    }
    
    if(trampAnimation[currentAnim] <= 0)
    {
        trampAnimation[currentAnim] = 0;
    }
    
    if(trampAnimation[currentAnim] >= 15)
    {
        trampAnimation[currentAnim] = 15;
    }
    
    deathCollision(x + 5, y + 14 + trampAnimation[currentAnim], w - 10, h * 6);
    
    switch(styles)
    {
        case "defualt":
    noFill();
    stroke(94, 94, 94);
    strokeWeight(1);
    ellipse(x + w / 2, y + h / 0.7, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.5, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.4, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.33, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.28, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.25, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.22, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.20, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.18, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.163, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.15, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.14, w / 3, h - trampAnimation[currentAnim]);
    
    noStroke();
    
    fill(255, 117, 248);
    rect(x, y + trampAnimation[currentAnim], w, h * 1.3, 4);
    
    fill(255, 255, 255, 30);
    rect(x, y + trampAnimation[currentAnim], w, h / 2, 4);
            break;
            
        case "retro":
    noFill();
    stroke(0, 98, 255);
    strokeWeight(1);
    ellipse(x + w / 2, y + h / 0.7, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.5, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.4, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.33, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.28, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.25, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.22, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.20, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.18, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.163, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.15, w / 3, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.14, w / 3, h - trampAnimation[currentAnim]);
    
    strokeWeight(2);
    stroke(233, 107, 255);
    fill(0, 0, 0);
    rect(x, y + trampAnimation[currentAnim], w, h * 1.3, 4);
    noStroke();
            break;
            
        case "candy":
    
    noStroke();
    forkTramp(x + w / 2.9, y + h / 0.31, w / 3.0, h * 5.4);
    
    JelloTramp(x - w / 3.0, y + trampAnimation[currentAnim] + 5, w * 1.7, h * 2.4, 4);
    noStroke();
            break;
            
        case "roman":
    noFill();
    stroke(77, 77, 77);
    strokeWeight(1);
    
    pushMatrix();
    translate(-26, 0);
    ellipse(x + w / 2, y + h / 0.7, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.5, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.4, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.33, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.28, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.25, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.22, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.20, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.18, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.163, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.15, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.14, w / 5, h - trampAnimation[currentAnim]);
    popMatrix();
    
    pushMatrix();
    translate(26, 0);
    ellipse(x + w / 2, y + h / 0.7, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.5, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.4, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.33, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.28, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.25, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.22, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.20, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.18, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.163, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.15, w / 5, h - trampAnimation[currentAnim]);
    ellipse(x + w / 2, y + h / 0.14, w / 5, h - trampAnimation[currentAnim]);
    popMatrix();
    
    strokeWeight(2);
    stroke(196, 196, 196);
    fill(166, 166, 166);
    rect(x, y + trampAnimation[currentAnim], w, h * 1.3, 15);
    noStroke();
    fill(255, 255, 255, 50);
    rect(x, y + trampAnimation[currentAnim], w, h / 1.2, 15);
    noStroke();
            break;
    
    }
    
    }
};

//checkpoint
var flagAnimation = [212, 212, 212, 212, 212];
var flagAnimationState = [false, false, false, false, false];
var candyCane = function(x, y, w, h){
    
    fill(255, 105, 255);
    rect(x, y, w, h);
    
    for(var i = 0; i < 6; ++i)
    {
        fill(255, 0, 0);
        pushMatrix();
        translate(0, -i * (h / 6.7));
        beginShape();
        vertex(x, y + h / 1.1);
        vertex(x, y + h / 1.14);
        vertex(x + w, y + h / 1.06);
        vertex(x + w, y + h / 1.02);
        endShape();
        popMatrix();
        
        fill(255, 119, 0);
        pushMatrix();
        translate(0, (-h / 26) -i * (h / 6.7));
        beginShape();
        vertex(x, y + h / 1.1);
        vertex(x, y + h / 1.14);
        vertex(x + w, y + h / 1.06);
        vertex(x + w, y + h / 1.02);
        endShape();
        popMatrix();
        
        fill(255, 213, 0);
        pushMatrix();
        translate(0, (-h / 12) -i * (h / 6.7));
        beginShape();
        vertex(x, y + h / 1.1);
        vertex(x, y + h / 1.14);
        vertex(x + w, y + h / 1.06);
        vertex(x + w, y + h / 1.02);
        endShape();
        popMatrix();
        
        fill(0, 85, 255);
        pushMatrix();
        translate(0, (-h / 9) -i * (h / 6.7));
        beginShape();
        vertex(x, y + h / 1.1);
        vertex(x, y + h / 1.14);
        vertex(x + w, y + h / 1.06);
        vertex(x + w, y + h / 1.02);
        endShape();
        popMatrix();
    }
};
var flagCheckpoint = function(x, y, w, h, FNUM, styles)
{
    if(x <= -mapMove + mapMove + 520 && x >= -mapMove + mapMove - w - 100)
    {
        switch(styles)
        {
            case "defualt":
            noStroke();
            fill(145, 91, 3);
            rect(x, y, w, h);
            
            fill(255, 255, 255, 40);
            rect(x, y, w / 2, h);
            
            pushMatrix();
            translate(0, flagAnimation[FNUM]);
            fill(0, 196, 3);
            triangle(x - w * 3, y + h / 14 + sin(frameCount * 5) * 5,    x, y + h / 8,    x, y + h / 59);
            popMatrix();
                break;
                
            case "retro":
            
            strokeWeight(2);
            fill(0, 0, 0);
            stroke(145, 91, 3);
            rect(x, y, w, h);
            
            pushMatrix();
            translate(0, flagAnimation[FNUM]);
            stroke(0, 196, 3);
            triangle(x - w * 3, y + h / 14 + sin(frameCount * 5) * 5,    x, y + h / 8,    x, y + h / 59);
            popMatrix();
                break;
                
            case "candy":
            
            candyCane(x, y, w, h);
            
            fill(128, 52, 2);
            pushMatrix();
            translate(0, flagAnimation[FNUM]);
            triangle(x - w * 3, y + h / 14 + sin(frameCount * 5) * 5,    x, y + h / 8,    x, y + h / 59);
            popMatrix();
                break;
                
            case "roman":
            noStroke();
            fill(94, 94, 94);
            rect(x, y, w, h);
            
            fill(255, 255, 255, 40);
            rect(x, y, w / 2, h);
            
            pushMatrix();
            translate(0, flagAnimation[FNUM]);
            fill(224, 4, 4);
            triangle(x - w * 3, y + h / 32 + sin(frameCount * 5) * 5,    x, y + h / 8,    x, y + h / 59);
            
            triangle(x - w * 3, y + h / 10 + sin(frameCount * 5) * 5,    x, y + h / 8,    x, y + h / 59);
            popMatrix();
            
            fill(64, 64, 64);
            ellipse(x + w / 2, y, w * 1.8, h / 14);
            
            fill(255, 255, 255, 50);
            ellipse(x + w / 2, y, w * 1.2, h / 21);
            ellipse(x + w / 2, y, w * 0.7, h / 40);
                break;
                
            
    }
    
    if(playerX > x - playerSize && playerX < x + w && playerY > y - playerSize && playerY < y + h && flagAnimationState[FNUM] === false)
    {
        flagAnimationState[FNUM] = true;
        respawnX = mapMove;
        respawnY = y + h / 1.4;
    }
    
    if(flagAnimationState[FNUM] === true)
    {
        flagAnimation[FNUM] -= 5;
    }
    
    if(flagAnimation[FNUM] <= 0)
    {
        flagAnimation[FNUM] = 0;
    }
    
    }
};

//smooth button animation (move down)
var buttonAnimattion = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

//compile button
var button = function(x, y, d, pageSwitch, BNUM)
{
    noFill();
    strokeWeight(d / 12);
    stroke(0, 0, 0, 50);
    ellipse(x, y + d / 16, d, d);
    
    if(dist(mouseX, mouseY, x, y) < d / 2 && cursorLoad <= 0)
    {
        fill(255, 255, 255, 100);
        cursor(HAND);
        
        buttonAnimattion[BNUM] += 1.5;
        
        if(mouseIsPressed)
        {
            
            pages = pageSwitch;
            
            cursorLoad = 20;
            
            mapMove = 0;
            flagAnimation = [212, 212, 212, 212, 212];
            flagAnimationState = [false, false, false, false, false];
            ballonBlockMove = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            playerSize = 49;
            playerGravity = 0;
            rotateEmoji = 0;
            levelDone = false;
            death = false;
            respawnX = 0;
            respawnY = 200;
            playerX = 82;
            playerY = 200;
            respawnDelay = 0;
            powerupApply = false;
            powerupDelayTimer = 0;
            currentPowerup = "defualt";
            switchGravity = "DOWN";
            gotTheSpecialBox = [false, false, false, false, false, false];
            extraSpeedTimer = 0;
            stopGameForSign = false;
        }
    }else
    {
        buttonAnimattion[BNUM] -= 1;
    }
    
    if(buttonAnimattion[BNUM] >= d / 16)
    {
        buttonAnimattion[BNUM] = d / 16;
    }
    
    if(buttonAnimattion[BNUM] <= 0)
    {
        buttonAnimattion[BNUM] = 0;
    }
    
    noFill();
    fill(255, 255, 255);
    stroke(0, 119, 255);
    ellipse(x, y + buttonAnimattion[BNUM], d, d);
    
    if(deLag === false)
    {
        strokeWeight(d / 33);
        stroke(135, 189, 250);
        ellipse(x, y + buttonAnimattion[BNUM], d / 1.1, d / 1.1);
    }
    
    switch(pageSwitch)
    {
        case "levelPick":
            
            if(pages === "home")
            {
                pushMatrix();
                translate(0, buttonAnimattion[BNUM]);
                
                popMatrix();
                
                pushMatrix();
                translate(0, buttonAnimattion[BNUM]);
                fill(0, 119, 255);
                noStroke();
                beginShape();
                vertex(x - d / 6.6, y - d / 5.3);
                vertex(x - d / 6.6, y + d / 4.1);
                vertex(x + d / 3.8, y + d / 24.6);
                endShape();
                popMatrix();
            }
            
            if(pages === "game")
            {
                pushMatrix();
                pushMatrix();
                translate(4, buttonAnimattion[BNUM]);
                fill(135, 189, 250);
                textSize(55);
                text(">", x - 2, y - 1);
                textSize(35);
                text(">", x -7, y - 1);
                text(">", x -5, y - 1);
                
                textSize(41);
                fill(0, 119, 255);
                text(">", x - 2, y - 1);
                popMatrix();
            }
            
            break;
        
        case "achievements":
            
            pushMatrix();
            translate(x, y + buttonAnimattion[BNUM]);
            noStroke();
            rectMode(CENTER);
            
            rectMode(0);
                
            popMatrix();
            
            
            pushMatrix();
            translate(x, y + buttonAnimattion[BNUM]);
            noStroke();
            rectMode(CENTER);
        
            fill(0, 119, 255);
            arc(0, 0 - d / 7, d / 2.5, d / 2.4, 0, 180);
            arc(0, 0 + d / 4.0, d / 5, d / 5, -180, 0);
            rect(0.5, 0 + d / 9, d / 25, d / 4.2);
            
            stroke(0, 119, 255);
            noFill();
            strokeWeight(3);
            ellipse(0, 0 - d / 13, d / 1.7, d / 8);
            
            rectMode(0);
                
            popMatrix();
            
            break;
            
        case "store":
            
            pushMatrix();
            if(pages === "home" || pages === "levelPick" || pages === "store" || pages === "achievements")
            {
                translate(75, 187 + buttonAnimattion[BNUM] - 13);
                scale(0.7, 0.5);
            }
            if(pages === "store_emoji" || pages === "backdropstore")
            {
                translate(-9, 219 + buttonAnimattion[BNUM]);
                scale(0.7, 0.5);
            }
            noFill();
            
            stroke(135, 189, 250);
            strokeWeight(14);
            
            if(pages === "home" || pages === "levelPick" || pages === "store" || pages === "achievements")
            {
                strokeWeight(14);
            }
            if(pages === "store_emoji" || pages === "backdropstore")
            {
                strokeWeight(10);
            }
            
            stroke(0, 119, 255);
            strokeWeight(5);
            
            if(pages === "home" || pages === "levelPick" || pages === "store")
            {
                strokeWeight(5);
            }
            if(pages === "store_emoji" || pages === "backdropstore")
            {
                strokeWeight(3);
            }
            
            beginShape();
            vertex(x + d / 8, y + d/ 6);
            vertex(x + d / 3, y + d/ 5);
            vertex(x + d / 2.5, y + d / 1.4);
            vertex(x + d / 1.2, y + d / 1.4);
            vertex(x + d / 1.09, y + d / 5);
            vertex(x + d / 1.3, y + d / 5);
            endShape();
            
            ellipse(x + d / 2.3, y + d / 1.12, d / 10, d / 8);
            ellipse(x + d / 1.2, y + d / 1.12, d / 10, d / 8);
            line(x + d / 2.4, y + d / 1.2, x + d / 2.5, y + d / 1.4);
            line(x + d / 1.22, y + d / 1.20, x + d / 2.4, y + d / 1.25);
            
            noStroke();
            
            popMatrix();
            
            
            break;
            
        case "home":
            
            pushMatrix();
            pushMatrix();
            translate(0, buttonAnimattion[BNUM]);
            
            textSize(41);
            fill(0, 119, 255);
            text("<", x - 2, y - 1);
            popMatrix();
            
            break;
            
        case "store_emoji":
            
            emojiBody(x, y + buttonAnimattion[BNUM], d / 2, "money");
            
            break;
            
        case "backdropstore":
            
            pushMatrix();
            pushMatrix();
            translate(0, buttonAnimattion[BNUM]);
            textSize(41);
            fill(135, 189, 250);
            text("MOD$", x, y + 3);
            text("_____", x, y + 2);
            fill(0, 119, 255);
            text("MOD$", x, y);
            text("_____", x, y);
            popMatrix();
            
            break;
            
        case "helpCenter":
            
            pushMatrix();
            pushMatrix();
            translate(0, buttonAnimattion[BNUM]);
            textSize(25);
            fill(135, 189, 250);
            text("?", x, y + 2);
            fill(0, 119, 255);
            text("?", x, y);
            text("?", x + 1, y);
            popMatrix();
            
            break;
            
        case "credits":
            
            pushMatrix();
            pushMatrix();
            translate(0, buttonAnimattion[BNUM]);
            textSize(20);
            fill(135, 189, 250);
            text("C", x, y + 2);
            fill(0, 119, 255);
            text("C", x, y);
            text("C", x - 1, y);
            popMatrix();
            
            break;
            
        case "settings":
            
            fill(0, 119, 255);
            noStroke();
            
            pushMatrix();
            translate(27, buttonAnimattion[BNUM] + 144);
            scale(0.7);
            
            ellipse(x, y, d / 1.9, d / 1.9);
            
            rectMode(CENTER);
            
            for(var i = 0; i < 9; ++i)
            {
                pushMatrix();
                translate(x, y);
                rotate(5 + i * 40);
                rect(0, -9, 7, 15, 3);
                popMatrix();
            }
            
            rectMode(0);
            
            fill(255, 255, 255);
            
            ellipse(x, y, d / 3.4, d / 3.5);
            
            popMatrix();
            
            break;
    }
    
    textAlign(CENTER, CENTER);
    noFill();

    noStroke();
    
};


//sign
var
    signCollision = function(x, y, w, h, NUM){
    
    if(playerX > x - playerSize && playerX < x + w && playerY > y - playerSize && playerY < y + h && sighnInsctructState[NUM] === false && sighnInsctructStateDelete[NUM] === false)
    {
        sighnInsctructState[NUM] = true;
        stopGameForSign = true;
    }
    
    },
    signLook = function(titleS, instructS){
        
        if(pages === "game")
        {
            fill(0, 0, 0, 220);
            rect(0, 0, 500, 500);
        }
        
        fill(255, 255, 255);
        
        if(pages !== "game")
        {
            fill(0, 0, 0);
        }
        
        textSize(37);
        text(titleS, 250, 86);
        
        textAlign(CENTER, 0);
        textSize(22);
        text("_________________________________\n" + instructS, 250, 252);
        if(pages === "game")
        {
            text("> CLICK/SPACE TO RESUME <", 250, 450);
        }
        textAlign(CENTER, CENTER);
    },
    callSigns = function(){
    
    //sign instructions
    for(var i = 0; i < sighnInsctructState.length; ++i)
    {
        if(sighnInsctructState[i] === true && sighnInsctructStateDelete[i] === false)
        {
            switch(i)
            {
                case 0:
                signLook("SPEED BLOCK", "This is a Speed Block!\nIf you touch it, it will make your\nPlayer faster.");
                speedBlock(150, 128, 200, 100, currentBackdrop);
                    break;
                    
                case 1:
                signLook("CHECK-POINT", "This is a Check-Point!\nIf you die, and you already hit the\ncheck-point, then you will re-spawn\nat the check-point!");
                flagCheckpoint(250, 111, 11, 133, -1, currentBackdrop);
                    break;
                    
                case 2:
                signLook("BALLOON BLOCK", "This is a Balloon Block!\nThe balloon can only hold so much weight,\nthat if you're on it, it will start going down!");
                ballonblock(175, 211, 150, 20, 3, 0, currentBackdrop);
                
                    break;
                    
                case 3:
                signLook("TRAMPOLINE", "This is a Trampoline!\nJump on it to bounce really high!\nDon't touch the side of it, for\nit will block your player from moving,\nwhich causes death!");
                trampoline(250 - (120 / 2), 127, 120, 14, 1, currentBackdrop);
                    break;
                    
                case 4:
                signLook("SPIKE", "This is a Spike! (More or less       )\nDon't touch it!\nSimple, right?!    ");
                poopEmoji(230, 175, 50);
                emojiBody(393, 271, 28, "XD");
                emojiBody(331, 319, 28, "winky");
                    break;
                    
                case 5:
                signLook("PORTAL", "This is the Portal!\nIf you touch it, you will complete the level!\nTry to complete the levels with 3 +     !\nThe more      you get, the more stuff you can\nachieve, like different Emoji's & Backgrounds!");
                portal(200, 125, 100, 100, currentBackdrop);
                star(413, 318, 23);
                star(145, 345, 23);
                    break;
                    
                case 6:
                signLook("ROCKET BLOCK", "This is a Rocket Block!\nIf you're on it, it will move you UP!");
                ballonblockUP(175, 154, 150, 20, 3, 0, currentBackdrop);
                
                    break;
                    
                case 7:
                signLook("MYSTERY BOX", "This is a Mystery Box!\nIf you grab it, then you will get a special\nPowerUp!");
                
                specialMachineBox(200, 123, 100, 100, 0);
                
                    break;
                    
                case 8:
                signLook("FLY BIRD", "This is Fly Bird!\nHe loves flying! But he hates dying!\nSo keep him safe from harm!\n(UpArrow OR Spacebar KEY & hold) to fly!\nRelease the KEY to stop flying!");
                
                birdStyle(250, 172, 100, 100, -90, currentBackdrop);
                
                    break;
                    
                case 9:
                signLook("EMOJI BOX", "This is the Emoji Box!\nAn emoji called Matt Smith Tennant sold it\nto us for, well, not money, but, well, a lot\nof wishy washy, tiny winy, stuff!\nPress [SPACE] to transport where the\nbubble is!");
                
                strokeWeight(8);
                stroke(2, 70, 148);
                line(140, 157, 353, 218);
                
                strokeWeight(4);
                stroke(0, 119, 255);
                line(140, 157, 353, 218);
                
                strokeWeight(2);
                stroke(89, 166, 255);
                line(140, 157, 353, 218);
                
                noStroke();
                emojiBox(99, 137, 65, 65);
                emojiBoxBubble(328, 177, 65, 65);
                
                    break;
                    
                case 10:
                signLook("GRAVITY GUY", "This is Gravity Guy!\nPress [SPACE] to switch your (GRAVITY)\nIf you jump while you have opposit gravity,\nthen you will jump DOWN just like if you actually\nhad opposit gravity!\nIMPORTANT:  You can only switch gravity if your\ntouching a BLOCK!");
                
                pushMatrix();
                translate(-(playerX + playerSize / 2) + 189, -(playerY + playerSize / 2) - 50);
                scale(1.6);
                player();
                popMatrix();
                
                    break;
            }
            
            textSize(15);
            fill(255, 255, 255);
            text("Would you like to figure out how to use the\nblocks yourself? Then click     ", 250, 474);
            
            fill(73, 112, 252);
            
            if(mouseX >= 338 && mouseX <= 338 + 43 && mouseY >= 476 && mouseY <= 476 + 14)
            {
                fill(203, 73, 250);
                cursor(HAND);
            }
            
            text("HERE!", 359, 482);
        }
    }
    
    };

//programmer help (Isaac Emerald)
var testMode = false;
var pauseButtonClick = false;

var pauseMechanic = function(){
    
    if(pauseGame === true)
    {
        fill(255, 255, 255, 200);
        rect(0, 0, 500, 500);
        
        if(rageQuit === false)
        {
            
            pushMatrix();
            translate(250 - 60, 250);
            
            strokeWeight(5);
            stroke(0, 0, 255);
            fill(255, 255, 255);
            ellipse(0, 0, 110, 110);
            
            if(dist(mouseX, mouseY, 250 - 60, 250) < (115 / 2))
            {
                rotate(30);
                cursor(HAND);
            }
            
            noFill();
            strokeWeight(10);
            stroke(176, 0, 0);
            ellipse(0, 0, 75, 75);
            
            rotate(-30);
            rect(-75 / 2, 0, 73, 2);
            
            strokeWeight(5);
            stroke(255, 0, 0);
            ellipse(0, 0, 75, 75);
            rect(-75 / 2, 0, 73, 2);
            
            popMatrix();
            
            
            pushMatrix();
            translate(250 + 60, 250);
            strokeWeight(5);
            stroke(0, 0, 255);
            fill(255, 255, 255);
            ellipse(0, 0, 110, 110);
            if(dist(mouseX, mouseY, 250 + 60, 250) < (115 / 2))
            {
                rotate(30);
                cursor(HAND);
            }
            
            noFill();
            strokeWeight(10);
            stroke(26, 0, 255);
            arc(0, 0, 75, 75, 0, 300);
            
            noStroke();
            fill(26, 0, 255);
            arc(30, -25, 40, 40, 90 + 80, 180 + 62);
            
            fill(0, 140, 255);
            arc(30 - 3, -25 - 2, 30, 30, 90 + 80, 180 + 62);
            
            noFill();
            strokeWeight(5);
            stroke(0, 140, 255);
            arc(0, 0, 75, 75, 0, 302);
            noStroke();
            
            popMatrix();
        }
        
        if(rageQuit === true)
        {
            fill(0, 0, 0, 200);
            rect(0, 0, 500, 500);
            
            textSize(30);
            fill(0, 123, 255);
            text("Are you sure you want to QUIT?", 250, 172);
            
            textSize(20);
            fill(255, 255, 255);
            text("If you QUIT now, then you will lose any points\nyou currently could get!", 250, 214);
            
            noFill();
            strokeWeight(4);
            stroke(50, 117, 250);
            rect(104, 304, 150 - 8, 150 - 8);
            rect(254, 304, 150 - 8, 150 - 8);
            stroke(9, 85, 227);
            rect(100, 300, 150, 150);
            rect(250, 300, 150, 150);
            
            fill(0, 89, 255);
            
            textSize(29);
            if(mouseX >= 100 && mouseX <= 100 + 150 && mouseY >= 300 && mouseY <= 300 + 150)
            {
                cursor(HAND);
                textSize(34);
            }
            text("YESSS!", 175, 427);
            
            textSize(29);
            if(mouseX >= 100 + 150 && mouseX <= 100 + 150 + 150 && mouseY >= 300 && mouseY <= 300 + 150)
            {
                cursor(HAND);
                textSize(34);
            }
            text("NOOO!", 175 + 150, 427);
            
            rageQuitEmoji(175, 362, 93, 'angry');
            rageQuitEmoji(325, 362, 93, 'angel');
        }
    }
    
    noStroke();
    
    fill(255, 255, 255);
    rect(470, 0, 30, 30);
    
    if(mouseX >= 470 && mouseX <= 500 && mouseY >= 0 && mouseY <= 30)
    {
        fill(255, 255, 255, 30);
        rect(470, 0, 30, 30);
        cursor(HAND);
    }
    
    fill(0, 0, 0);
    
    switch(pauseGame)
    {
        case false:
        rect(478, 5, 5, 19);
        rect(487, 5, 5, 19);
            break;
        
        case true:
        triangle(478, 6, 478, 24, 497, 14);
            break;
    }
    
    noFill();
    
};

var deadAndOtherStuff_afterDone = function(){
    
    deathCollision(0, 500 + playerSize, 500, 500);
    
    deathCollision(0, -850, 500, 500);
    
    if(!pauseGame)
    {
        extraSpeedTimer -= 1;
    }
    
    if(extraSpeedTimer <= 0)
    {
        extraSpeedTimer = 0;
    }
    
    if(death === false && levelDone === false && testMode === false && stopGameForSign === false)
    {
        if(extraSpeedTimer <= 0)
        {
            mapMove += 4;
        }
        
        if(extraSpeedTimer > 0)
        {
            mapMove += 8;
            
            noStroke();
            fill(0, 119, 255, 30);
            speedArcThing(435, 0, 55, 500);
            speedArcThing(379, 0, 55, 500);
            speedArcThing(323, 0, 55, 500);
            speedArcThing(265, 0, 55, 500);
            speedArcThing(207, 0, 55, 500);
            speedArcThing(151, 0, 55, 500);
            speedArcThing(95, 0, 55, 500);
            speedArcThing(37, 0, 55, 500);
        }
    }
    
    if(death === true && stopGameForSign === false)
    {
        if(hearts >= 1)
        {
            respawnDelay += 1;
            
            if(respawnDelay <= 1)
            {
                hearts -= 1;
            }
        }
    }
    
    if(testMode === false && stopGameForSign === false)
    {
        if(hearts <= 0)
        {
            levelDone = true;
        }
        
        if(respawnDelay >= 30)
        {
            mapMove = respawnX - 25;
            playerX = 82;
            playerY = respawnY;
            playerGravity = 0;
            ballonBlockMove = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            currentPowerup = "defualt";
            switchGravity = "DOWN";
            powerupApply = false;
            powerupDelayTimer = 0;
            gotTheSpecialBox = [false, false, false, false, false, false];
            extraSpeedTimer = 0;
        }
        
        if(respawnDelay >= 100)
        {
            death = false;
            respawnDelay = 0;
            mostlyDeadNum += 1;
        }
    }
    
    pushMatrix();
    translate((250 + 33) - (153 / 2), 0);
    
    if(currentBackdrop === "defualt")
    {
        fill(130, 130, 130);
        rect(-33, -21, 153, 60, 20);
        
        heartPlaceholder(25 - 15, 17, 33);
        heartPlaceholder(25 + 35 - 15, 17, 33);
        heartPlaceholder(25 + 35 * 2 - 15, 17, 33);
        
        if(currentPowerup === "emoji-box")
        {
            fill(3, 95, 255);
            textSize(17);
            text("TELEPORTS", 175, 9);
            text("TELEPORTS", 176, 9);
            textSize(23);
            text("LEFT", 197, 26);
            text("LEFT", 198, 26);
            textSize(33);
            text(teleportNum, 254, 19);
        }
    }
    
    if(currentBackdrop === "candy")
    {
        noStroke();
        fill(255, 255, 255);
        rect(-33, -21, 153, 60, 20);
        
        heartPlaceholder(25 - 15, 17, 33);
        heartPlaceholder(25 + 35 - 15, 17, 33);
        heartPlaceholder(25 + 35 * 2 - 15, 17, 33);
        
        if(currentPowerup === "emoji-box")
        {
            fill(3, 95, 255);
            textSize(17);
            text("TELEPORTS", 175, 9);
            text("TELEPORTS", 176, 9);
            textSize(23);
            text("LEFT", 197, 26);
            text("LEFT", 198, 26);
            textSize(33);
            text(teleportNum, 254, 19);
        }
    }
    
    if(currentBackdrop === "retro")
    {
        strokeWeight(2);
        stroke(255, 0, 0);
        fill(0, 0, 0);
        rect(-33, -21, 153, 60, 20);
        noStroke();
        
        if(currentPowerup === "emoji-box")
        {
            fill(3, 95, 255);
            textSize(17);
            text("TELEPORTS", 175, 9);
            text("TELEPORTS", 176, 9);
            textSize(23);
            text("LEFT", 197, 26);
            text("LEFT", 198, 26);
            textSize(33);
            text(teleportNum, 254, 19);
        }
    }
    
    if(currentBackdrop === "roman")
    {
        noStroke();
        stonBlock(-33, -21, 153, 60, 20);
        fill(255, 0, 0, 75);
        rect(-33, -21, 153, 60, 5);
        
        heartPlaceholder(25 - 15, 17, 33);
        heartPlaceholder(25 + 35 - 15, 17, 33);
        heartPlaceholder(25 + 35 * 2 - 15, 17, 33);
        
        if(currentPowerup === "emoji-box")
        {
            fill(145, 0, 0);
            textSize(17);
            text("TELEPORTS", 175, 9);
            text("TELEPORTS", 176, 9);
            textSize(23);
            text("LEFT", 197, 26);
            text("LEFT", 198, 26);
            textSize(33);
            text(teleportNum, 254, 19);
        }
    }
    
    if(hearts >= 1)
    {
        heart(25 - 15, 17, 33);
    }
    
    if(hearts >= 2)
    {
        heart(25 + 35 - 15, 17, 33);
    }
    
    if(hearts >= 3)
    {
        heart(25 + 35 * 2 - 15, 17, 33);
    }
    
    if(currentBackdrop === "defualt")
    {
        fill(255, 255, 255, 30);
        rect(-33, -21, 153, 47);
        rect(-33, -21, 153, 33);
    }
    popMatrix();
    
    if(levelDone === true)
    {
        stopGameForSign = true;
        
        fill(255, 255, 255, 150);
        rect(0, 0, 500, 500);
        
        fill(0, 119, 255);
        rect(250 - (322 / 2) - 10, 200 - 10 + scoreShowcase, 322 + 20, 168 + 20);
        
        fill(135, 189, 250);
        rect(250 - (322 / 2) - 5, 200 - 5 + scoreShowcase, 322 + 10, 168 + 10);
        
        fill(255, 255, 255);
        rect(250 - (322 / 2), 200 + scoreShowcase, 322, 168);
        
        button(250, 339 + scoreShowcase, 46, "levelPick", 0);
        
        if(hearts >= 1)
        {
            playerSize -= 1;
            
            if(playerSize > 10)
            {
                playerX += 2;
            }
            if(playerSize <= 0)
            {
                playerSize = 0;
            }
            
            starPlaceholder(250 - 68, 278 + scoreShowcase - 20, 62);
            starPlaceholder(250, 258 + scoreShowcase - 20, 62);
            starPlaceholder(250 + 68, 278 + scoreShowcase - 20, 62);
            
            star(250 - 68, 278 + scoreShowcase - 20, 62);
            
            if(mapStars[levels] <= 1)
            {
                mapStars[levels] = 1;
            }
            
            if(hearts >= 2)
            {
                if(mapStars[levels] < 3)
                {
                    
                    mapStars[levels] = 2;
                    
                }
                star(250, 258 + scoreShowcase - 20, 62);
            }
            
            if(hearts >= 3)
            {
                star(250 + 68, 278 + scoreShowcase - 20, 62);
                mapStars[levels] = 3;
                achievement.state[0] = 1;
                textSize(22);
                fill(255, 98, 0);
                text("PERFECT SCORE!", 250, 320 + scoreShowcase - 20);
                fill(255, 187, 0);
                text("PERFECT SCORE!", 250, 318 + scoreShowcase - 20);
                text("PERFECT SCORE!", 250, 318 + scoreShowcase - 20);
                emojiBody(116, 286 + scoreShowcase, 37, "angel");
                emojiBody(383, 286 + scoreShowcase, 37, "winky");
            }
        }
        
        if(hearts <= 0)
        {
            pushMatrix();
            translate(310, 248 + scoreShowcase);
            emojiBody(-133, 17, 68, "dead");
            rotate(-9);
            fill(255, 0, 0);
            text("FAILED", -14, 0);
            text("_______", -14, 0);
            popMatrix();
        }
        scoreShowcase /= 1.1;
        
    }
    
    callSigns();
    
    if(levelDone === false)
    {
        pauseMechanic();
    }
};

var messageSign = function(x, y, s, aliveM, deadM){
    
    var mainMessage;
    
    if(death && deadM !== undefined)
    {
        mainMessage = deadM;
    }
    else
    {
        mainMessage = aliveM;
    }
    
    if(currentPowerup !== "retro")
    {
        fill(0, 128, 255, 200);
    } else
    {
        fill(255, 255, 255);
    }
    
    textSize(s);
    text(mainMessage, -mapMove + x, y);
};

var glitchText = function(txt) {
    var str = '';
    var letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789?!!@#$%^&*()_+-=[]{};'+"'"+':"/\\';
    for(var i = 0; i < txt.length; i ++) {
        var t = txt.charAt(i);
        if(t === '\n') {
            str = str.concat(t);
        }
        else {
            var l = floor(random(0, letters.length-0.0001));
            str = str.concat(letters.charAt(l));
        }
    }
    return(str);
};

var maps = function(){
    
    switch(levels)
    {
        case 0:
        level1: {
        messageSign(400, 101, 27, "Welcome to THE EMOJI GAME!!");
        flagCheckpoint(-mapMove + 1199, 74, 11, 260, 0, currentBackdrop);
        block(-mapMove - 30, 357, 500, 14, currentBackdrop);
        block(-mapMove + 593, 390, 500, 14, currentBackdrop);
        //block(-mapMove + 888, 356, 50, 27, currentBackdrop);
        block(-mapMove + 1043 - 50, 356, 99 + 100, 27, currentBackdrop);
        block(-mapMove + 1116, 322, 201, 27, currentBackdrop);
        block(-mapMove + 1604, 332, 429, 14, currentBackdrop);
        ballonblock(-mapMove + 1386, 322, 163, 23, 0, 3, currentBackdrop);
        spike(-mapMove + 1754, 302, 30, currentBackdrop);
        portal(-mapMove + 1981, 219, 62, 112, currentBackdrop);
        signCollision(-mapMove + 1114, 0, 124, 500, 1);
        signCollision(-mapMove + 1222, 0, 124, 500, 2);
        signCollision(-mapMove + 1671, 0, 124, 500, 4);
        signCollision(-mapMove + 1930, 0, 124, 500, 5);
        }
            break;
            
        case 1:
        level2: {
        signCollision(-mapMove + 900, 0, 124, 500, 3);
        trampoline(-mapMove + 1058, 212, 100, 12, 0, currentBackdrop);
        trampoline(-mapMove + 1205, 214, 100, 12, 1, currentBackdrop);
        block(-mapMove + 42, 275, 287, 35, currentBackdrop);
        block(-mapMove + 440, 274, 200, 35, currentBackdrop);
        block(-mapMove + 734, 274, 250, 35, currentBackdrop);
        block(-mapMove + 1082, 289, 50, 209, currentBackdrop);
        block(-mapMove + 1231, 292, 50, 209, currentBackdrop);
        block(-mapMove + 1414, 273, 190, 35, currentBackdrop);
        spike(-mapMove + 1567, 238, 30, currentBackdrop);
        flagCheckpoint(-mapMove + 1718, 91, 11, 260, 0, currentBackdrop);
        block(-mapMove + 1705, 350, 200, 51, currentBackdrop);
        block(-mapMove + 1900, 350, 200, 51, currentBackdrop);
        spike(-mapMove + 1926, 318, 30, currentBackdrop); 
        block(-mapMove + 2170, 350, 200, 51, currentBackdrop);
        block(-mapMove + 1705, 409, 665, 51, currentBackdrop);
        block(-mapMove + 2447, 283, 109, 30, currentBackdrop);
        block(-mapMove + 2647, 210, 109, 30, currentBackdrop);
        block(-mapMove + 2847, 150, 109, 30, currentBackdrop);
        portal(-mapMove + 2943, 32, 62, 112, currentBackdrop);
        }
            break;
        
        case 2:
        level3: {
            
        messageSign(1800, 101, 27, "You gotta time it right!");
        
        flagCheckpoint(-mapMove + 1440, -88, 11, 260, 0, currentBackdrop);
        
        trampoline(-mapMove + 330, 306, 86, 12, 0, currentBackdrop);
        
        block(-mapMove - 30, 357, 500, 300, currentBackdrop);
        block(-mapMove + 451, 252, 50, 300, currentBackdrop);
        block(-mapMove + 548, 304, 108, 300, currentBackdrop);
        block(-mapMove + 729, 266, 104, 300, currentBackdrop);
        ballonblock(-mapMove + 910, 235, 137, 23, 1, 2, currentBackdrop);
        block(-mapMove + 1145, 243, 228, 300, currentBackdrop);
        block(-mapMove + 1410, 165, 100, 351, currentBackdrop);
        ballonblock(-mapMove + 1623, 163, 280, 23, 1, 2, currentBackdrop);
        block(-mapMove + 2023, 268, 150, 336, currentBackdrop);
        ballonblock(-mapMove + 2223, 279, 137, 23, 4, 3.5, currentBackdrop);
        ballonblock(-mapMove + 2423, 279, 137, 23, 5, 3.5, currentBackdrop);
        block(-mapMove + 2613, 314, 66, 241, currentBackdrop);
        block(-mapMove + 2720, 257, 130, 1, currentBackdrop);
        block(-mapMove + 2860, 201, 130, 1, currentBackdrop);
        block(-mapMove + 3039, 146, 130, 1, currentBackdrop);
        block(-mapMove + 3280, 369, 495, 253, currentBackdrop);
        spike(-mapMove + 3435, 339, 30, currentBackdrop);
        spike(-mapMove + 3568, 339, 30, currentBackdrop);
        portal(-mapMove + 3718, 254, 62, 112, currentBackdrop);
        }
            break;
            
        case 3:
        level4: {
        flagCheckpoint(-mapMove + 1404, 4, 11, 260, 0, currentBackdrop);
        
        flagCheckpoint(-mapMove + 2704, 42, 11, 260, 1, currentBackdrop);
        
        block(-mapMove - 30, 357, 500, 300, currentBackdrop);
        block(-mapMove + 407, 283, 447, 10, currentBackdrop);
        spike(-mapMove + 525, 252, 30, currentBackdrop);
        spike(-mapMove + 660, 252, 30, currentBackdrop);
        block(-mapMove + 970, 261, 100, 1, currentBackdrop);
        block(-mapMove + 1170, 261, 100, 1, currentBackdrop);
        //spike(-mapMove + 1245, 232, 30, currentBackdrop);
        block(-mapMove + 1370, 261, 100, 1, currentBackdrop);
        trampoline(-mapMove + 1570, 278, 100, 12, 1, currentBackdrop);
        block(-mapMove + 1570, 362, 108, 182, currentBackdrop);
        trampoline(-mapMove + 1781, 368, 100, 12, 2, currentBackdrop);
        block(-mapMove + 1779, 450, 108, 182, currentBackdrop);
        block(-mapMove + 2000, 295, 159, 230, currentBackdrop);
        trampoline(-mapMove + 2194, 368, 100, 12, 3, currentBackdrop);
        trampoline(-mapMove + 2304, 368, 100, 12, 4, currentBackdrop);
        trampoline(-mapMove + 2414, 368, 100, 12, 5, currentBackdrop);
        trampoline(-mapMove + 2524, 368, 100, 12, 6, currentBackdrop);
        block(-mapMove + 2200, 447, 473, 112, currentBackdrop);
        block(-mapMove + 2654, 295, 159, 230, currentBackdrop);
        //block(-mapMove + 2839, 328, 45, 230, currentBackdrop);
        ballonblock(-mapMove + 2987 - 50, 286, 100, 12, 1, 2, currentBackdrop);
        block(-mapMove + 3137, 328, 45, 230, currentBackdrop);
        ballonblock(-mapMove + 3298, 327, 155, 15, 2, 2, currentBackdrop);
        block(-mapMove + 3537, 342, 77, 230, currentBackdrop);
        block(-mapMove + 3598, 293, 336, 230, currentBackdrop);
        portal(-mapMove + 3817, 178, 62, 112, currentBackdrop);
        }
            break;
            
        case 4:
        level5: {
        flagCheckpoint(-mapMove + 2534, 152, 11, 260, 0, currentBackdrop);
        flagCheckpoint(-mapMove + 6056, 199, 11, 260, 1, currentBackdrop);
        block(-mapMove - 30, 357, 500, 300, currentBackdrop);
        block(-mapMove + 537, 306, 112, 9, currentBackdrop);
        spike(-mapMove + 619, 275, 30, currentBackdrop);
        ballonblockUP(-mapMove + 676, 419, 173, 25, 0, 5, currentBackdrop);
        block(-mapMove + 883, 303, 495, 288, currentBackdrop);
        spike(-mapMove + 993, 272, 30, currentBackdrop);
        spike(-mapMove + 1282, 271, 30, currentBackdrop);
        ballonblockUP(-mapMove + 1466, 301, 157, 26, 1, 8, currentBackdrop);
        block(-mapMove + 1698, 78, 90, 531, currentBackdrop);
        ballonblock(-mapMove + 1812, 93, 134, 31, 2, 12, currentBackdrop);
        trampoline(-mapMove + 1928, 425, 100, 12, 0, currentBackdrop);
        block(-mapMove + 2115, 409, 81, 85, currentBackdrop);
        block(-mapMove + 2296, 407, 81, 85, currentBackdrop);
        block(-mapMove + 2477, 407, 405, 85, currentBackdrop);
        spike(-mapMove + 2702, 374, 30, currentBackdrop);
        ballonblock(-mapMove + 2909, 406, 159, 29, 3, 5, currentBackdrop);
        ballonblock(-mapMove + 3084, 406, 159, 29, 4, 5, currentBackdrop);
        trampoline(-mapMove + 3301, 406, 100, 12, 1, currentBackdrop);
        trampoline(-mapMove + 3479, 406, 100, 12, 2, currentBackdrop);
        block(-mapMove + 3656, 406, 319, 104, currentBackdrop);
        spike(-mapMove + 3747, 374, 30, currentBackdrop);
        ballonblockUP(-mapMove + 4050, 402, 190, 31, 5, 8, currentBackdrop);
        block(-mapMove + 4261, 158, 121, 12, currentBackdrop);
        block(-mapMove + 4487, 122, 121, 12, currentBackdrop);
        spike(-mapMove + 4579, 91, 30, currentBackdrop);
        block(-mapMove + 4692, 316, 265, 37, currentBackdrop);
        spike(-mapMove + 4768, 285, 30, currentBackdrop);
        spike(-mapMove + 4922, 285, 30, currentBackdrop);
        trampoline(-mapMove + 5003, 407, 100, 12, 3, currentBackdrop);
        ballonblockUP(-mapMove + 5175, 404, 182, 30, 6, 8, currentBackdrop);
        ballonblock(-mapMove + 5386, 203, 150, 26, 7, 6, currentBackdrop);
        ballonblock(-mapMove + 5579, 409, 158, 27, 8, 8, currentBackdrop);
        block(-mapMove + 5761, 456, 371, 214, currentBackdrop);
        spike(-mapMove + 5885, 425, 30, currentBackdrop);
        spike(-mapMove + 5911, 425, 30, currentBackdrop);
        spike(-mapMove + 5896, 407, 30, currentBackdrop);
        block(-mapMove + 6251, 413, 116, 6, currentBackdrop);
        block(-mapMove + 6481, 374, 116, 6, currentBackdrop);
        block(-mapMove + 6700, 338, 390, 231, currentBackdrop);
        portal(-mapMove + 7031, 219, 62, 112, currentBackdrop);
        
        
        signCollision(-mapMove + 395, 0, 124, 500, 6);
        
        }
            break;
            
        case 5:
        level6: {
            
        messageSign(400, 260, 27, "ZOOM ZOOM!");
        messageSign(1300, 200, 23, " - Which path to take? AHH!!");
        messageSign(2000, 300, 23, " - Wrong way! >:)");
        
        block(-mapMove - 30, 357, 500, 300, currentBackdrop);
        
        speedBlock(-mapMove + 349, 303, 124, 50, currentBackdrop);
        
        signCollision(-mapMove + 270, 0, 124, 500, 0);
        
        block(-mapMove + 670, 316, 131, 10, currentBackdrop);
        
        block(-mapMove + 1064, 318, 131, 10, currentBackdrop);
        
        block(-mapMove + 1322, 319, 269, 10, currentBackdrop);
        
        speedBlock(-mapMove + 1497, 267, 124, 50, currentBackdrop);
        
        ballonblockUP(-mapMove + 1476, 248, 167, 8, 0, 5, currentBackdrop);
        block(-mapMove + 1635, 379, 784, 14, currentBackdrop);
        
        spike(-mapMove + 2185, 347, 30, currentBackdrop);
        
        spike(-mapMove + 2217, 348, 30, currentBackdrop);
        
        spike(-mapMove + 2250, 348, 30, currentBackdrop);
        
        spike(-mapMove + 2323, 347, 30, currentBackdrop);
        
        block(-mapMove + 1699, 63, 773, 15, currentBackdrop);
        
        speedBlock(-mapMove + 1800, 13, 124, 50, currentBackdrop);
        
        speedBlock(-mapMove + 1897, 14, 124, 50, currentBackdrop);
        
        ballonblock(-mapMove + 2687, 57, 173, 26, 1, 6, currentBackdrop);
        
        trampoline(-mapMove + 2914, 412, 100, 12, 0, currentBackdrop);
        
        trampoline(-mapMove + 3075, 414, 100, 12, 1, currentBackdrop);
        
        block(-mapMove + 3225, 411, 168, 15, currentBackdrop);
        
        block(-mapMove + 3484, 411, 425, 15, currentBackdrop);
        
        speedBlock(-mapMove + 3472, 361, 124, 50, currentBackdrop);
        
        spike(-mapMove + 3873, 379, 30, currentBackdrop);
        
        trampoline(-mapMove + 4028, 423, 100, 12, 2, currentBackdrop);
        
        ballonblock(-mapMove + 4406, 411, 123, 22, 7, 4, currentBackdrop);
        
        ballonblock(-mapMove + 4577, 412, 123, 22, 8, 4, currentBackdrop);
        
        ballonblockUP(-mapMove + 4739 - 20, 412, 123 + 40, 22, 9, 7, currentBackdrop);
        block(-mapMove + 4898, 191, 157, 18, currentBackdrop);
        
        block(-mapMove + 5174, 192, 157, 18, currentBackdrop);
        
        speedBlock(-mapMove + 5160, 142, 124, 50, currentBackdrop);
        
        block(-mapMove + 5602, 185, 201, 21, currentBackdrop);
        
        block(-mapMove + 6059, 182, 187, 21, currentBackdrop);
        
        block(-mapMove + 6351, 139, 187, 21, currentBackdrop);
        
        block(-mapMove + 6319, 382, 424, 24, currentBackdrop);
        
        speedBlock(-mapMove + 6375, 331, 124, 50, currentBackdrop);
        
        block(-mapMove + 6999, 384, 233, 24, currentBackdrop);
        
        portal(-mapMove + 7186, 276, 62, 112, currentBackdrop);
           
        }
            break;
            
        case 6:
        level7: {
            
        messageSign(830, 330, 23, "Remind you of anything?\nDefinitely not Flappy Bird! xD");
            
        signCollision(-mapMove + 270, 0, 124, 500, 7);
        
        flagCheckpoint(-mapMove + 3185, 159, 11, 260, 0, currentBackdrop);
        
        flagCheckpoint(-mapMove + 4172, 151, 11, 260, 1, currentBackdrop);
        
        block(-mapMove - 30, 357, 500, 300, currentBackdrop);
        
        lavaBlock(-mapMove + 597, 30, 50, 26, currentBackdrop);
        block(-mapMove + 597, -24, 50, 60, currentBackdrop);
        block(-mapMove + 597, 179 + 70, 50, 409, currentBackdrop);
        spike(-mapMove + 606, 152 + 70, 30, currentBackdrop);
        
        lavaBlock(-mapMove + 597 + 200, 30 + 200, 50, 26, currentBackdrop);
        block(-mapMove + 597 + 200, -24, 50, 60 + 200, currentBackdrop);
        block(-mapMove + 597 + 200, 179 + 280, 50, 409, currentBackdrop);
        spike(-mapMove + 606 + 200, 152 + 280, 30, currentBackdrop);
        
        lavaBlock(-mapMove + 597 + 400, 30 + 30, 50, 26, currentBackdrop);
        block(-mapMove + 597 + 400, -24, 50, 60 + 30, currentBackdrop);
        block(-mapMove + 597 + 400, 179 + 50 + 50, 50, 409, currentBackdrop);
        spike(-mapMove + 606 + 400, 152 + 50 + 50, 30, currentBackdrop);
        
        specialMachineBox(-mapMove + 380, 231, 50, 50, 0, 205, 'bird');
        signCollision(-mapMove + 380, 231, 50, 50, 8);
        
        block(-mapMove + 1150, 384, 269, 142, currentBackdrop);
        
        specialMachineBox(-mapMove + 1388, 265, 50, 50, 1, 190, 'emoji-box', 2);
        signCollision(-mapMove + 1388 - 40, 0, 50, 500, 9);
        
        lavaBlock(-mapMove + 1621, -25, 50, 603, currentBackdrop);
        
        block(-mapMove + 1621, -25, 50, 603, currentBackdrop);
        
        lavaBlock(-mapMove + 1978 + 100, -19 - 100, 339 + 150, 308 - 3, currentBackdrop);
        
        lavaBlock(-mapMove + 1980 + 100, 428 - 50, 600 + 150, 392, currentBackdrop);
        
        block(-mapMove + 1978 + 100, -19 - 100, 339 + 150, 308, currentBackdrop);
        
        block(-mapMove + 1980 + 100, 410 - 50, 625 + 150, 392, currentBackdrop);
        
        trampoline(-mapMove + 2962, 412, 100, 12, 0, currentBackdrop);
        
        lavaBlock(-mapMove + 3696, 55, 50, 50, currentBackdrop);
        
        block(-mapMove + 3132, 413, 440, 133, currentBackdrop);
        
        block(-mapMove + 3493, -22, 439, 96, currentBackdrop);
        
        block(-mapMove + 3867, 402, 528, 135, currentBackdrop);
        
        specialMachineBox(-mapMove + 3253, 332, 50, 50, 2, 203, "gravity-guy");
        signCollision(-mapMove + 3253 - 30, 332, 50, 50, 10);
        spike(-mapMove + 3399, 383, 30, currentBackdrop);
        
        //spike(-mapMove + 4004, 371, 30, currentBackdrop);
        
        speedBlock(-mapMove + 4269, 351, 124, 50, currentBackdrop);
        
        block(-mapMove + 4664, 397, 264, 19, currentBackdrop);
        
        block(-mapMove + 5179, 399, 389, 19, currentBackdrop);
        
        spike(-mapMove + 5268, 367, 30, currentBackdrop);
        spike(-mapMove + 5406, 368, 30, currentBackdrop);
        ballonblockUP(-mapMove + 5647, 391, 143, 28, 0, 7, currentBackdrop);
        lavaBlock(-mapMove + 5849, 196, 40, 460, currentBackdrop);
        trampoline(-mapMove + 5968, 414, 100, 12, 1, currentBackdrop);
        block(-mapMove + 6145, 415, 306, 120, currentBackdrop);
        portal(-mapMove + 6392, 292, 62, 112, currentBackdrop);
        }
            break;
            
        case 7:
        level8: {
            
        messageSign(2100, 200, 20, "I call it, THE TUNNEL!");
        
        messageSign(4600, 100, 22, "How many times did you jump\nbefore you got here? xD");
            
        flagCheckpoint(-mapMove + 3306, 56, 11, 260, 0, currentBackdrop);
        block(-mapMove, 320, 400, 193, currentBackdrop);
        block(-mapMove + 403, 451, 355, 50, currentBackdrop);
        spike(-mapMove + 555, 419, 30, currentBackdrop);
        spike(-mapMove + 724, 418, 30, currentBackdrop);
        
        trampoline(-mapMove + 805, 448, 100, 12, 0, currentBackdrop);
        block(-mapMove + 986, 355, 26, 134, currentBackdrop);
        block(-mapMove + 1082, 411, 26, 134, currentBackdrop);
        block(-mapMove + 1224, 391, 14, 110, currentBackdrop);
        block(-mapMove + 1377, 391, 14, 110, currentBackdrop);
        block(-mapMove + 1535, 396, 14, 110, currentBackdrop);
        block(-mapMove + 1652, 350, 50, 50, currentBackdrop);
        block(-mapMove + 1816, 303, 50, 50, currentBackdrop);
        specialMachineBox(-mapMove + 1935, 199, 50, 50, 0, 234, 'bird', 0);
        spike(-mapMove + 2126, 113, 30, currentBackdrop);
        spike(-mapMove + 2152, 29, 30, currentBackdrop);
        spike(-mapMove + 2116, 332, 30, currentBackdrop);
        spike(-mapMove + 2160, 423, 30, currentBackdrop);
        spike(-mapMove + 2252, 263, 30, currentBackdrop);
        spike(-mapMove + 2192, 318, 30, currentBackdrop);
        spike(-mapMove + 2322, 214, 30, currentBackdrop);
        spike(-mapMove + 2395, 162, 30, currentBackdrop);
        spike(-mapMove + 2188, 119, 30, currentBackdrop);
        spike(-mapMove + 2260, 62, 30, currentBackdrop);
        spike(-mapMove + 2355, 16, 30, currentBackdrop);
        spike(-mapMove + 2449, 23, 30, currentBackdrop);
        spike(-mapMove + 2536, 49, 30, currentBackdrop);
        spike(-mapMove + 2582, 110, 30, currentBackdrop);
        spike(-mapMove + 2598, 183, 30, currentBackdrop);
        spike(-mapMove + 2640, 241, 30, currentBackdrop);
        spike(-mapMove + 2624, 433, 30, currentBackdrop);
        spike(-mapMove + 2786, 300, 30, currentBackdrop);
        trampoline(-mapMove + 2892, 269, 100, 12, 0, currentBackdrop);
        block(-mapMove + 2907, 342, 75, 156, currentBackdrop);
        trampoline(-mapMove + 3096, 196, 100, 12, 1, currentBackdrop);
        block(-mapMove + 3105, 276, 87, 246, currentBackdrop);
        block(-mapMove + 3244, 310, 181, 22, currentBackdrop);
        speedBlock(-mapMove + 3311, 260, 124, 50, currentBackdrop);
        block(-mapMove + 3590, 378, 50, 113, currentBackdrop);
        lavaBlock(-mapMove + 3592, -16, 50, 264, currentBackdrop);
        ballonblockUP(-mapMove + 3916, 377, 176, 42, 1, 8, currentBackdrop);
        ballonblock(-mapMove + 4218, 190, 177, 44, 2, 8, currentBackdrop);
        block(-mapMove + 4544, 445, 50, 50, currentBackdrop);
        specialMachineBox(-mapMove + 4641, 317, 50, 50, 1, 215, 'gravity-guy', 0);
        block(-mapMove + 4692, 447, 145, 10, currentBackdrop);
        spike(-mapMove + 4802, 415, 30, currentBackdrop);
        block(-mapMove + 4788, 277, 181, 30, currentBackdrop);
        block(-mapMove + 4937, 314, 32, 30, currentBackdrop);
        block(-mapMove + 5058, 157, 32, 30, currentBackdrop);
        block(-mapMove + 5188, 47, 32, 30, currentBackdrop);
        block(-mapMove + 5341, 118, 32, 30, currentBackdrop);
        portal(-mapMove + 5495, 312, 62, 112, currentBackdrop);
        }
            break;
            
        case 8:
        level9: {
        
        lavaBlock(-mapMove + 3852, 351, 212, 50, currentBackdrop);
        lavaBlock(-mapMove + 741, 262, 127, 284, currentBackdrop);
        lavaBlock(-mapMove + 1457, 259, 103, 261, currentBackdrop);
        lavaBlock(-mapMove + 2103, 406, 1010, 173, currentBackdrop);
        messageSign(420, 101, 27, "Level Made By:\nThēphāntømprøgrāmmēr (@TPP13)");
        block(-mapMove - 85, 254, 365, 50, currentBackdrop);
        ballonblock(-mapMove + 410, 285, 70, 50, 1, 1, currentBackdrop);
        block(-mapMove + 575, 254, 165, 50, currentBackdrop);
        flagCheckpoint(-mapMove + 639, -5, 11, 260, 0, currentBackdrop);
        block(-mapMove + 870, 254, 427, 50, currentBackdrop);
        spike(-mapMove + 998, 223, 30, currentBackdrop);
        spike(-mapMove + 1141, 223, 30, currentBackdrop);
        trampoline(-mapMove + 1301, 252, 100, 12, 1, currentBackdrop);
        block(-mapMove + 1245, 312, 160, 50, currentBackdrop);
        block(-mapMove + 1405, 254, 50, 108, currentBackdrop);
        block(-mapMove + 1562, 254, 115, 50, currentBackdrop);
        block(-mapMove + 1680, 197, 500, 107, currentBackdrop);
        specialMachineBox(-mapMove + 1753, 145, 50, 50, 0, 95, 'bird', 0);
        spike(-mapMove + 1847, 169, 30, currentBackdrop);
        spike(-mapMove + 1897, 169, 30, currentBackdrop);
        spike(-mapMove + 1948, 169, 30, currentBackdrop);
        spike(-mapMove + 1998, 169, 30, currentBackdrop);
        ballonblock(-mapMove + 2261, 257, 50, 50, 2, 8, currentBackdrop);
        ballonblockUP(-mapMove + 2458, 370, 65, 50, 3, 6, currentBackdrop);
block(-mapMove + 2025, 311, 77, 191, currentBackdrop);
        ballonblockUP(-mapMove + 2624, 302, 50, 50, 4, 6, currentBackdrop);
        trampoline(-mapMove + 2712, 320, 100, 12, 5, currentBackdrop);
        block(-mapMove + 2931, -3, 50, 117, currentBackdrop); 
        block(-mapMove + 2931, 200, 60, 201, currentBackdrop); 
        block(-mapMove + 1768, -22, 324, 115, currentBackdrop);
        block(-mapMove + 3113, 400, 1176, 100, currentBackdrop);
        block(-mapMove + 3113, 0, 1075, 100, currentBackdrop);
        flagCheckpoint(-mapMove + 3111, 141, 11, 260, 1, currentBackdrop);
        specialMachineBox(-mapMove + 3148, 342, 50, 50, 1, 255, 'gravity-guy', 0);
        block(-mapMove + 3590, 104, 50, 228, currentBackdrop);
        block(-mapMove + 3375, 171, 50, 228, currentBackdrop);
        block(-mapMove + 3800, 342, 50, 50, currentBackdrop);
        block(-mapMove + 4066, 342, 50, 50, currentBackdrop);
        block(-mapMove + 3800, 106, 40, 120, currentBackdrop);
        block(-mapMove + 4100, 106, 40, 120, currentBackdrop);
flagCheckpoint(-mapMove + 4178, 141, 11, 260, 3, currentBackdrop);
        specialMachineBox(-mapMove + 4234, 340, 50, 50, 2, 320, 'bird', 0);
        block(-mapMove + 4419, 126, 50, 50, currentBackdrop);
        block(-mapMove + 4419, 26, 50, 50, currentBackdrop);
        block(-mapMove + 4419, 226, 50, 50, currentBackdrop);

        block(-mapMove + 4719, 226, 50, 50, currentBackdrop);
        block(-mapMove + 4719, 326, 50, 50, currentBackdrop);
        block(-mapMove + 4719, 426, 50, 50, currentBackdrop);

        block(-mapMove + 5019, 126, 50, 50, currentBackdrop);
        block(-mapMove + 5019, 26, 50, 50, currentBackdrop);
        block(-mapMove + 5019, 226, 50, 50, currentBackdrop);

        block(-mapMove + 5319, 226, 50, 50, currentBackdrop);
        block(-mapMove + 5319, 326, 50, 50, currentBackdrop);
        block(-mapMove + 5319, 426, 50, 50, currentBackdrop);

        block(-mapMove + 5456, 370, 300, 130, currentBackdrop);
        portal(-mapMove + 5552, 257, 62, 112, currentBackdrop);
        
        }
            break;
           
        case 9:
        level10: {
        messageSign(420, 101, 27, "Level Made By:\nFunkyChicken (@AFunkyChicken)");
        block(-mapMove + 87, 300, 837, 8, currentBackdrop);
        block(-mapMove + 1007, 323, 131, 10, currentBackdrop);
        block(-mapMove + 1195, 355, 229, 12, currentBackdrop);
        block(-mapMove + 1427, 374, 3940, 158, currentBackdrop);
        block(-mapMove + 1430, 146, 3935, 11, currentBackdrop);
        block(-mapMove + 1605, 164, 12, 130, currentBackdrop);
        block(-mapMove + 1817, 255, 100, 115, currentBackdrop);
        block(-mapMove + 2112, 162, 7, 136, currentBackdrop);
        block(-mapMove + 2309, 251, 11, 119, currentBackdrop);
        block(-mapMove + 5659, 266, 521, 10, currentBackdrop);
        block(-mapMove + 6201, 311, 97, 7, currentBackdrop);
        block(-mapMove + 6320, 279, 97, 7, currentBackdrop);
        block(-mapMove + 6442, 253, 113, 8, currentBackdrop);
        block(-mapMove + 6625, 350, 245, 7, currentBackdrop);
        block(-mapMove + 6947, 315, 148, 7, currentBackdrop);
        block(-mapMove + 7149, 354, 209, 10, currentBackdrop);
        block(-mapMove + 7647, 137, 278, 7, currentBackdrop);
        block(-mapMove + 8076, 291, 1018, 6, currentBackdrop);
        block(-mapMove + 9168, 251, 50, 50, currentBackdrop);
        block(-mapMove + 9325, 193, 50, 50, currentBackdrop);
        block(-mapMove + 9487, 193, 50, 50, currentBackdrop);
        block(-mapMove + 9629, 136, 50, 50, currentBackdrop);
        block(-mapMove + 9787, 136, 50, 50, currentBackdrop);
        block(-mapMove + 10001, 288, 716, 233, currentBackdrop);
        specialMachineBox(-mapMove + 1372, 294, 50, 50, 1, 1012, 'bird', 14);
        
        specialMachineBox(-mapMove + 7306, 294, 50, 50, 0, 98, 'bird', 0);
        lavaBlock(-mapMove + 2321, 349, 3029, 165, currentBackdrop);
        lavaBlock(-mapMove + 2510, 190, 2838, -25, currentBackdrop);
        speedBlock(-mapMove + 3529, 241, 124, 50, currentBackdrop);
        flagCheckpoint(-mapMove + 6160, 7, 11, 260, 0, currentBackdrop);
        spike(-mapMove + 6549, 222, 30, currentBackdrop);
        spike(-mapMove + 7070, 287, 30, currentBackdrop);
        spike(-mapMove + 8184, 262, 30, currentBackdrop);
        spike(-mapMove + 8382, 262, 30, currentBackdrop);
        spike(-mapMove + 8584, 262, 30, currentBackdrop);
        spike(-mapMove + 8784, 262, 30, currentBackdrop);
        spike(-mapMove + 9065, 262, 30, currentBackdrop);
        portal(-mapMove + 10131, 177, 62, 112, currentBackdrop);

        }
            break;
            
        case 10:
        level11: {
        
        messageSign(5500, 100, 22, "THIS WAY!!", ">:)");
        
        messageSign(5800, 80, 25, "", "RAGE!! >:)");
            
        flagCheckpoint(-mapMove + 2797, 195, 11, 260, 0, currentBackdrop);
        flagCheckpoint(-mapMove + 5233, 100, 11, 260, 1, currentBackdrop);
        block(-mapMove - 30, 357, 500, 300, currentBackdrop);
        block(-mapMove + 576, 294, 50, 50, currentBackdrop);
        block(-mapMove + 763, 267, 50, 50, currentBackdrop);
        ballonblock(-mapMove + 947, 295, 126, 23, 0, 6, currentBackdrop);
        block(-mapMove + 1141, 454, 591, 50, currentBackdrop);
        lavaBlock(-mapMove + 1608, 240, 77, 23, currentBackdrop);
        lavaBlock(-mapMove + 1451, 240, 160, 23, currentBackdrop);
        lavaBlock(-mapMove + 1293, 240, 160, 23, currentBackdrop);
        lavaBlock(-mapMove + 1135, 240, 160, 23, currentBackdrop);
        block(-mapMove + 1137, 24, 546, 209, currentBackdrop);
        ballonblockUP(-mapMove + 1267, 452, 70, 5, 1, 15, currentBackdrop);
        ballonblockUP(-mapMove + 1443, 452, 70, 5, 2, 15, currentBackdrop);
        spike(-mapMove + 1610, 423, 30, currentBackdrop);
        specialMachineBox(-mapMove + 1803, 337, 50, 50, 0, 229, "bird");
        
        lavaBlock(-mapMove + 1956, 298, 50, 253, currentBackdrop);
        lavaBlock(-mapMove + 1957, -30, 50, 155, currentBackdrop);
        lavaBlock(-mapMove + 2113, 202, 30, 30, currentBackdrop);
        lavaBlock(-mapMove + 2195, -2, 30, 146, currentBackdrop);
        lavaBlock(-mapMove + 2183, 354, 30, 48, currentBackdrop);
        lavaBlock(-mapMove + 2283, 423, 50, 69, currentBackdrop);
        lavaBlock(-mapMove + 2283, 259, 50, 53, currentBackdrop);
        lavaBlock(-mapMove + 2493, -100, 50, 345, currentBackdrop);
        lavaBlock(-mapMove + 2494, 470, 50, 345, currentBackdrop);
        block(-mapMove + 2734, 449, 332, 50, currentBackdrop);
        specialMachineBox(-mapMove + 2817, 364, 50, 50, 1, 292, "gravity-guy");
        lavaBlock(-mapMove + 3154, 20, 50, 50, currentBackdrop);
        lavaBlock(-mapMove + 3340, 27, 50, 50, currentBackdrop);
        block(-mapMove + 3042, -6, 487, 50, currentBackdrop);
        block(-mapMove + 3498, 233, 209, 37, currentBackdrop);
        
        spike(-mapMove + 3592, 202, 30, currentBackdrop);
        
        block(-mapMove + 3680, -13, 199, 50, currentBackdrop);
        
        block(-mapMove + 3855, 233, 383, 46, currentBackdrop);
        
        speedBlock(-mapMove + 4105, 183, 124, 50, currentBackdrop);
        
        block(-mapMove + 4516, 236, 65, 50, currentBackdrop);
        
        trampoline(-mapMove + 4846, 316, 100, 12, 0, currentBackdrop);
        
        block(-mapMove + 4871, 379, 50, 139, currentBackdrop);
        
        block(-mapMove + 5162, 353, 169, 50, currentBackdrop);
        
        specialMachineBox(-mapMove + 5276, 257, 50, 50, 2, 221, "bird");
        
        lavaBlock(-mapMove + 5473, -10, 434, 63, currentBackdrop);
        
        lavaBlock(-mapMove + 5474, 181 + 50, 434, 154 - 100, currentBackdrop);
        
        lavaBlock(-mapMove + 5475, 480, 434, 188, currentBackdrop);
        
        lavaBlock(-mapMove + 5877, 52, 31, 129 + 50, currentBackdrop);
        
        speedBlock(-mapMove + 5665, 385, 124, 50, currentBackdrop);
        
        lavaBlock(-mapMove + 6118, 394 + 30, 50, 128, currentBackdrop);
        
        lavaBlock(-mapMove + 6294, 4 - 30, 50, 294, currentBackdrop);
        
        lavaBlock(-mapMove + 6546, 344 + 30, 50, 336, currentBackdrop);
        
        block(-mapMove + 6699, 343, 524, 159, currentBackdrop);
        
        spike(-mapMove + 6885, 312, 30, currentBackdrop);
        
        spike(-mapMove + 7017, 311, 30, currentBackdrop);
        
        portal(-mapMove + 7161, 226, 62, 112, currentBackdrop);
        }
            break;
            
        case 11:
        level12: {
        messageSign(420, 101, 27, "Level Made By:\nThēphāntømprøgrāmmēr (@TPP13)");
        block(-mapMove + 86, 325, 205, 50, currentBackdrop);
        block(-mapMove + 361, 281, 50, 50, currentBackdrop);
        specialMachineBox(-mapMove + 360, 222, 50, 50, 1, 105, 'gravity-guy', 0);
        block(-mapMove + 447, 27, 50, 24, currentBackdrop);
        block(-mapMove + 667, 27, 50, 24, currentBackdrop);
       
        block(-mapMove + 748, 290, 92, 24, currentBackdrop);
        lavaBlock(-mapMove + 842, 298, 72, 218, currentBackdrop);
        block(-mapMove + 916, 290, 92, 24, currentBackdrop);
        lavaBlock(-mapMove + 1010, 298, 202, 218, currentBackdrop);
        block(-mapMove + 1214, 290, 365, 24, currentBackdrop);
        speedBlock(-mapMove + 908, 242, 124, 50, currentBackdrop);
        trampoline(-mapMove + 1388, 275, 100, 12, 1, currentBackdrop);
        trampoline(-mapMove + 1512, 227, 100, 12, 2, currentBackdrop);
        ballonblock(-mapMove + 1857, 223, 50, 50, 1, 5, currentBackdrop);
        ballonblock(-mapMove + 1988, 248, 50, 50, 2, 5, currentBackdrop);
        ballonblock(-mapMove + 2120, 298, 50, 50, 3, 5, currentBackdrop);
        specialMachineBox(-mapMove + 2307, 210, 50, 50, 2, 152, 'bird', 1);
        ballonblock(-mapMove + 2483, 197, 50, 50, 4, 6, currentBackdrop);
        ballonblock(-mapMove + 2583, 297, 50, 50, 5, 6, currentBackdrop);
        ballonblock(-mapMove + 2683, 17, 50, 50, 6, 6, currentBackdrop);
        ballonblock(-mapMove + 2383, 407, 50, 50, 7, 6, currentBackdrop);
        ballonblock(-mapMove + 2683, 407, 50, 50, 8, 6, currentBackdrop);
        ballonblock(-mapMove + 2383, 97, 50, 50, 9, 6, currentBackdrop);
        ballonblock(-mapMove + 2583, 97, 50, 50, 10, 6, currentBackdrop);
        block(-mapMove + 2878, 292, 537, 50, currentBackdrop);
        flagCheckpoint(-mapMove + 2933, 33, 11, 260, 0, currentBackdrop);
        block(-mapMove + 2998, 235, 50, 50, currentBackdrop);
        block(-mapMove + 3149, 177, 150, 50, currentBackdrop);
        block(-mapMove + 3394, 235, 150, 50, currentBackdrop);
        trampoline(-mapMove + 3535, 234, 100, 12, 3, currentBackdrop);
        lavaBlock(-mapMove + 498, -13, 167, 50, currentBackdrop);
        block(-mapMove + 3634, 238, 100, 50, currentBackdrop);
        lavaBlock(-mapMove + 3634, 241, 167, 295, currentBackdrop);
        spike(-mapMove + 3148, 145, 30, currentBackdrop);
        block(-mapMove + 3800, 187, 50, 30, currentBackdrop);
        trampoline(-mapMove + 3858, 235, 100, 12, 4, currentBackdrop);
        trampoline(-mapMove + 3978, 235, 100, 12, 5, currentBackdrop);
        trampoline(-mapMove + 4098, 235, 100, 12, 6, currentBackdrop);
        lavaBlock(-mapMove + 4197, 248, 128, 287, currentBackdrop);
        portal(-mapMove + 4450, 266, 62, 112, currentBackdrop);
        }
            break;
        
        case 12:
        level13: {
        messageSign(420, 101, 27, "Level Made By:\nFunkyChicken (@AFunkyChicken)");
            block(-mapMove + 86, 289, 982, 13, currentBackdrop);
        spike(-mapMove + 327, 262, 30, currentBackdrop);
        spike(-mapMove + 551, 260, 30, currentBackdrop);
        spike(-mapMove + 730, 259, 30, currentBackdrop);
        spike(-mapMove + 925, 260, 30, currentBackdrop);
        block(-mapMove + 1149, 237, 50, 50, currentBackdrop);
        block(-mapMove + 1299, 281, 50, 50, currentBackdrop);
        block(-mapMove + 1438, 232, 50, 50, currentBackdrop);
        trampoline(-mapMove + 1562, 220, 100, 12, 0, currentBackdrop);
        block(-mapMove + 1587, 304, 51, 244, currentBackdrop);
        spike(-mapMove + 1632, 191, 30, currentBackdrop);
        specialMachineBox(-mapMove + 1704, 91, 50, 50, 0, 166, 'bird', 0);
        block(-mapMove + 2390, 80, 50, 50, currentBackdrop);
        block(-mapMove + 2668, 252, 115, 50, currentBackdrop);
        speedBlock(-mapMove + 2658, 193, 124, 50, currentBackdrop);
        specialMachineBox(-mapMove + 2670, 190, 50, 50, 1, 248, 'gravity-guy', 0);
        block(-mapMove + 2768, 60, 521, 13, currentBackdrop);
        block(-mapMove + 2927, 79, 50, 50, currentBackdrop);
        block(-mapMove + 3256, 275, 624, 15, currentBackdrop);
        spike(-mapMove + 3415, 245, 30, currentBackdrop);
        block(-mapMove + 3851, 29, 275, 13, currentBackdrop);
        specialMachineBox(-mapMove + 4197, 205, 50, 50, 3, 224, 'emoji-box', 2);
        block(-mapMove + 4432, -4, 82, 551, currentBackdrop);
        block(-mapMove + 4719, -25, 110, 242, currentBackdrop);
        block(-mapMove + 5050, -2, 106, 519, currentBackdrop);
        block(-mapMove + 5654, 277, 530, 9, currentBackdrop);
        block(-mapMove + 5354, 277, 430, 9, currentBackdrop);
        spike(-mapMove + 5996, 248, 30, currentBackdrop);
        block(-mapMove + 6289, 322, 50, 50, currentBackdrop);
        flagCheckpoint(-mapMove + 5956, 17, 11, 260, 0, currentBackdrop);
        block(-mapMove + 6432, 272, 50, 50, currentBackdrop);
        block(-mapMove + 6582, 229, 50, 50, currentBackdrop);
        block(-mapMove + 6720, 312, 162, 8, currentBackdrop);
        spike(-mapMove + 6858, 284, 30, currentBackdrop);
        spike(-mapMove + 6716, 282, 30, currentBackdrop);
        specialMachineBox(-mapMove + 6920, 225, 50, 50, 5, 146, 'bird', 0);
        //flagCheckpoint(-mapMove + 7189, 243, 11, 260, 5, currentBackdrop);
        spike(-mapMove + 7180, 206, 30, currentBackdrop);
        spike(-mapMove + 7176, 167, 30, currentBackdrop);
        spike(-mapMove + 7175, 130, 30, currentBackdrop);
        //flagCheckpoint(-mapMove + 7440, -5, 11, 260, 0, currentBackdrop);
        spike(-mapMove + 7431, 256, 30, currentBackdrop);
        block(-mapMove + 7496, 400, 599, 14, currentBackdrop);
        spike(-mapMove + 7749, 372, 30, currentBackdrop);
        spike(-mapMove + 7898, 372, 30, currentBackdrop);
        lavaBlock(-mapMove + 8097, 417, 527, 101, currentBackdrop);
        block(-mapMove + 8188, 354, 50, 0, currentBackdrop);
        block(-mapMove + 8323, 316, 50, 0, currentBackdrop);
        block(-mapMove + 8462, 281, 50, 0, currentBackdrop);
        block(-mapMove + 8621, 385, 50, 128, currentBackdrop);
        block(-mapMove + 8772, 334, 50, 50, currentBackdrop);
        block(-mapMove + 8910, 291, 50, 50, currentBackdrop);
        block(-mapMove + 9051, 243, 50, 50, currentBackdrop);
        block(-mapMove + 9186, 197, 50, 50, currentBackdrop);
        block(-mapMove + 9358, 243, 50, 50, currentBackdrop);
        block(-mapMove + 9525, 240, 50, 50, currentBackdrop);
        ballonblockUP(-mapMove + 9690, 209, 50, 50, 0, 5, currentBackdrop);
        block(-mapMove + 9864, 332, 50, 50, currentBackdrop);
        block(-mapMove + 9973, 403, 164, 16, currentBackdrop);
        spike(-mapMove + 9969, 374, 30, currentBackdrop);
        spike(-mapMove + 10110, 375, 30, currentBackdrop);
        block(-mapMove + 10167, 350, 50, 50, currentBackdrop);
        block(-mapMove + 10324, 348, 50, 50, currentBackdrop);
        block(-mapMove + 10486, 348, 50, 50, currentBackdrop);
        trampoline(-mapMove + 10577, 414, 100, 12, 4, currentBackdrop);
        block(-mapMove + 10701, 388, 510, 12, currentBackdrop);
        spike(-mapMove + 10819 + 30, 359, 30, currentBackdrop);
        spike(-mapMove + 10965 + 30, 359, 30, currentBackdrop);
        block(-mapMove + 11311, 348, 50, 50, currentBackdrop);
        block(-mapMove + 11454, 300, 50, 50, currentBackdrop);
        block(-mapMove + 11599, 249, 50, 50, currentBackdrop);
        block(-mapMove + 11739, 216, 613, 338, currentBackdrop);
        portal(-mapMove + 12079, 104, 62, 112, currentBackdrop);
        }
            break;
            
        case 13:
        level14: {
        
        flagCheckpoint(-mapMove + 4820, 190, 11, 260, 0, currentBackdrop);

        block(-mapMove - 30, 357, 500, 140, currentBackdrop);
        
        lavaBlock(-mapMove + 725, -12, 50, 596, currentBackdrop);
        
        lavaBlock(-mapMove + 1100, -12, 50, 596, currentBackdrop);
        
        lavaBlock(-mapMove + 1445, -12, 50, 596, currentBackdrop);
        
        specialMachineBox(-mapMove + 387, 212, 50, 50, 0, 183, 'emoji-box', 3);
        block(-mapMove + 1801, 364 + 100, 425, 160, currentBackdrop);
        
        spike(-mapMove + 2088, 332 + 100, 30, currentBackdrop);
        
        trampoline(-mapMove + 2331, 456, 100, 12, 0, currentBackdrop);
        
        trampoline(-mapMove + 2520, 456, 100, 12, 1, currentBackdrop);
        
        ballonblockUP(-mapMove + 2732, 428, 137, 17, 0, 5, currentBackdrop);
        
        block(-mapMove + 2939, 198, 10, 50, currentBackdrop);
        
        block(-mapMove + 3085, 198, 10, 50, currentBackdrop);
        
        block(-mapMove + 3227, 198, 10, 50, currentBackdrop);
        
        block(-mapMove + 3378, 200, 10, 50, currentBackdrop);
        
        specialMachineBox(-mapMove + 3476, 319, 50, 50, 1, 277, 'bird', 0);
        
        lavaBlock(-mapMove + 3719, 194, 50, 465, currentBackdrop);
        
        lavaBlock(-mapMove + 3988, -16, 50, 362, currentBackdrop);
        
        lavaBlock(-mapMove + 4162, 407, 50, 122, currentBackdrop);
        
        lavaBlock(-mapMove + 4163, -25, 50, 287, currentBackdrop);
        
        lavaBlock(-mapMove + 4461, 187, 50, 381, currentBackdrop);
        
        lavaBlock(-mapMove + 4461, -25, 50, 63, currentBackdrop);
        
        block(-mapMove + 4629, 444, 346, 117, currentBackdrop);
        
        specialMachineBox(-mapMove + 4859, 384, 50, 50, 2, 332, 'gravity-guy', 0);
        lavaBlock(-mapMove + 5108, 10, 50, 50, currentBackdrop);
        
        lavaBlock(-mapMove + 5311, 10, 50, 50, currentBackdrop);
        
        block(-mapMove + 4982, -24, 503, 50, currentBackdrop);
        
        block(-mapMove + 5505, 452, 151, 50, currentBackdrop);
        
        block(-mapMove + 5698, -22, 176, 50, currentBackdrop);
        
        block(-mapMove + 5906, 453, 176, 50, currentBackdrop);
        
        spike(-mapMove + 5973, 422, 30, currentBackdrop);
        
        block(-mapMove + 6247, 446, 213, 50, currentBackdrop);
        
        spike(-mapMove + 6325, 416, 30, currentBackdrop);
        
        block(-mapMove + 6595, 402, 54, 3, currentBackdrop);
        
        block(-mapMove + 6784, 354, 60, 3, currentBackdrop);
        
        block(-mapMove + 6984, 308, 286, 3, currentBackdrop);
        
        speedBlock(-mapMove + 7153, 258, 124, 50, currentBackdrop);
        
        spike(-mapMove + 7061, 277, 30, currentBackdrop);
        
        trampoline(-mapMove + 7495, 303, 100, 12, 0, currentBackdrop);
        
        block(-mapMove + 7521, 369, 50, 135, currentBackdrop);
        
        block(-mapMove + 7902, 357, 239, 50, currentBackdrop);
        
        ballonblock(-mapMove + 8274 - 30, 355, 94 + 30, 50, 1, 3, currentBackdrop);
        
        block(-mapMove + 8470, 354, 132, 50, currentBackdrop);
        
        ballonblockUP(-mapMove + 8606, 354, 132, 50, 2, 6, currentBackdrop);
        
        block(-mapMove + 8747, 206, 301, 50, currentBackdrop);
        
        portal(-mapMove + 8988, 91, 62, 112, currentBackdrop);
        
        }
            break;
            
        case 14:
        level15: {
            messageSign(450, 101, 27, "Level Made By ScusX (@GiantScus)");
            messageSign(2000, 101, 27, "SPAM DAT JUMP KEY!!!");
            block(-mapMove, 320, 400, 80, currentBackdrop);
            ballonblock(-mapMove + 421, 323, 131, 28, 0, 2, currentBackdrop);
            lavaBlock(-mapMove + 557, 284, 24, 34, currentBackdrop);
            block(-mapMove + 559, 200, 20, 100, currentBackdrop);
            block(-mapMove + 561, 407, 237, 33, currentBackdrop);
            spike(-mapMove + 671, 375, 30, currentBackdrop);
            block(-mapMove + 852, 336, 50, 180, currentBackdrop);
            block(-mapMove + 977, 270, 50, 290, currentBackdrop);
            block(-mapMove + 1090, 187, 152, 26, currentBackdrop);
            trampoline(-mapMove + 1338, 311, 100, 12, 0, currentBackdrop);
            trampoline(-mapMove + 1503, 311, 100, 12, 1, currentBackdrop);
            block(-mapMove + 1336, 383, 280, 20, currentBackdrop);
            spike(-mapMove + 1455, 352, 30, currentBackdrop);
            block(-mapMove + 1695, 206, 226, 33, currentBackdrop);
            speedBlock(-mapMove + 1743, 155, 124, 50, currentBackdrop);
            ballonblock(-mapMove + 1950, 200, 350, 20, 1, 6, currentBackdrop);
            ballonblock(-mapMove + 2350, 200, 350, 20, 2, 6, currentBackdrop);
            ballonblock(-mapMove + 2750, 200, 350, 20, 3, 6, currentBackdrop);
            block(-mapMove + 3130, 215, 221, 26, currentBackdrop);
            flagCheckpoint(-mapMove + 3184, -45, 11, 260, 0, currentBackdrop);
            spike(-mapMove + 3303, 182, 30, currentBackdrop);
            specialMachineBox(-mapMove + 3363, 126, 50, 50, 0, 270, 'gravity-guy', 0);
            lavaBlock(-mapMove + 3370, 470, 400, 50, currentBackdrop);
            lavaBlock(-mapMove + 3370, -30, 400, 50, currentBackdrop);
            lavaBlock(-mapMove + 3770, 470, 400, 50, currentBackdrop);
            lavaBlock(-mapMove + 3770, -30, 400, 50, currentBackdrop);
            block(-mapMove + 4169, -5, 50, 50, currentBackdrop);
            block(-mapMove + 4169, 444, 50, 50, currentBackdrop);
            block(-mapMove + 3318, 444, 50, 50, currentBackdrop);
            block(-mapMove + 3318, -5, 50, 50, currentBackdrop);
            block(-mapMove + 3408, 250, 90, 30, currentBackdrop);
            block(-mapMove + 3512, 64, 180, 30, currentBackdrop);
            block(-mapMove + 3665, 245, 250, 32, currentBackdrop);
            spike(-mapMove + 3770, 213, 30, currentBackdrop);
            trampoline(-mapMove + 3984, 363, 100, 12, 3, currentBackdrop);
            block(-mapMove + 4285, 411, 201, 28, currentBackdrop);
            block(-mapMove + 4500, 243, 201, 28, currentBackdrop);
            spike(-mapMove + 3567, 170, 30, currentBackdrop);
            block(-mapMove + 3569, 200, 29, 326, currentBackdrop);
            block(-mapMove + 3900, 126, 100, 31, currentBackdrop);
            flagCheckpoint(-mapMove + 4672, -17, 11, 260, 1, currentBackdrop);
            block(-mapMove + 4730, 318, 167, 24, currentBackdrop);
            ballonblockUP(-mapMove + 4909, 289, 100, 26, 4, 5, currentBackdrop);
            ballonblockUP(-mapMove + 5017, 200, 137, 26, 5, 5, currentBackdrop);
            block(-mapMove + 5230, 63, 145, 31, currentBackdrop);
            trampoline(-mapMove + 5462, 180, 100, 12, 4, currentBackdrop);
            specialMachineBox(-mapMove + 5629, 56, 50, 50, 1, 150, 'emoji-box', 4);
            block(-mapMove + 5466, 267, 92, 15, currentBackdrop);
            block(-mapMove + 5756, 0, 51, 500, currentBackdrop);
            block(-mapMove + 6008 + 50, 0, 51, 500, currentBackdrop);
            block(-mapMove + 6218 + 150, 0, 51, 500, currentBackdrop);
            portal(-mapMove + 7000, 166, 62, 112, currentBackdrop);
        }
            break;
            
        case 15:
        level16: {
            messageSign(350, 151, 20, "Level Made By:\nThēphāntømprøgrāmmēr (@TPP13)");
            trampoline(-mapMove + 312 + 20, 246, 100, 12, 0, currentBackdrop);
            block(-mapMove + 86, 288, 388, 50, currentBackdrop);
        block(-mapMove + 294 + 20, 230, 29, 50, currentBackdrop);
        block(-mapMove + 432 + 15, -3, 50, 142, currentBackdrop);
        block(-mapMove + 541, 217, 50, 124, currentBackdrop);
        block(-mapMove + 541 + 200, 217, 50, 124, currentBackdrop);
        lavaBlock(-mapMove + 593, 235, 146, 304, currentBackdrop);
        speedBlock(-mapMove + 802, 131, 124, 50, currentBackdrop);
        block(-mapMove + 994, 200, 50, 301, currentBackdrop);
        block(-mapMove + 994, -48, 50, 172, currentBackdrop);
        block(-mapMove + 1126, 258, 50, 226, currentBackdrop);
        specialMachineBox(-mapMove + 1279, 162, 50, 50, 0, 220, 'bird', 1);
        block(-mapMove + 1400, 130, 50, 406, currentBackdrop);
        block(-mapMove + 1400 + 300, -3, 50, 177, currentBackdrop);
        block(-mapMove + 1400 + 600, -3, 50, 156, currentBackdrop);
        block(-mapMove + 1400 + 600, 255, 50, 356, currentBackdrop);
        block(-mapMove + 2166, 274, 302, 48, currentBackdrop);
        spike(-mapMove + 2238, 245, 30, currentBackdrop);
        block(-mapMove + 2390, -1, 50, 197, currentBackdrop);
        specialMachineBox(-mapMove + 2519, 154, 50, 50, 2, 239, 'gravity-guy', 0);
        block(-mapMove + 2539, 237, 50, -3, currentBackdrop);
        block(-mapMove + 2696, 248, 50, 50, currentBackdrop);
        block(-mapMove + 2760, 65, 50, 50, currentBackdrop);
        block(-mapMove + 2763 + 150, 65, 50, 50, currentBackdrop);
        block(-mapMove + 2763 + 330, 65, 50, 50, currentBackdrop);
        block(-mapMove + 3161, 246, 50, 50, currentBackdrop);
        lavaBlock(-mapMove + 3161 + 52, 250, 98, 300, currentBackdrop);
        block(-mapMove + 3161 + 152, 246, 50, 50, currentBackdrop);
        ballonblock(-mapMove + 3484, 248, 50, 50, 1, 5, currentBackdrop);
        ballonblock(-mapMove + 3652, 250, 50, 50, 2, 5, currentBackdrop);
        ballonblockUP(-mapMove + 3833, 321, 50, 50, 3, 6, currentBackdrop);
        trampoline(-mapMove + 3988, 210, 100, 12, 4, currentBackdrop);
        block(-mapMove + 4015, 296, 50, 209, currentBackdrop);
        spike(-mapMove + 4087, 150, 30, currentBackdrop);
        
           block(-mapMove + 4161, 208, 222, 52, currentBackdrop);
        flagCheckpoint(-mapMove + 4265, -52, 11, 260, 0, currentBackdrop);
        speedBlock(-mapMove + 4333, 148, 124, 50, currentBackdrop);
        block(-mapMove + 4506, 288, 79, 50, currentBackdrop);
        block(-mapMove + 4782, 288, 50, 50, currentBackdrop);
        block(-mapMove + 5082, 288, 50, 50, currentBackdrop);
        ballonblock(-mapMove + 5217, 239, 50, 50, 4, 5, currentBackdrop);
        block(-mapMove + 5353, 284, 417, 50, currentBackdrop);
        spike(-mapMove + 5430, 255, 30, currentBackdrop);
        spike(-mapMove + 5557, 258, 30, currentBackdrop);
        block(-mapMove + 5620, 226, 50, 50, currentBackdrop);
        spike(-mapMove + 5710, 254, 30, currentBackdrop);
        trampoline(-mapMove + 5771, 282, 100, 12, 3, currentBackdrop);
        specialMachineBox(-mapMove + 5957, 205, 50, 50, 4, 113, 'emoji-box', 5);
        lavaBlock(-mapMove + 6128, -4, 50, 539, currentBackdrop);
        lavaBlock(-mapMove + 6128 + 300, -4, 50, 539, currentBackdrop);
        lavaBlock(-mapMove + 6128 + 600, -4, 50, 539, currentBackdrop);
        lavaBlock(-mapMove + 6128 + 900, -4, 50, 539, currentBackdrop);
        lavaBlock(-mapMove + 6128 + 1200, -4, 50, 539, currentBackdrop);
        block(-mapMove + 7592, 271, 474, 50, currentBackdrop);
        spike(-mapMove + 7746, 242, 30, currentBackdrop);
        spike(-mapMove + 7889, 243, 30, currentBackdrop);
        spike(-mapMove + 8039, 242, 30, currentBackdrop);
        trampoline(-mapMove + 8105, 283, 100, 12, 5, currentBackdrop);
        portal(-mapMove + 8259, 174, 62, 112, currentBackdrop);
        }
            break;
            
        case 16:
        level17: {
        messageSign(420, 101, 27, "Level Made By:\nFunkyChicken (@AFunkyChicken)");
        block(-mapMove + 87, 342, 390, 18, currentBackdrop);
        block(-mapMove + 518, 302, 50, 18, currentBackdrop);
        block(-mapMove + 601, 258, 50, 18, currentBackdrop);
        block(-mapMove + 697, 220, 50, 18, currentBackdrop);
        block(-mapMove + 830, 220, 50, 18, currentBackdrop);
        block(-mapMove + 959, 275, 50, 18, currentBackdrop);
        block(-mapMove + 1092, 275, 50, 18, currentBackdrop);
        specialMachineBox(-mapMove + 1167, 184, 50, 50, 0, 516, 'bird', 0);
        block(-mapMove + 1434, -24, 64, 267, currentBackdrop);
        block(-mapMove + 1434, -24 + 394, 64, 267, currentBackdrop);
        
        block(-mapMove + 1656, -137, 64, 267, currentBackdrop);
        block(-mapMove + 1656, -122 + 394, 64, 267, currentBackdrop);
        
        block(-mapMove + 1864, -65, 64, 267, currentBackdrop);
        block(-mapMove + 1864, -99 + 394, 64, 267, currentBackdrop);
        
        block(-mapMove + 2121, 100, 64, 267, currentBackdrop);
        block(-mapMove + 2401, 0, 64, 267, currentBackdrop);
        block(-mapMove + 2669, 240, 64, 267, currentBackdrop);
        
        block(-mapMove + 1864 + 1200, -141, 64, 267, currentBackdrop);
        block(-mapMove + 1864 + 1200, -131 + 394, 64, 267, currentBackdrop);
        block(-mapMove + 3185, 283, 64, 267, currentBackdrop);
        block(-mapMove + 3309, 316, 64, 267, currentBackdrop);
        block(-mapMove + 3430, 349, 64, 267, currentBackdrop);
        block(-mapMove + 3552, 388, 64, 267, currentBackdrop);
        block(-mapMove + 3677, 424, 64, 267, currentBackdrop);
        block(-mapMove + 3184, 119, 64, 26, currentBackdrop);
        block(-mapMove + 3306, 160, 64, 26, currentBackdrop);
        block(-mapMove + 3427, 201, 64, 26, currentBackdrop);
        block(-mapMove + 3549, 242, 64, 26, currentBackdrop);
        block(-mapMove + 3676, 271, 64, 26, currentBackdrop);
        
        block(-mapMove + 3832, 409, 64, 26, currentBackdrop);
        
        block(-mapMove + 3978, 369, 64, 26, currentBackdrop);
        
        specialMachineBox(-mapMove + 4069, 284, 50, 50, 1, 422, 'gravity-guy', 0);
        block(-mapMove + 4098, 406, 50, 50, currentBackdrop);
        block(-mapMove + 4146, 171, 198, 9, currentBackdrop);
        block(-mapMove + 4256, 260, 198, 9, currentBackdrop);
        speedBlock(-mapMove + 4223, 196, 124, 50, currentBackdrop);
        block(-mapMove + 4406, 170, 250, 8, currentBackdrop);
        block(-mapMove + 4503, 258, 250, 8, currentBackdrop);
        block(-mapMove + 4731, 169, 250, 8, currentBackdrop);
        block(-mapMove + 4905, 298, 354, 13, currentBackdrop);
        block(-mapMove + 5079, 165, 354, 13, currentBackdrop);
        speedBlock(-mapMove + 4901, 222, 124, 50, currentBackdrop);
        spike(-mapMove + 5131, 269, 30, currentBackdrop);
        block(-mapMove + 5519, 69, 50, 50, currentBackdrop);
        block(-mapMove + 5620, 244, 161, 26, currentBackdrop);
        block(-mapMove + 5827, 298, 161, 26, currentBackdrop);
        block(-mapMove + 6028, 251, 609, 10, currentBackdrop);
        spike(-mapMove + 6275, 225, 30, currentBackdrop);
        spike(-mapMove + 6444, 225, 30, currentBackdrop);
        trampoline(-mapMove + 6661, 225, 100, 12, 0, currentBackdrop);
        block(-mapMove + 6687, 306, 50, 215, currentBackdrop);
        block(-mapMove + 6874, 227, 50, 429, currentBackdrop);
        block(-mapMove + 7012, 198, 50, 429, currentBackdrop);
        block(-mapMove + 7169, 198, 50, 429, currentBackdrop);
        block(-mapMove + 7309, 167, 50, 429, currentBackdrop);
        block(-mapMove + 7464, 223, 50, 429, currentBackdrop);
        block(-mapMove + 7615, 224, 50, 429, currentBackdrop);
        block(-mapMove + 7779, 278, 108, 429, currentBackdrop);
        spike(-mapMove + 7858, 255, 30, currentBackdrop);
        block(-mapMove + 7957, 360, 106, 251, currentBackdrop);
        spike(-mapMove + 8036, 331, 30, currentBackdrop);
        block(-mapMove + 8129, 364, 50, 50, currentBackdrop);
        block(-mapMove + 8240, 336, 50, 50, currentBackdrop);
        specialMachineBox(-mapMove + 8337, 266, 50, 50, 2, 224, 'emoji-box', 3);
        block(-mapMove + 8614, -4, 50, 293, currentBackdrop);
        block(-mapMove + 8855, 198, 50, 293, currentBackdrop);
        block(-mapMove + 9039, 101, 50, 293, currentBackdrop);
        block(-mapMove + 9333, 197, 654, 293, currentBackdrop);
        lavaBlock(-mapMove + 9989, 372, 1005, 160, currentBackdrop);
        block(-mapMove + 10092, 233, 50, 50, currentBackdrop);
        block(-mapMove + 10283, 362, 50, 50, currentBackdrop);
        block(-mapMove + 10443, 352, 50, 50, currentBackdrop);
        trampoline(-mapMove + 10529, 316, 100, 12, 6, currentBackdrop);
        block(-mapMove + 10682, 352, 198, 17, currentBackdrop);
        block(-mapMove + 10996, 351, 60, 165, currentBackdrop);
        block(-mapMove + 11136, 329, 60, 165, currentBackdrop);
        block(-mapMove + 11279, 307, 60, 165, currentBackdrop);
        block(-mapMove + 11417, 281, 60, 165, currentBackdrop);
        block(-mapMove + 11578, 281, 60, 165, currentBackdrop);
        block(-mapMove + 11743, 244, 60, 165, currentBackdrop);
        block(-mapMove + 11904, 244, 60, 165, currentBackdrop);
        portal(-mapMove + 11902, 134, 62, 112, currentBackdrop);
        flagCheckpoint(-mapMove + 3983, 109, 11, 260, 0, currentBackdrop);
        flagCheckpoint(-mapMove + 9944, -62, 11, 260, 1, currentBackdrop);
        }
            break;
            
        case 17:
        level18: {
        
        messageSign(420, 101, 27, "Level Made By:\nFunkyChicken (@AFunkyChicken)");
        
        trampoline(-mapMove + 773, 370, 100, 12, 0, currentBackdrop);
        trampoline(-mapMove + 898, 318, 100, 12, 1, currentBackdrop);
        trampoline(-mapMove + 1046, 269, 100, 12, 2, currentBackdrop);
        
        
        trampoline(-mapMove + 4555, 378, 100, 12, 3, currentBackdrop);
        trampoline(-mapMove + 4781, 347, 100, 12, 4, currentBackdrop);
                
                //Pointless blocks           
        block(-mapMove + 797, 453, 50, 50, currentBackdrop);
        block(-mapMove + 924, 402, 48, 139, currentBackdrop);
        block(-mapMove + 1072, 351, 49, 172, currentBackdrop);
        block(-mapMove + 4580, 452, 50, 50, currentBackdrop);
        block(-mapMove + 4807, 422, 50, 106, currentBackdrop);
        
        //Starting blocks         
        block(-mapMove + 86, 264, 294, 15, currentBackdrop);
        block(-mapMove + 386, 294, 154, 15, currentBackdrop);
        block(-mapMove + 550, 318, 154, 15, currentBackdrop);
        
        
        //Gravity blocks
        
        block(-mapMove + 1307, 366, 96, 4, currentBackdrop);
        block(-mapMove + 1443, 179, 96, 4, currentBackdrop);
        block(-mapMove + 1558, 126, 96, 4, currentBackdrop);
        block(-mapMove + 1746, 162, 153, 4, currentBackdrop);
        block(-mapMove + 1906, 329, 50, 50, currentBackdrop);
        block(-mapMove + 1982, 190, 50, 50, currentBackdrop);
        block(-mapMove + 1906 + 170, 329, 50, 50, currentBackdrop);
        block(-mapMove + 1982 + 170, 190, 50, 50, currentBackdrop);
        block(-mapMove + 1906 + 340, 329, 50, 50, currentBackdrop);
        block(-mapMove + 1982 + 340, 190, 50, 50, currentBackdrop);
        
        block(-mapMove + 2454, 80, 232, 12, currentBackdrop);
        block(-mapMove + 2636, 100, 50, 50, currentBackdrop);
        block(-mapMove + 2613, 320, 232, 12, currentBackdrop);
        block(-mapMove + 2794, 263, 50, 50, currentBackdrop);
        block(-mapMove + 2690, 80, 405, 8, currentBackdrop);
        block(-mapMove + 2974, 95, 121, 50, currentBackdrop);
        block(-mapMove + 2914, 310, 474, 203, currentBackdrop);
        
        
        //Impossible blocks
        block(-mapMove + 3457, 271, 50, 50, currentBackdrop);
        block(-mapMove + 3647, 354, 50, 50, currentBackdrop);
        block(-mapMove + 3778, 354, 50, 50, currentBackdrop);
        block(-mapMove + 3924, 335, 50, 50, currentBackdrop);
        block(-mapMove + 4085, 321, 50, 50, currentBackdrop);
        block(-mapMove + 4433, 385, 50, 50, currentBackdrop);
        
        //Nexus blocks
        block(-mapMove + 6301, 326, 277, 14, currentBackdrop);
        block(-mapMove + 6613, 254, 50, 50, currentBackdrop);
        block(-mapMove + 6761, 313, 50, 50, currentBackdrop);
        block(-mapMove + 6887, 278, 50, 50, currentBackdrop);
        
        //Gravity Blocks 2
        block(-mapMove + 7207, 356, 228, 9, currentBackdrop);
        block(-mapMove + 7490, 209, 50, 4, currentBackdrop);
        block(-mapMove + 7658, 352, 50, 5, currentBackdrop);
        block(-mapMove + 7490 + 300, 209, 50, 4, currentBackdrop);
        block(-mapMove + 7658 + 300, 352, 50, 5, currentBackdrop);
        block(-mapMove + 7658 + 600, 352, 50, 5, currentBackdrop);
        
        ballonblockUP(-mapMove + 4233, 325, 50, 50, 0, 5, currentBackdrop);
        
        
        specialMachineBox(-mapMove + 1235, 152, 50, 50, 0, 503, 'gravity-guy', 0);
        specialMachineBox(-mapMove + 7185, 242, 50, 50, 2, 310, 'gravity-guy', 0);
        
        speedBlock(-mapMove + 4390, 303, 124, 50, currentBackdrop);
        speedBlock(-mapMove + 6970, 198, 124, 50, currentBackdrop);
        speedBlock(-mapMove + 7917, 273, 124, 50, currentBackdrop);
        
        specialMachineBox(-mapMove + 5068, 192, 50, 50, 1, 266, 'bird', 1);
        
        spike(-mapMove + 5242, 81, 30, currentBackdrop);
        spike(-mapMove + 5335, 303, 30, currentBackdrop);
        spike(-mapMove + 5447, 113, 30, currentBackdrop);
        spike(-mapMove + 5575, 264, 30, currentBackdrop);
        spike(-mapMove + 5718, 161, 30, currentBackdrop);
        spike(-mapMove + 5699, 358, 30, currentBackdrop);
        spike(-mapMove + 5623, 51, 30, currentBackdrop);
        
        spike(-mapMove + 5242 + 650, 81, 30, currentBackdrop);
        spike(-mapMove + 5335 + 650, 303, 30, currentBackdrop);
        spike(-mapMove + 5447 + 650, 113, 30, currentBackdrop);
        spike(-mapMove + 5575 + 650, 264, 30, currentBackdrop);
        spike(-mapMove + 5718 + 650, 161, 30, currentBackdrop);
        spike(-mapMove + 5699 + 650, 358, 30, currentBackdrop);
        spike(-mapMove + 5623 + 650, 51, 30, currentBackdrop);
        
        spike(-mapMove + 6653, 226, 30, currentBackdrop); 
        spike(-mapMove + 6930, 247, 30, currentBackdrop);
        
        block(-mapMove + 8439, 353, 513, 173, currentBackdrop);
        
        portal(-mapMove + 8864, 242, 62, 112, currentBackdrop);
        
        flagCheckpoint(-mapMove + 3340, 50, 11, 260, 0, currentBackdrop);
        flagCheckpoint(-mapMove + 6517, 66, 11, 260, 1, currentBackdrop);
        
        }
            break;
            
        case 18:
        level19: {
        messageSign(328, 170, 20, "Level Made By:\nThēphāntømprøgrāmmēr (@TPP13)");
        block(-mapMove + 84, 253, 330, 50, currentBackdrop);
        ballonblockUP(-mapMove + 424, 374, 164, 50, 1, 6, currentBackdrop);
        block(-mapMove + 627, 252, 500, 50, currentBackdrop);
        spike(-mapMove + 625, 222, 30, currentBackdrop);
        lavaBlock(-mapMove + 443, 135, 99, 30, currentBackdrop);
        lavaBlock(-mapMove + 443, 0, 178, 137, currentBackdrop);
        spike(-mapMove + 811, 219, 30, currentBackdrop);
        spike(-mapMove + 843, 219, 30, currentBackdrop);
        spike(-mapMove + 811, 90, 30, currentBackdrop);
        spike(-mapMove + 843, 90, 30, currentBackdrop);
        trampoline(-mapMove + 1060, 218, 100, 12, 1, currentBackdrop);
        block(-mapMove + 1314, 221, 25, 50, currentBackdrop);
        block(-mapMove + 1464, 221, 25, 50, currentBackdrop);
        block(-mapMove + 1624, 221, 25, 50, currentBackdrop);
        ballonblock(-mapMove + 1733, 231, 225, 50, 2, 10, currentBackdrop);
        ballonblockUP(-mapMove + 2007, 391, 225, 50, 3, 10, currentBackdrop);
        lavaBlock(-mapMove + 2087, 117, 213, 50, currentBackdrop);
        specialMachineBox(-mapMove + 2274, 308, 50, 50, 1, 300, 'bird', 0);
        block(-mapMove + 2431, -1, 50, 349, currentBackdrop);
        block(-mapMove + 2731, 175, 50, 349, currentBackdrop);
        block(-mapMove + 3031, -1, 50, 349, currentBackdrop);
        block(-mapMove + 3292, -1, 50, 236, currentBackdrop);
        block(-mapMove + 3292, 307, 50, 236, currentBackdrop);
        block(-mapMove + 3451, 345, 446, 50, currentBackdrop);
        spike(-mapMove + 3508, 318, 30, currentBackdrop);
        spike(-mapMove + 3648, 318, 30, currentBackdrop);
        spike(-mapMove + 3775, 318, 30, currentBackdrop);
        speedBlock(-mapMove + 3816, 297, 124, 50, currentBackdrop);
        specialMachineBox(-mapMove + 4004, 260, 50, 50, 2, 218, 'gravity-guy', 0);
        block(-mapMove + 4097, 363, 50, 50, currentBackdrop);
        block(-mapMove + 4365, 363, 50, 50, currentBackdrop);
        block(-mapMove + 4522, 165, 50, 50, currentBackdrop);
        block(-mapMove + 4836, 165, 50, 50, currentBackdrop);
        block(-mapMove + 4955, 387, 412, 50, currentBackdrop);
        spike(-mapMove + 5067, 359, 30, currentBackdrop);
        block(-mapMove + 5118, 329, 50, 50, currentBackdrop);
        spike(-mapMove + 5275, 358, 30, currentBackdrop);
        trampoline(-mapMove + 5368, 385, 100, 12, 2, currentBackdrop);
        speedBlock(-mapMove + 5360, 323, 124, 50, currentBackdrop);
        block(-mapMove + 5779, 370, 292, 50, currentBackdrop);
        ballonblock(-mapMove + 6117, 371, 292, 50, 3, 10, currentBackdrop);
        specialMachineBox(-mapMove + 6451, 315, 50, 50, 3, 200, 'bird', 0);
        block(-mapMove + 6673, -4, 50, 321, currentBackdrop);
        block(-mapMove + 6934, -1, 50, 236, currentBackdrop);
        block(-mapMove + 6934, 319, 50, 236, currentBackdrop);
        block(-mapMove + 7190, 238, 302, 50, currentBackdrop);
        block(-mapMove + 7190, 120, 249, 50, currentBackdrop);
        block(-mapMove + 7190, 294, 50, 236, currentBackdrop);
        block(-mapMove + 7190, -70, 50, 236, currentBackdrop);
        block(-mapMove + 7672, 347, 302, 50, currentBackdrop);
        spike(-mapMove + 7730, 318, 30, currentBackdrop);
        spike(-mapMove + 7912, 318, 30, currentBackdrop);
        block(-mapMove + 8010, 318, 5, 50, currentBackdrop);
        block(-mapMove + 8134, 318, 5, 50, currentBackdrop);
        block(-mapMove + 8266, 320, 5, 50, currentBackdrop);
        portal(-mapMove + 8460, 365, 62, 112, currentBackdrop);
        flagCheckpoint(-mapMove + 5141, 70, 11, 260, 0, currentBackdrop);
        }
            break;
            
        case 19:
        level20: {
            
        messageSign(450, 101, 27, "Level Made By ScusX (@GiantScus)");
        block(-mapMove + 96, 286, 294, 28, currentBackdrop);
        block(-mapMove + 430, 235, 15, 50, currentBackdrop);
        block(-mapMove + 570, 235, 15, 50, currentBackdrop);
        block(-mapMove + 710, 235, 15, 50, currentBackdrop);
        specialMachineBox(-mapMove + 765, 175, 50, 50, 0, 200, 'bird', 0);
        lavaBlock(-mapMove + 893, 374, 100, 136, currentBackdrop);
        lavaBlock(-mapMove + 893, -5, 100, 155, currentBackdrop);
        spike(-mapMove + 1222, 241, 30, currentBackdrop);
        spike(-mapMove + 1046, 288, 30, currentBackdrop);
        spike(-mapMove + 1137, 120, 30, currentBackdrop);
        spike(-mapMove + 1185, 428, 30, currentBackdrop);
        spike(-mapMove + 1352, 173, 30, currentBackdrop);
        spike(-mapMove + 1256, 24, 30, currentBackdrop);
        spike(-mapMove + 1345, 331, 30, currentBackdrop);
        spike(-mapMove + 1466, 39, 30, currentBackdrop);
        block(-mapMove + 1550, 232, 50, 268, currentBackdrop);
        block(-mapMove + 1690, 232, 50, 268, currentBackdrop);
        block(-mapMove + 1830, 232, 50, 268, currentBackdrop);
        block(-mapMove + 1952, 184, 174, 34, currentBackdrop);
        spike(-mapMove + 2088, 149, 30, currentBackdrop);
        ballonblockUP(-mapMove + 2194 - 20, 284, 139 + 20, 40, 0, 6, currentBackdrop);
        ballonblock(-mapMove + 2400, 86, 130, 40, 1, 3, currentBackdrop);
        ballonblock(-mapMove + 2550, 86, 130, 40, 2, 3, currentBackdrop);
        ballonblock(-mapMove + 2700, 86, 130, 40, 3, 10, currentBackdrop);
        trampoline(-mapMove + 2835, 408, 100, 12, 0, currentBackdrop);
        trampoline(-mapMove + 3925, 362, 100, 12, 1, currentBackdrop);
        block(-mapMove + 3057, 304, 140, 202, currentBackdrop);
        block(-mapMove + 3435, 304, 140, 202, currentBackdrop);
        block(-mapMove + 3650, 401, 400, 100, currentBackdrop);
        block(-mapMove + 3710, -4, 49, 272, currentBackdrop);
        speedBlock(-mapMove + 3061, 240, 124, 50, currentBackdrop);
        spike(-mapMove + 3840, 368, 30, currentBackdrop);
        block(-mapMove + 4171, 284, 103, 219, currentBackdrop);
        flagCheckpoint(-mapMove + 4190, 25, 11, 260, 0, currentBackdrop);
        block(-mapMove + 4350, 284, 22, 209, currentBackdrop);
        block(-mapMove + 4480, 284, 22, 209, currentBackdrop);
        block(-mapMove + 4602, 267, 98, 237, currentBackdrop);
        block(-mapMove + 4777, 221, 16, 51, currentBackdrop);
        block(-mapMove + 4889, 278, 16, 51, currentBackdrop);
        block(-mapMove + 5027, 279, 16, 51, currentBackdrop);
        ballonblock(-mapMove + 5139, 279, 100, 25, 4, 10, currentBackdrop);
        block(-mapMove + 5295, -4, 50, 300, currentBackdrop);
        block(-mapMove + 5295, 437, 210, 61, currentBackdrop);
        flagCheckpoint(-mapMove + 5403, 177, 11, 260, 1, currentBackdrop);
        block(-mapMove + 5607, 437, 206, 57, currentBackdrop);
        lavaBlock(-mapMove + 5507, 438, 99, 62, currentBackdrop);
        spike(-mapMove + 5699, 407, 30, currentBackdrop);
        trampoline(-mapMove + 5876, 414, 100, 12, 2, currentBackdrop);
        ballonblock(-mapMove + 6027, 306, 117, 19, 5, 4, currentBackdrop);
        ballonblockUP(-mapMove + 6189, 408, 181, 19, 6, 6, currentBackdrop);
        block(-mapMove + 6160, 2, 25, 292, currentBackdrop);
        block(-mapMove + 6398, 276, 15, 230, currentBackdrop);
        block(-mapMove + 6517, 276, 60, 230, currentBackdrop);
        lavaBlock(-mapMove + 6415, 279, 100, 226, currentBackdrop);
        spike(-mapMove + 6389, 245, 30, currentBackdrop);
        specialMachineBox(-mapMove + 6611, 201, 50, 50, 1, 140, 'emoji-box', 2);
        lavaBlock(-mapMove + 6900, 1, 250, 300, currentBackdrop);
        lavaBlock(-mapMove + 7463, 210, 600, 300, currentBackdrop);
        block(-mapMove + 6900, 1, 250, 300, currentBackdrop);
        block(-mapMove + 7463, 198, 600, 300, currentBackdrop);
        portal(-mapMove + 8000, 84, 62, 112, currentBackdrop);
        spike(-mapMove + 7873, 167, 30, currentBackdrop);
        spike(-mapMove + 7837, 167, 30, currentBackdrop);
        
        messageSign(7875, 101, 20, "I feel guilty\nabout this one", "EXTREME RAGE!!!");
        
        }
            break;
        
        case 20:
        level21: {
        
        block(-mapMove, 320, 302, 41, currentBackdrop);
        block(-mapMove + 419, 259 + 30, 40, 50, currentBackdrop);
        block(-mapMove + 566, 187 + 45, 40, 50, currentBackdrop);
        trampoline(-mapMove + 730, 234, 100, 12, 0, currentBackdrop);
        block(-mapMove + 743, 310, 78, 186, currentBackdrop);
        specialMachineBox(-mapMove + 944, 157, 50, 50, 0, 215, 'gravity-guy', 0);
        block(-mapMove + 948, 270, 218, 23, currentBackdrop);
        block(-mapMove + 1093, 51, 195, 23, currentBackdrop);
        block(-mapMove + 1238, 81, 50, 50, currentBackdrop);
        block(-mapMove + 1417, 152, 50, 50, currentBackdrop);
        block(-mapMove + 1551, 394, 50, 50, currentBackdrop);
        block(-mapMove + 1672, 151, 50, 50, currentBackdrop);
        block(-mapMove + 1834, 396, 50, 50, currentBackdrop);
        specialMachineBox(-mapMove + 1961, 282, 50, 50, 1, 165, 'emoji-box', 4);
        
        spike(-mapMove + 2146, 275, 30, currentBackdrop);
        spike(-mapMove + 2293, 224, 30, currentBackdrop);
        spike(-mapMove + 2291, 359, 30, currentBackdrop);
        lavaBlock(-mapMove + 2283, -21, 50, 224, currentBackdrop);
        lavaBlock(-mapMove + 2287, 414, 50, 224, currentBackdrop);
        lavaBlock(-mapMove + 2455, 194 - 100, 50 + 30, 224 + 100, currentBackdrop);
        lavaBlock(-mapMove + 2455, 60, 319, 36, currentBackdrop);
        lavaBlock(-mapMove + 2739, 94, 35, 258, currentBackdrop);
        lavaBlock(-mapMove + 2535, 310, 239, 108, currentBackdrop);
        lavaBlock(-mapMove + 2772, -18, 283, 33, currentBackdrop);
        lavaBlock(-mapMove + 2774, 133, 283, 46, currentBackdrop);
        lavaBlock(-mapMove + 2750, -4, 24, 68, currentBackdrop);
        lavaBlock(-mapMove + 3054, -4, 24, 183, currentBackdrop);
        lavaBlock(-mapMove + 3078, 105, 279, 34, currentBackdrop);
        specialMachineBox(-mapMove + 3548, 156, 50, 50, 2, 193, 'bird', 0);
        //spike(-mapMove + 3688, 313, 30, currentBackdrop);
        spike(-mapMove + 3738, 259, 30, currentBackdrop);
        spike(-mapMove + 3779, 187, 30, currentBackdrop);
        spike(-mapMove + 3813, 115, 30, currentBackdrop);
        spike(-mapMove + 3847, 47, 30, currentBackdrop);
        spike(-mapMove + 3878, -14, 30, currentBackdrop);
        spike(-mapMove + 3741, 456 + 50, 30, currentBackdrop);
        spike(-mapMove + 3801, 381 + 50, 30, currentBackdrop);
        spike(-mapMove + 3863, 314 + 50, 30, currentBackdrop);
        spike(-mapMove + 3923, 235 + 50, 30, currentBackdrop);
        spike(-mapMove + 3979, 165 + 50, 30, currentBackdrop);
        spike(-mapMove + 4028, 98 + 50, 30, currentBackdrop);
        spike(-mapMove + 4110, 67 + 50, 30, currentBackdrop);
        spike(-mapMove + 4239, -9, 30, currentBackdrop);
        spike(-mapMove + 4289, 48, 30, currentBackdrop);
        ballonblock(-mapMove + 4416, 342, 115, 31, 0, 4, currentBackdrop);
        ballonblock(-mapMove + 4592, 341, 115, 31, 1, 4, currentBackdrop);
        lavaBlock(-mapMove + 4413, 387, 295, 118, currentBackdrop);
        trampoline(-mapMove + 4776, 373, 100, 12, 1, currentBackdrop);
        flagCheckpoint(-mapMove + 5263, 22, 11, 260, 0, currentBackdrop);
        block(-mapMove + 4801, 439, 50, 77, currentBackdrop);
        block(-mapMove + 4932, 365, 50, 130, currentBackdrop);
        block(-mapMove + 5055, 317, 50, 197, currentBackdrop);
        block(-mapMove + 5198, 279, 50, 218, currentBackdrop);
        lavaBlock(-mapMove + 4853, 440, 398, 83, currentBackdrop);
        block(-mapMove + 5250, 279, 142, 32, currentBackdrop);
        speedBlock(-mapMove + 5265, 230, 124, 50, currentBackdrop);
        block(-mapMove + 5595, 412, 58, 123, currentBackdrop);
        lavaBlock(-mapMove + 5767, -11, 50, 367, currentBackdrop);
        block(-mapMove + 5655, 469, 233, 50, currentBackdrop);
        block(-mapMove + 6054, 414, 27, 131, currentBackdrop);
        block(-mapMove + 6213, 451, 27, 131, currentBackdrop);
        block(-mapMove + 6364, 449, 27, 131, currentBackdrop);
        ballonblockUP(-mapMove + 6468, 429, 240, 50, 5, 5, currentBackdrop);
        block(-mapMove + 6740, 201, 152, 18, currentBackdrop);
        block(-mapMove + 6907, 302, 152, 18, currentBackdrop);
        block(-mapMove + 7196, 299, 152, 18, currentBackdrop);
        block(-mapMove + 6896, 201, 8, 119, currentBackdrop);
        portal(-mapMove + 7288, 185, 62, 112, currentBackdrop);
        
        }
            break;
            
        case 21:
        level22: {
        messageSign(420, 101, 27, "Level Made By:\nFunkyChicken (@AFunkyChicken)");
        block(-mapMove - 30, 357, 373, 14, currentBackdrop);
        spike(-mapMove + 387, 314, 30, currentBackdrop);
        block(-mapMove + 433, 316, 50, 50, currentBackdrop);
        spike(-mapMove + 540, 290, 30, currentBackdrop);
        block(-mapMove + 587, 289, 50, 50, currentBackdrop);
        spike(-mapMove + 691, 268, 30, currentBackdrop);
        block(-mapMove + 733, 268, 50, 50, currentBackdrop);
        trampoline(-mapMove + 826, 250, 100, 12, 0, currentBackdrop);
        block(-mapMove + 851, 328, 49, 189, currentBackdrop);
        block(-mapMove + 1033, 328, 49, 189, currentBackdrop);
        block(-mapMove + 1192, 314, 49, 189, currentBackdrop);
        specialMachineBox(-mapMove + 1304, 219, 50, 50, 0, 309, 'bird', 0);
        spike(-mapMove + 1453, 65, 30, currentBackdrop);
        spike(-mapMove + 1540, 121, 30, currentBackdrop);
        spike(-mapMove + 1424, 349, 30, currentBackdrop);
        spike(-mapMove + 1651, 16, 30, currentBackdrop);
        spike(-mapMove + 1615, 277, 30, currentBackdrop);
        spike(-mapMove + 1594, 359, 30, currentBackdrop);
        spike(-mapMove + 1703, 97, 30, currentBackdrop);
        spike(-mapMove + 1764, 319, 30, currentBackdrop);
        spike(-mapMove + 1791, 110, 30, currentBackdrop);
        spike(-mapMove + 1784, 176, 30, currentBackdrop);
        block(-mapMove + 1992, 291, 51, 315, currentBackdrop);
        block(-mapMove + 2220, -3, 51, 315, currentBackdrop);
        block(-mapMove + 2511, 207, 51, 315, currentBackdrop);
        trampoline(-mapMove + 2609, 224, 100, 12, 3, currentBackdrop);
        block(-mapMove + 2634, 303, 50, 274, currentBackdrop);
        block(-mapMove + 2831, 256, 50, 274, currentBackdrop);
        speedBlock(-mapMove + 2918, 163, 124, 50, currentBackdrop);
        block(-mapMove + 3152, 312, 50, 50, currentBackdrop);
        block(-mapMove + 3467, 298, 50, 50, currentBackdrop);
        speedBlock(-mapMove + 3424, 232, 124, 50, currentBackdrop);
        block(-mapMove + 3756, 442, 183, 50, currentBackdrop);
        specialMachineBox(-mapMove + 3749, 372, 50, 50, 1, 270, 'gravity-guy', 1);
        block(-mapMove + 3968, 74, 627, 12, currentBackdrop);
        speedBlock(-mapMove + 4382, 94, 124, 50, currentBackdrop);
        block(-mapMove + 4645, 2, 50, 50, currentBackdrop);
        block(-mapMove + 4805, -25, 50, 50, currentBackdrop);
        block(-mapMove + 5171, -7, 50, 50, currentBackdrop);
        block(-mapMove + 5251, 285, 375, 25, currentBackdrop);
        lavaBlock(-mapMove + 5628, 297, 594, 246, currentBackdrop);
        lavaBlock(-mapMove + 6216, 297, 594, 246, currentBackdrop);
        block(-mapMove + 5577, 314, 50, 227, currentBackdrop);
        block(-mapMove + 6811, 296, 50, 227, currentBackdrop);
        block(-mapMove + 5718, 281, 50, 50, currentBackdrop);
        block(-mapMove + 5886, 281, 50, 50, currentBackdrop);
        spike(-mapMove + 5813, 252, 30, currentBackdrop);
        trampoline(-mapMove + 6008, 249, 100, 12, 4, currentBackdrop);
        block(-mapMove + 6179, 224, 50, 50, currentBackdrop);
        block(-mapMove + 6304, 188, 50, 50, currentBackdrop);
        block(-mapMove + 6436, 151, 50, 50, currentBackdrop);
        trampoline(-mapMove + 6613, 223, 100, 12, 5, currentBackdrop);
        block(-mapMove + 6862, 296, 50, 50, currentBackdrop);
        block(-mapMove + 7022, 379, 50, 50, currentBackdrop);
        block(-mapMove + 7153, 346, 50, 50, currentBackdrop);
        block(-mapMove + 7293, 317, 50, 50, currentBackdrop);
        block(-mapMove + 7446, 381, 50, 50, currentBackdrop);
        specialMachineBox(-mapMove + 7538, 301, 50, 50, 2, 421, 'bird', 0);
        block(-mapMove + 7695, 78, 50, 50, currentBackdrop);
        block(-mapMove + 7850, 293, 50, 50, currentBackdrop);
        block(-mapMove + 8019, 40, 50, 50, currentBackdrop);
        block(-mapMove + 8146, 208, 50, 50, currentBackdrop);
        block(-mapMove + 8206, 381, 50, 50, currentBackdrop);  
        spike(-mapMove + 7794, 311, 30, currentBackdrop);
        spike(-mapMove + 7876, 134, 30, currentBackdrop);
        spike(-mapMove + 8073, 348, 30, currentBackdrop);
        spike(-mapMove + 8242, 70, 30, currentBackdrop);
        
        block(-mapMove + 7695 + 600, 78, 50, 50, currentBackdrop);
        block(-mapMove + 7850 + 600, 293, 50, 50, currentBackdrop);
        block(-mapMove + 8019 + 600, 40, 50, 50, currentBackdrop);
        block(-mapMove + 8146 + 600, 208, 50, 50, currentBackdrop);
        block(-mapMove + 8206 + 600, 381, 50, 50, currentBackdrop);  
        spike(-mapMove + 7794 + 600, 311, 30, currentBackdrop);
        spike(-mapMove + 7876 + 600, 134, 30, currentBackdrop);
        spike(-mapMove + 8073 + 600, 348, 30, currentBackdrop);
        spike(-mapMove + 8242, 70, 30, currentBackdrop);
        
        block(-mapMove + 8981, 67, 601, 6, currentBackdrop);
        spike(-mapMove + 9188, 52, 30, currentBackdrop);
        spike(-mapMove + 9398, 52, 30, currentBackdrop);
        
        ballonblockUP(-mapMove + 9660, 185, 309, 15, 0, 1, currentBackdrop);
        ballonblockUP(-mapMove + 9987, 284, 309, 15, 1, 1, currentBackdrop);
        spike(-mapMove + 9811, 127, 30, currentBackdrop);
        spike(-mapMove + 10005, 141, 30, currentBackdrop);
        trampoline(-mapMove + 10422, 383, 100, 12, 6, currentBackdrop);
        block(-mapMove + 10446, 457, 50, 50, currentBackdrop);
        block(-mapMove + 10644, 367, 50, 50, currentBackdrop);
        block(-mapMove + 10763, 345, 277, 14, currentBackdrop);
        spike(-mapMove + 10855, 319, 30, currentBackdrop);
        spike(-mapMove + 11002, 319, 30, currentBackdrop);
        block(-mapMove + 11087, 393, 50, 50, currentBackdrop);
        block(-mapMove + 11214, 247, 50, 50, currentBackdrop);
        block(-mapMove + 11194, 498, 600, 50, currentBackdrop);
        portal(-mapMove + 11807, 393, 62, 112, currentBackdrop);
        flagCheckpoint(-mapMove + 5583, 25, 11, 260, 0, currentBackdrop);
        }
            break;
        
        case 22:
        level23: {
            
        flagCheckpoint(-mapMove + 4078, 29, 11, 260, 0, currentBackdrop);
        flagCheckpoint(-mapMove + 6883, 94, 11, 260, 2, currentBackdrop);
        block(-mapMove + 81, 308, 307, 27, currentBackdrop);
        specialMachineBox(-mapMove + 294, 256, 50, 50, 0, 250, 'gravity-guy', 0);
        block(-mapMove + 389, 168, 267, 26, currentBackdrop);
        block(-mapMove + 624, 319, 267, 26, currentBackdrop);
        speedBlock(-mapMove + 320, 252, 124, 50, currentBackdrop);
        lavaBlock(-mapMove + 1440, 81, 161, 66, currentBackdrop);
        block(-mapMove + 1085, 266, 50, 50, currentBackdrop);
        block(-mapMove + 1241, 68, 497, 50, currentBackdrop);
        speedBlock(-mapMove + 694, 264, 124, 50, currentBackdrop);
        speedBlock(-mapMove + 1467, 192, 124, 50, currentBackdrop);
        specialMachineBox(-mapMove + 1920, 130, 50, 50, 1, 250, 'bird', 0);
        lavaBlock(-mapMove + 1741, 465, 291, 50, currentBackdrop);
        spike(-mapMove + 1996, 44, 30, currentBackdrop);
        spike(-mapMove + 2099, 305, 30, currentBackdrop);
        lavaBlock(-mapMove + 2243, 322, 158, 197, currentBackdrop);
        lavaBlock(-mapMove + 2400, 287, 158, 220, currentBackdrop);
        lavaBlock(-mapMove + 2558, 328, 158, 220, currentBackdrop);
        lavaBlock(-mapMove + 2236, -11, 220, 190, currentBackdrop);
        lavaBlock(-mapMove + 2601, 118, 261, 63, currentBackdrop);
        lavaBlock(-mapMove + 3213, 257, 50, 30, currentBackdrop);
        lavaBlock(-mapMove + 3696, 257, 50, 30, currentBackdrop);
        lavaBlock(-mapMove + 3466, 253, 50, 30, currentBackdrop);
        lavaBlock(-mapMove + 3354, 167, 14, 40, currentBackdrop);
        lavaBlock(-mapMove + 3119, 167, 14, 40, currentBackdrop);
        block(-mapMove + 2716, 325, 196, 176, currentBackdrop);
        block(-mapMove + 2862, -3, 196, 176, currentBackdrop);
        block(-mapMove + 2987, 267, 275, 29, currentBackdrop);
        spike(-mapMove + 2976, 236, 30, currentBackdrop);
        flagCheckpoint(-mapMove + 2773, 65, 11, 260, 1, currentBackdrop);
        block(-mapMove + 2991, 428, 133, 69, currentBackdrop);
        block(-mapMove + 3082, 157, 481, 31, currentBackdrop);
        block(-mapMove + 3265, 257, 481, 31, currentBackdrop);
        specialMachineBox(-mapMove + 2828, 252, 50, 50, 2, 250, 'gravity-guy', 0);
        block(-mapMove + 3748, 83, 232, 204, currentBackdrop);
        block(-mapMove + 3592, -21, 280, 33, currentBackdrop);
        block(-mapMove + 1775, 264, 112, 27, currentBackdrop);
    
        var KonurBX = 3865;
        var KonurBY = -33;
        
        block(-mapMove + KonurBX, 320 + KonurBY, 302, 200, currentBackdrop);
        ballonblock(-mapMove + 306 + KonurBX, 331 + KonurBY, 50, 50, 0, 5, currentBackdrop);
        ballonblockUP(-mapMove + 366 + KonurBX, 342 + KonurBY, 50, 50, 1, 5, currentBackdrop);
        ballonblockUP(-mapMove + 426 + KonurBX, 322 + KonurBY, 50, 50, 2, 5, currentBackdrop);
        ballonblock(-mapMove + 487 + KonurBX, 332 + KonurBY, 50, 50, 3, 5, currentBackdrop);
        ballonblock(-mapMove + 548 + KonurBX, 344 + KonurBY, 50, 50, 4, 5, currentBackdrop);
        ballonblockUP(-mapMove + 608 + KonurBX, 358 + KonurBY, 50, 50, 5, 5, currentBackdrop);
        ballonblockUP(-mapMove + 665 + KonurBX, 348 + KonurBY, 50, 50, 6, 5, currentBackdrop);
        ballonblockUP(-mapMove + 725 + KonurBX, 324 + KonurBY, 50, 50, 7, 5, currentBackdrop);
        ballonblock(-mapMove + 787 + KonurBX, 317 + KonurBY, 50, 50, 8, 5, currentBackdrop);
        ballonblock(-mapMove + 850 + KonurBX, 311 + KonurBY, 50, 50, 9, 5, currentBackdrop);
        ballonblockUP(-mapMove + 911 + KonurBX, 285 + KonurBY, 50, 50, 10, 5, currentBackdrop);
        ballonblock(-mapMove + 971 + KonurBX, 333 + KonurBY, 50, 50, 11, 5, currentBackdrop);
        trampoline(-mapMove + 1343 + KonurBX, 269 + KonurBY, 100, 12, 2, currentBackdrop);
        block(-mapMove + 1036 + KonurBX, 325 + KonurBY, 200, 209, currentBackdrop);
        block(-mapMove + 1240 + KonurBX, 348 + KonurBY, 200, 183, currentBackdrop);
        block(-mapMove + 1584 + KonurBX, 447 + KonurBY, 50, 95, currentBackdrop);
        block(-mapMove + 1676 + KonurBX, 404 + KonurBY, 50, 190, currentBackdrop);
        ballonblockUP(-mapMove + 1793 + KonurBX, 370 + KonurBY, 87, 30, 12, 4, currentBackdrop);
        block(-mapMove + 1960 + KonurBX, 244 + KonurBY, 50, 282, currentBackdrop);
        specialMachineBox(-mapMove + 5944, 135, 50, 50, 3, 241, 'bird', 0);
        var personlisedSpikeScus = 5014;
            
        spike(-mapMove + 1203 + personlisedSpikeScus, 241, 30, currentBackdrop);
        spike(-mapMove + 1086 + personlisedSpikeScus, 288, 30, currentBackdrop);
        spike(-mapMove + 1126 + personlisedSpikeScus, 120, 30, currentBackdrop);
        spike(-mapMove + 1161 + personlisedSpikeScus, 368, 30, currentBackdrop);
        spike(-mapMove + 1089 + personlisedSpikeScus, 449, 30, currentBackdrop);
        spike(-mapMove + 1314 + personlisedSpikeScus, 164, 30, currentBackdrop);
        spike(-mapMove + 1240 + personlisedSpikeScus, 24, 30, currentBackdrop);
        spike(-mapMove + 1435 + personlisedSpikeScus, 218, 30, currentBackdrop);
        spike(-mapMove + 1414 + personlisedSpikeScus, 39, 30, currentBackdrop);
        lavaBlock(-mapMove + 6662, -16, 50, 378, currentBackdrop);
        lavaBlock(-mapMove + 6839, 272 + 130, 50, 256, currentBackdrop);
        block(-mapMove + 6839, 223 + 130, 53, 47, currentBackdrop);
        block(-mapMove + 6976, 409, 26, 100, currentBackdrop);
        block(-mapMove + 7084, 351, 50, 200, currentBackdrop);
        block(-mapMove + 6976 + 230, 409, 26, 100, currentBackdrop);
        block(-mapMove + 7084 + 230, 351, 50, 200, currentBackdrop);
        block(-mapMove + 7470, 286, 50, 300, currentBackdrop);
        block(-mapMove + 7621, 220, 50, 300, currentBackdrop);
        block(-mapMove + 7766, 279, 26, 300, currentBackdrop);
        block(-mapMove + 7878, 225, 50, 300, currentBackdrop);
        block(-mapMove + 8092, 224, 50, 300, currentBackdrop);
        block(-mapMove + 8092 + 214, 224, 50, 300, currentBackdrop);
        block(-mapMove + 8092 + (214 * 2), 224, 274, 300, currentBackdrop);
        spike(-mapMove + 8604, 194, 30, currentBackdrop);
        portal(-mapMove + 8732, 113, 62, 112, currentBackdrop);
            
        }
            break;
            
        case 23:
        level24: {
        messageSign(2500, 270, 22, "Feeling claustrophobic yet?");
        block(-mapMove + 4, 295, 458, 33, currentBackdrop);
        spike(-mapMove + 206 + 170, 264, 30, currentBackdrop);
        spike(-mapMove + 232 + 170, 264, 30, currentBackdrop);
        block(-mapMove + 442, 237, 20, 50, currentBackdrop);
        block(-mapMove + 442, 237, 157, 11, currentBackdrop);
        speedBlock(-mapMove + 475, 187, 124, 50, currentBackdrop);
        block(-mapMove + 893, 237, 13, 10, currentBackdrop);
        block(-mapMove + 1210, 242, 13, 10, currentBackdrop);
        specialMachineBox(-mapMove + 1410, 235, 50, 50, 0, 137, 'gravity-guy', 0);
        block(-mapMove + 1504 - 15, 372, 113 + 15, 7, currentBackdrop);
        block(-mapMove + 1667, 118, 28, 7, currentBackdrop);
        block(-mapMove + 1809, 188, 13, 7, currentBackdrop);
        block(-mapMove + 1916, 149, 13, 7, currentBackdrop);
        specialMachineBox(-mapMove + 2000, 295, 50, 50, 1, 376, 'bird', 0);
        lavaBlock(-mapMove + 2169, 344, 257, 153, currentBackdrop);
        lavaBlock(-mapMove + 2173, -16, 253, 222, currentBackdrop);
        lavaBlock(-mapMove + 2402, -16, 253, 249, currentBackdrop);
        lavaBlock(-mapMove + 2424, 354, 357, 249, currentBackdrop);
        lavaBlock(-mapMove + 2775, 245, 357, 297, currentBackdrop);
        lavaBlock(-mapMove + 2652, -23, 485, 130, currentBackdrop);
        lavaBlock(-mapMove + 3249, 157, 50, 67, currentBackdrop);
        lavaBlock(-mapMove + 3135, -6, 291, 35, currentBackdrop);
        lavaBlock(-mapMove + 3125, 217, 291, 301, currentBackdrop);
        lavaBlock(-mapMove + 3423, -9, 45, 89, currentBackdrop);
        flagCheckpoint(-mapMove + 3561, -29, 11, 260, 0, currentBackdrop);
        block(-mapMove + 3517, 222, 140, 7, currentBackdrop);
        block(-mapMove + 3802, 224, 92, 281, currentBackdrop);
        lavaBlock(-mapMove + 4184, 252, 39, 50, currentBackdrop);
        lavaBlock(-mapMove + 4231, -10, 50, 244, currentBackdrop);
        block(-mapMove + 3987 + 40, 222, 298, 50, currentBackdrop);
        block(-mapMove + 3892, 464, 240, 50, currentBackdrop);
        specialMachineBox(-mapMove + 4043, 406, 50, 50, 2, 371, 'gravity-guy', 0); 
        block(-mapMove + 4335, 358, 65, 8, currentBackdrop);
        block(-mapMove + 4436, 157, 57, 8, currentBackdrop);
        block(-mapMove + 4556, 272, 57, 8, currentBackdrop);
        block(-mapMove + 4673, 82, 57, 8, currentBackdrop);
        block(-mapMove + 4795 - 10, 198, 189 + 10, 8, currentBackdrop);
        spike(-mapMove + 4872, 167, 30, currentBackdrop);
        lavaBlock(-mapMove + 4333, 371, 69, 22, currentBackdrop);
        lavaBlock(-mapMove + 4434, 136, 61, 22, currentBackdrop);
        lavaBlock(-mapMove + 4554, 285, 61, 22, currentBackdrop);
        lavaBlock(-mapMove + 4671, 60, 61, 22, currentBackdrop);
        lavaBlock(-mapMove + 4793 - 10, 210, 193 + 10, 22, currentBackdrop);
        block(-mapMove + 4988, 3, 148, 20, currentBackdrop);
        lavaBlock(-mapMove + 4988, 3, 148, 10, currentBackdrop);
        block(-mapMove + 5242, 0, 72, 72, currentBackdrop);
        portal(-mapMove + 5347, 207, 62, 112, currentBackdrop);
        
        }
            break;
            
        case 24:
        level25: {
        messageSign(400, 101, 27, "Stereo Madness Rip Off! xD");
        flagCheckpoint(-mapMove + 8110, -25, 11, 260, 1, currentBackdrop);
        block(-mapMove - 30, 357, 1573, 14, currentBackdrop);
        spike(-mapMove + 361, 325, 30, currentBackdrop);
        spike(-mapMove + 510, 325, 30, currentBackdrop);
        spike(-mapMove + 541, 325, 30, currentBackdrop);
        spike(-mapMove + 689, 326, 30, currentBackdrop);
        spike(-mapMove + 732, 326, 30, currentBackdrop);
        block(-mapMove + 770, 324, 28, 25, currentBackdrop);
        block(-mapMove + 881, 286, 28, 63, currentBackdrop);
        block(-mapMove + 1004, 254, 28, 96, currentBackdrop);
        lavaBlock(-mapMove + 1034, 293, 230, 66, currentBackdrop);
        ballonblock(-mapMove + 1128, 279, 50, 15, 0, 3, currentBackdrop);
        spike(-mapMove + 1383, 327, 30, currentBackdrop);
        block(-mapMove + 1521 + 25, 322, 137 - 25, 49, currentBackdrop);
        block(-mapMove + 1521 + 280, 322, 162, 49, currentBackdrop);
        spike(-mapMove + 1860, 292, 30, currentBackdrop);
        block(-mapMove + 2074, 287, 200, 50, currentBackdrop);
        spike(-mapMove + 2156, 257, 30, currentBackdrop);
        block(-mapMove + 2361, 240, 45, 16, currentBackdrop);
        block(-mapMove + 2515, 178, 45, 16, currentBackdrop);
        block(-mapMove + 2667, 131, 45, 16, currentBackdrop);
        block(-mapMove + 2851, 88, 45, 16, currentBackdrop);
        block(-mapMove + 2968, 160, 45, 16, currentBackdrop);
        block(-mapMove + 3072, 238, 45, 16, currentBackdrop);
        lavaBlock(-mapMove + 3277, 263, 150, 64, currentBackdrop);
        lavaBlock(-mapMove + 3277 + 300, 263, 150, 64, currentBackdrop);
        block(-mapMove + 3168, 318, 662, 95, currentBackdrop);
        block(-mapMove + 3328, 247, 41, 9, currentBackdrop);
        block(-mapMove + 3328 + 300, 247, 41, 9, currentBackdrop);
        lavaBlock(-mapMove + 4223, -19, 49, 351, currentBackdrop);
        block(-mapMove + 3944, 315, 326, 9, currentBackdrop);
        block(-mapMove + 3833, 404, 545, 9, currentBackdrop);
        block(-mapMove + 4382, 334, 93, 79, currentBackdrop);
        spike(-mapMove + 4446, 305, 30, currentBackdrop);
        block(-mapMove + 4478, 395, 172, 18, currentBackdrop);
        spike(-mapMove + 4476, 365, 30, currentBackdrop);
        spike(-mapMove + 4506, 365, 30, currentBackdrop);
        block(-mapMove + 4801, 388, 106, 1, currentBackdrop);
        spike(-mapMove + 4880, 357, 30, currentBackdrop);
        block(-mapMove + 4994, 436, 94, 2, currentBackdrop);
        spike(-mapMove + 5063, 406, 30, currentBackdrop);
        block(-mapMove + 5151, 385, 50, 3, currentBackdrop);
        block(-mapMove + 5314, 335, 50, 3, currentBackdrop);
        block(-mapMove + 5476, 287, 50, 3, currentBackdrop);
        block(-mapMove + 5668, 243, 163, 3, currentBackdrop);
        spike(-mapMove + 5801 + 165, 212, 30, currentBackdrop);
        spike(-mapMove + 5799 + 165, 191, 30, currentBackdrop);
        spike(-mapMove + 5799 + 165, 167, 30, currentBackdrop);
        block(-mapMove + 5580, 401, 507, 121, currentBackdrop);
        block(-mapMove + 5830, 243, 255, 44, currentBackdrop);
        block(-mapMove + 6002, -7, 83, 244, currentBackdrop);
        specialMachineBox(-mapMove + 6051, 323, 50, 50, 0, 234, 'bird', 0);
        lavaBlock(-mapMove + 6087, -3, 724, 122, currentBackdrop);
        lavaBlock(-mapMove + 6089, 440, 724, 122, currentBackdrop);
        lavaBlock(-mapMove + 6242, 252, 57, 189, currentBackdrop);
        lavaBlock(-mapMove + 6494, 113, 57, 206, currentBackdrop);
        lavaBlock(-mapMove + 6800, 117, 10, 120, currentBackdrop);
        lavaBlock(-mapMove + 6743, 233, 67, 90, currentBackdrop);
        spike(-mapMove + 6865, 406, 30, currentBackdrop);
        spike(-mapMove + 6939, 352, 30, currentBackdrop);
        block(-mapMove + 7027, 316, 135, 208, currentBackdrop);
        block(-mapMove + 7271, 249, 48, 271, currentBackdrop);
        block(-mapMove + 7430, 195, 48, 303, currentBackdrop);
        lavaBlock(-mapMove + 7869, -3, 17, 134, currentBackdrop);
        block(-mapMove + 7605, 131, 279, 96, currentBackdrop);
        block(-mapMove + 7481, 339, 533, 50, currentBackdrop);
        spike(-mapMove + 7665, 309, 30, currentBackdrop);
        spike(-mapMove + 7816, 310, 30, currentBackdrop);
        block(-mapMove + 8016, 287, 50, 102, currentBackdrop);
        block(-mapMove + 8070, 232, 50, 157, currentBackdrop);
        
        spike(-mapMove + 8055, 258, 30, currentBackdrop);
        spike(-mapMove + 8002, 310, 30, currentBackdrop);
        block(-mapMove + 8231, 176, 50, 20, currentBackdrop);
        block(-mapMove + 8342, 258, 50, 20, currentBackdrop);
        block(-mapMove + 8523, 260, 50, 20, currentBackdrop);
        block(-mapMove + 8646, 330, 50, 20, currentBackdrop);
        block(-mapMove + 8830, 328, 50, 20, currentBackdrop);
        block(-mapMove + 9016, 327, 50, 20, currentBackdrop);
        block(-mapMove + 9195, 327, 451, 20, currentBackdrop);
        block(-mapMove + 9200, -13, 448, 145, currentBackdrop);
        lavaBlock(-mapMove + 9198, 137, 452, 26, currentBackdrop);
        lavaBlock(-mapMove + 9287, 279, 23, 50, currentBackdrop);
        lavaBlock(-mapMove + 9287, 138, 23, 40, currentBackdrop);
        lavaBlock(-mapMove + 9407, 136, 23, 112, currentBackdrop);
        lavaBlock(-mapMove + 9287 + 230, 279, 23, 50, currentBackdrop);
        lavaBlock(-mapMove + 9287 + 230, 138, 23, 40, currentBackdrop);
        block(-mapMove + 9780, 325, 50, 14, currentBackdrop);
        block(-mapMove + 9966, 323, 545, 194, currentBackdrop);
        block(-mapMove + 9966, -23, 545, 186, currentBackdrop);
        specialMachineBox(-mapMove + 9969, 271, 50, 50, 1, 255, 'gravity-guy', 0);
        lavaBlock(-mapMove + 10092, 294, 31, 30, currentBackdrop);
        lavaBlock(-mapMove + 10179, 167, 31, 30, currentBackdrop);
        lavaBlock(-mapMove + 10265, 295, 31, 30, currentBackdrop);
        lavaBlock(-mapMove + 10369, 168, 144, 30, currentBackdrop);
        block(-mapMove + 10433, 197, 224, 15, currentBackdrop);
        block(-mapMove + 10644, 281, 122, 15, currentBackdrop);
        block(-mapMove + 10756, 139, 253, 15, currentBackdrop);
        block(-mapMove + 10913, 214 - 55, 96, 16 + 55, currentBackdrop);
        block(-mapMove + 10977, 356, 237, 44, currentBackdrop);
        spike(-mapMove + 11090, 325, 30, currentBackdrop);
        block(-mapMove + 11341, 353, 197, 146, currentBackdrop);
        portal(-mapMove + 11478, 241, 62, 112, currentBackdrop);
        flagCheckpoint(-mapMove + 5517, 27, 11, 260, 0, currentBackdrop);
        }
            break;
        
        case 25:
        level26: {
        messageSign(420, 101, 27, "Level Made By:\nFunkyChicken (@AFunkyChicken)");
        block(-mapMove + 86, 301, 482, 23, currentBackdrop);
        block(-mapMove + 631, 225, 50, 50, currentBackdrop);
        specialMachineBox(-mapMove + 739, 132, 50, 50, 0, 157, 'emoji-box', 4);
        block(-mapMove + 912, 0, 77, 545, currentBackdrop);
        block(-mapMove + 1176, -3, 77, 545, currentBackdrop);
        block(-mapMove + 1446, -5, 77, 545, currentBackdrop);
        block(-mapMove + 1705, -5, 77, 545, currentBackdrop);
        block(-mapMove + 1953, 239, 109, 300, currentBackdrop);
        block(-mapMove + 2065, 239, 449, 6, currentBackdrop);
        block(-mapMove + 2631, 266, 50, 50, currentBackdrop);
        block(-mapMove + 2752, 220, 50, 50, currentBackdrop);
        block(-mapMove + 2913, 285, 50, 50, currentBackdrop);
        block(-mapMove + 3048, 242, 50, 50, currentBackdrop);
        trampoline(-mapMove + 3151, 211, 100, 12, 0, currentBackdrop);
        specialMachineBox(-mapMove + 3307, 100, 50, 50, 1, 189, 'bird', 0);
        block(-mapMove + 3177, 292, 51, 271, currentBackdrop);
        spike(-mapMove + 3436, 10, 30, currentBackdrop);
        spike(-mapMove + 3560, 242, 30, currentBackdrop);
        spike(-mapMove + 3407, 266, 30, currentBackdrop);
        spike(-mapMove + 3577, 42, 30, currentBackdrop);
        spike(-mapMove + 3589, 392, 30, currentBackdrop);
        spike(-mapMove + 3739, 189, 60, currentBackdrop);
        spike(-mapMove + 3680, 315, 40, currentBackdrop);
        spike(-mapMove + 3469, 156, 30, currentBackdrop);
        spike(-mapMove + 3863, 303, 30, currentBackdrop);
        spike(-mapMove + 3961, 382, 70, currentBackdrop);
        spike(-mapMove + 3928, 30, 40, currentBackdrop);
        spike(-mapMove + 3999, 112, 30, currentBackdrop);
        spike(-mapMove + 4101, 26, 30, currentBackdrop);
        block(-mapMove + 4046, 358, 321, 10, currentBackdrop);
        block(-mapMove + 4372, 128, 130, 10, currentBackdrop);
        specialMachineBox(-mapMove + 4212, 288, 50, 50, 2, 414, 'gravity-guy', 5);
        block(-mapMove + 4530, 357, 50, 50, currentBackdrop);
        block(-mapMove + 4582, 239, 50, 50, currentBackdrop);
        block(-mapMove + 4673, 155, 50, 50, currentBackdrop);
        block(-mapMove + 4768, 64, 50, 50, currentBackdrop);
        block(-mapMove + 4848, 244, 50, 50, currentBackdrop);
        block(-mapMove + 4951, 314, 50, 50, currentBackdrop);
        trampoline(-mapMove + 5065, 368, 100, 12, 2, currentBackdrop);
        block(-mapMove + 5091, 448, 50, 50, currentBackdrop);
        block(-mapMove + 5185, 366, 50, 50, currentBackdrop);
        block(-mapMove + 5242, 218, 169, 16, currentBackdrop);
        block(-mapMove + 5391, 391, 410, 16, currentBackdrop);
        block(-mapMove + 5412, 218, 387, 16, currentBackdrop);
        spike(-mapMove + 5542, 362, 30, currentBackdrop);
        lavaBlock(-mapMove + 5443, 239, 53, 60, currentBackdrop);
        lavaBlock(-mapMove + 5666, 239, 53, 60, currentBackdrop);
        block(-mapMove + 5871, 418, 50, 50, currentBackdrop);
        block(-mapMove + 5997, 418, 50, 50, currentBackdrop);
        block(-mapMove + 6116, 418, 50, 50, currentBackdrop);
        block(-mapMove + 6199, 394, 247, 10, currentBackdrop);
        block(-mapMove + 6474, 345, 247, 10, currentBackdrop);
        block(-mapMove + 6756, 309, 247, 10, currentBackdrop);
       
        spike(-mapMove + 6574, 316, 30, currentBackdrop);
        spike(-mapMove + 6973, 283, 30, currentBackdrop);
        trampoline(-mapMove + 7049, 323, 100, 12, 8, currentBackdrop);
        block(-mapMove + 7076, 407, 50, 154, currentBackdrop);
        speedBlock(-mapMove + 7036, 256, 124, 50, currentBackdrop);
        block(-mapMove + 7227, 322, 740, 19, currentBackdrop);
        spike(-mapMove + 7501, 293, 30, currentBackdrop);
        block(-mapMove + 8056, 282, 50, 50, currentBackdrop);
        block(-mapMove + 8177, 242, 50, 50, currentBackdrop);
        block(-mapMove + 8310, 242, 50, 50, currentBackdrop);
        block(-mapMove + 8458, 312, 50, 50, currentBackdrop);
        ballonblock(-mapMove + 8574, 278, 127, 22, 11, -2, currentBackdrop);
        block(-mapMove + 8759, 340, 409, 20, currentBackdrop);
        spike(-mapMove + 9005, 311, 30, currentBackdrop);
        block(-mapMove + 9171, 310, 628, 50, currentBackdrop);
        block(-mapMove + 9158, -5, 628, 50, currentBackdrop);
        block(-mapMove + 9305, 253, 546, 50, currentBackdrop);
        spike(-mapMove + 9548, 228, 30, currentBackdrop);
        spike(-mapMove + 9688, 228, 30, currentBackdrop);
        spike(-mapMove + 9820, 225, 30, currentBackdrop);
        block(-mapMove + 9892, 345, 369, 17, currentBackdrop);
        block(-mapMove + 10290, 297, 369, 17, currentBackdrop);
        block(-mapMove + 10679, 249, 369, 17, currentBackdrop);
        block(-mapMove + 11143, 218, 50, 50, currentBackdrop);
        block(-mapMove + 11269, 185, 50, 50, currentBackdrop);
        block(-mapMove + 11414, 183, 50, 50, currentBackdrop);
        block(-mapMove + 11590, 263, 50, 50, currentBackdrop);
        block(-mapMove + 11721, 229, 50, 50, currentBackdrop);
        block(-mapMove + 11875, 229, 50, 50, currentBackdrop);
        block(-mapMove + 12026, 191, 50, 50, currentBackdrop);
        block(-mapMove + 12194, 191, 715, 322, currentBackdrop);
        portal(-mapMove + 12844, 79, 62, 112, currentBackdrop);
        spike(-mapMove + 10833, 220, 30, currentBackdrop);
        spike(-mapMove + 10442, 270, 30, currentBackdrop);
        spike(-mapMove + 10044, 317, 30, currentBackdrop);
        flagCheckpoint(-mapMove + 4164, 98, 11, 260, 0, currentBackdrop);
        spike(-mapMove + 12280, 159, 30, currentBackdrop);
        spike(-mapMove + 12466, 159, 30, currentBackdrop);
        spike(-mapMove + 12655, 159, 30, currentBackdrop);
        
        }
            break;
            
        case 26:
        level27: {
        block(-mapMove + 96, 286, 393, 100, currentBackdrop);
        
        specialMachineBox(-mapMove + 388, 217, 50, 50, 0, 600, 'gravity-guy', 0);
        lavaBlock(-mapMove + 1463, 33, 35, 56, currentBackdrop);
        lavaBlock(-mapMove + 1309, 35, 35, 56, currentBackdrop);
        lavaBlock(-mapMove + 540, 25, 50, 50, currentBackdrop);
        block(-mapMove + 424, -20, 1220, 62, currentBackdrop);
        block(-mapMove + 760, 29, 50, 67, currentBackdrop);
        block(-mapMove + 905, 40, 50, 133, currentBackdrop);
        block(-mapMove + 1059, 40, 50, 203, currentBackdrop);
        lavaBlock(-mapMove + 1238, 246, 338, 50, currentBackdrop);
        block(-mapMove + 1238 - 20, 243, 136, 50, currentBackdrop);
        block(-mapMove + 1577, 240, 327, 50, currentBackdrop);
        spike(-mapMove + 1716 + 5, 210, 30, currentBackdrop);
        lavaBlock(-mapMove + 2143 + 10, 67, 33 - 10, 36, currentBackdrop);
        block(-mapMove + 1875, 59, 299, 11, currentBackdrop);
        speedBlock(-mapMove + 1994, 78, 124, 50, currentBackdrop);
        block(-mapMove + 2396, 58, 102, 15, currentBackdrop);
        lavaBlock(-mapMove + 2770, 156, 13, 36, currentBackdrop);
        block(-mapMove + 2679, 153, 102, 15, currentBackdrop);
        block(-mapMove + 2946, 247, 122, 15, currentBackdrop);
        specialMachineBox(-mapMove + 3019, 285, 50, 50, 1, 158, 'bird', 0);
        lavaBlock(-mapMove + 3180, 322, 50, 225, currentBackdrop);
        lavaBlock(-mapMove + 3229, 271, 50, 280, currentBackdrop);
        lavaBlock(-mapMove + 3277, 231 + 30, 50, 280, currentBackdrop);
        lavaBlock(-mapMove + 3172, -18, 50, 166, currentBackdrop);
        lavaBlock(-mapMove + 3222, -18, 50, 153, currentBackdrop);
        lavaBlock(-mapMove + 3272, -6, 100, 133, currentBackdrop);
        lavaBlock(-mapMove + 3371, -12, 50, 152, currentBackdrop);
        lavaBlock(-mapMove + 3418, -12 - 10, 50, 185, currentBackdrop);
        lavaBlock(-mapMove + 3467, -10 - 15, 50, 215, currentBackdrop);
        lavaBlock(-mapMove + 3515, -9 - 20, 50, 258, currentBackdrop);
        lavaBlock(-mapMove + 3565, -7 - 10, 50, 290, currentBackdrop);
        lavaBlock(-mapMove + 3326, 262 + 50, 50, 290, currentBackdrop);
        lavaBlock(-mapMove + 3376, 305 + 50, 50, 290, currentBackdrop);
        lavaBlock(-mapMove + 3426, 340 + 50, 50, 290, currentBackdrop);
        lavaBlock(-mapMove + 3476, 375 + 50, 50, 290, currentBackdrop);
        flagCheckpoint(-mapMove + 3777, 190, 11, 260, 0, currentBackdrop);
        block(-mapMove + 3640, 445, 281, 50, currentBackdrop);
        spike(-mapMove + 3892, 414, 30, currentBackdrop);
        trampoline(-mapMove + 3926, 372, 100, 12, 0, currentBackdrop);
        trampoline(-mapMove + 4074, 317, 100, 12, 1, currentBackdrop);
        trampoline(-mapMove + 4238, 255, 100, 12, 2, currentBackdrop);
        lavaBlock(-mapMove + 4037, 340, 50, 173, currentBackdrop);
        lavaBlock(-mapMove + 4195, 282, 50, 237, currentBackdrop);
        block(-mapMove + 3953, 439, 50, 62, currentBackdrop);
        block(-mapMove + 4102, 387, 50, 107, currentBackdrop);
        block(-mapMove + 4264, 328, 50, 201, currentBackdrop);
        block(-mapMove + 4433, 213, 19, 29, currentBackdrop);
        block(-mapMove + 4553, 160, 19, 29, currentBackdrop);
        block(-mapMove + 4653, 251, 19, 29, currentBackdrop);
        specialMachineBox(-mapMove + 4770, 192, 50, 50, 2, 220, 'emoji-box', 3);
        block(-mapMove + 4923, -1, 547, 314, currentBackdrop);
        block(-mapMove + 4923, 316, 13, 314, currentBackdrop);
        block(-mapMove + 5470, 132, 517, 376, currentBackdrop);
        block(-mapMove + 5989, -10, 228, 305, currentBackdrop);
        flagCheckpoint(-mapMove + 6422, 214, 11, 260, 1, currentBackdrop);
        block(-mapMove + 6375, 467, 362, 78, currentBackdrop);
        spike(-mapMove + 6502, 435, 30, currentBackdrop);
        spike(-mapMove + 6633, 435, 30, currentBackdrop);
        trampoline(-mapMove + 6829, 411, 100, 12, 0, currentBackdrop);
        block(-mapMove + 6995, 316, 22, 33, currentBackdrop);
        block(-mapMove + 7109, 263, 22, 33, currentBackdrop);
        block(-mapMove + 7224, 337, 22, 33, currentBackdrop);
        ballonblockUP(-mapMove + 7381, 340, 137, 49, 0, 7, currentBackdrop);
        block(-mapMove + 7564, 73, 186, 53, currentBackdrop);
        block(-mapMove + 7839, 183, 21, 38, currentBackdrop);
        spike(-mapMove + 7641, 42, 30, currentBackdrop);
        block(-mapMove + 7978, 142, 23, 40, currentBackdrop);
        portal(-mapMove + 8121, 68, 62, 112, currentBackdrop);
        lavaBlock(-mapMove + 8017, 228, 295, 321, currentBackdrop);
        
        }
            break;
            
        case 27:
        level28: {
        
        block(-mapMove + 13, 307, 315, 16, currentBackdrop);
        block(-mapMove + 490, 303, 335, 16, currentBackdrop);
        spike(-mapMove + 542, 273, 30, currentBackdrop);
        spike(-mapMove + 658, 272, 30, currentBackdrop);
        spike(-mapMove + 796, 272, 30, currentBackdrop);
        block(-mapMove + 884, 271, 50, 50, currentBackdrop);
        block(-mapMove + 985, 357, 50, 20, currentBackdrop);
        lavaBlock(-mapMove + 1016, 180, 50, 50, currentBackdrop);
        block(-mapMove + 985 + 175, 357, 50, 20, currentBackdrop);
        specialMachineBox(-mapMove + 1236, 250, 50, 50, 0, 182, 'bird', 0);
        spike(-mapMove + 1358, 258, 30, currentBackdrop);
        spike(-mapMove + 1460, 180, 30, currentBackdrop);
        spike(-mapMove + 1565, 261, 30, currentBackdrop);
        spike(-mapMove + 1683, 180, 30, currentBackdrop);
        spike(-mapMove + 1797, 267, 30, currentBackdrop);
        lavaBlock(-mapMove + 1367, -23, 431, 178, currentBackdrop);
        lavaBlock(-mapMove + 1358, 320, 490, 211, currentBackdrop);
        block(-mapMove + 1849, 255, 325 + 200, 271, currentBackdrop);
        block(-mapMove + 1800, -7, 383 + 250, 154, currentBackdrop);
        flagCheckpoint(-mapMove + 1918, -5, 11, 260, 0, currentBackdrop);
        specialMachineBox(-mapMove + 1973, 197, 50, 50, 1, 350, 'gravity-guy', 0);
        lavaBlock(-mapMove + 2717, 173, 65, 33, currentBackdrop);
        spike(-mapMove + 2093, 227, 30, currentBackdrop);
        spike(-mapMove + 2178, 151, 30, currentBackdrop);
        spike(-mapMove + 2272, 228, 30, currentBackdrop);
        block(-mapMove + 2534, 389, 50, 25, currentBackdrop);
        block(-mapMove + 2641, 144, 233, 25, currentBackdrop);
        block(-mapMove + 2991, 140, 102, 94, currentBackdrop);
        block(-mapMove + 3136, 396, 102, 181, currentBackdrop);
        block(-mapMove + 3380, 397, 130, 96, currentBackdrop);
        flagCheckpoint(-mapMove + 3471, 137, 11, 260, 1, currentBackdrop);
        block(-mapMove + 3579, 469, 34, 50, currentBackdrop);
        block(-mapMove + 3726, 422, 34, 73, currentBackdrop);
        block(-mapMove + 3886, 374, 34, 117, currentBackdrop);
        block(-mapMove + 4033, 305, 306, 25, currentBackdrop);
        spike(-mapMove + 4098, 274, 30, currentBackdrop);
        spike(-mapMove + 4230, 276, 30, currentBackdrop);
        block(-mapMove + 4451, 432, 41, 73, currentBackdrop);
        specialMachineBox(-mapMove + 4521, 288, 50, 50, 2, 102, 'emoji-box', 3);
        block(-mapMove + 4674, 213, 104, 317, currentBackdrop);
        block(-mapMove + 4939, -3, 104, 407, currentBackdrop);
        block(-mapMove + 5236, 142, 104, 407, currentBackdrop);
        block(-mapMove + 5620, 309, 195, 407, currentBackdrop);
        ballonblockUP(-mapMove + 5942, 300, 139, 40, 0, 6, currentBackdrop);
        ballonblock(-mapMove + 6232, 73, 137, 40, 1, 5, currentBackdrop);
        ballonblockUP(-mapMove + 6529, 346, 159, 50, 2, 6, currentBackdrop);
        ballonblock(-mapMove + 6749, 73, 129, 52, 3, 6, currentBackdrop);
        lavaBlock(-mapMove + 6747, 116, 133, 434, currentBackdrop);
        block(-mapMove + 6978, 119, 107, 377, currentBackdrop);
        specialMachineBox(-mapMove + 7181, 211, 50, 50, 3, 148, 'bird', 0);
        spike(-mapMove + 7310, 214, 30, currentBackdrop);
        spike(-mapMove + 7269, 128, 30, currentBackdrop);
        spike(-mapMove + 7229, 43, 30, currentBackdrop);
        spike(-mapMove + 7490, 203, 30, currentBackdrop);
        spike(-mapMove + 7466, 283, 30, currentBackdrop);
        spike(-mapMove + 7390, 323 + 10, 30, currentBackdrop);
        spike(-mapMove + 7308, 350 + 10, 30, currentBackdrop);
        spike(-mapMove + 7225, 369, 30, currentBackdrop);
        spike(-mapMove + 7584, 91, 30, currentBackdrop);
        spike(-mapMove + 7542, 26, 30, currentBackdrop);
        spike(-mapMove + 7672, 124, 30, currentBackdrop);
        portal(-mapMove + 7682, 198, 62, 112, currentBackdrop);
        flagCheckpoint(-mapMove + 7048, -140, 11, 260, 2, currentBackdrop);
        
        }
            break;
            
        case 28:
        level29: {
        block(-mapMove + 8, 291, 346, 33, currentBackdrop);
        block(-mapMove + 508, 293, 39, 8, currentBackdrop);
        block(-mapMove + 624, 409, 39, 8, currentBackdrop);
        block(-mapMove + 759, 335, 9, 8, currentBackdrop);
        block(-mapMove + 860, 256, 9, 8, currentBackdrop);
        block(-mapMove + 955, 183, 9, 8, currentBackdrop);
        block(-mapMove + 1042, 244, 9, 8, currentBackdrop);
        block(-mapMove + 1182, 243, 9, 8, currentBackdrop);
        specialMachineBox(-mapMove + 1275, 388, 50, 50, 0, 285, 'gravity-guy', 0);
        block(-mapMove + 1306, 447, 15, 10, currentBackdrop);
        block(-mapMove + 1341, 186, 15, 10, currentBackdrop);
        block(-mapMove + 1449, 143, 15, 10, currentBackdrop);
        block(-mapMove + 1546, 54, 15, 10, currentBackdrop);
        block(-mapMove + 1699, 101, 15, 10, currentBackdrop);
        block(-mapMove + 1838, 381, 420, 10, currentBackdrop);
        block(-mapMove + 1908, 259, 354, 10, currentBackdrop);
        spike(-mapMove + 1923, 351, 30, currentBackdrop);
        spike(-mapMove + 2014, 271, 30, currentBackdrop);
        spike(-mapMove + 2106, 352, 30, currentBackdrop);
        spike(-mapMove + 2194, 274, 30, currentBackdrop);
        block(-mapMove + 2316, 170, 92, 13, currentBackdrop);
        block(-mapMove + 2510, 364, 92, 13, currentBackdrop);
        flagCheckpoint(-mapMove + 2533, 105, 11, 260, 0, currentBackdrop);
        block(-mapMove + 2748, 360, 195, 19, currentBackdrop);
        spike(-mapMove + 2781, 331, 30, currentBackdrop);
        spike(-mapMove + 2919, 330, 30, currentBackdrop);
        trampoline(-mapMove + 3016, 410, 100, 12, 0, currentBackdrop);
        trampoline(-mapMove + 3186, 343, 100, 12, 1, currentBackdrop);
        block(-mapMove + 3211, 423, 50, 75, currentBackdrop);
        block(-mapMove + 3414, 403, 56, 11, currentBackdrop);
        block(-mapMove + 3586, 359, 268, 11, currentBackdrop);
        block(-mapMove + 3561, 467, 348, 50, currentBackdrop);
        spike(-mapMove + 3823, 329, 30, currentBackdrop);
        spike(-mapMove + 3819, 294, 30, currentBackdrop);
        spike(-mapMove + 3818, 262, 30, currentBackdrop);
        spike(-mapMove + 3635, 437, 30, currentBackdrop);
        spike(-mapMove + 3782, 440, 30, currentBackdrop);
        spike(-mapMove + 3560, 358, 30, currentBackdrop);
        ballonblockUP(-mapMove + 3913, 467, 148, 50, 0, 8, currentBackdrop);
        specialMachineBox(-mapMove + 4093, 167, 50, 50, 1, 190, 'bird', 0);
        lavaBlock(-mapMove + 4178, -6, 549, 104, currentBackdrop);
        lavaBlock(-mapMove + 4179, 265, 549, 241, currentBackdrop);
        spike(-mapMove + 4221, 195, 30, currentBackdrop);
        spike(-mapMove + 4365, 113, 30, currentBackdrop);
        ballonblockUP(-mapMove + 4495, 224, 132, 35, 1, 11, currentBackdrop);
        ballonblock(-mapMove + 4880, 250, 155, 42, 2, 5, currentBackdrop);
        trampoline(-mapMove + 5189, 413, 100, 12, 2, currentBackdrop);
        speedBlock(-mapMove + 5181, 363, 124, 50, currentBackdrop);
        ballonblockUP(-mapMove + 5561, 416, 162, 38, 3, 10, currentBackdrop);
        block(-mapMove + 5886, 151, 173, 26, currentBackdrop);
        spike(-mapMove + 6027, 120, 30, currentBackdrop);
        speedBlock(-mapMove + 6159, 268, 124, 50, currentBackdrop);
        block(-mapMove + 6281, 439, 19, 69, currentBackdrop);
        block(-mapMove + 6512, 367, 19, 123, currentBackdrop);
        block(-mapMove + 6673, 440, 19, 123, currentBackdrop);
        block(-mapMove + 6946, 435, 19, 123, currentBackdrop);
        portal(-mapMove + 7088, 347, 62, 112, currentBackdrop);  
        }
            break;
            
        case 29:
        level30: {
        lavaBlock(-mapMove + 392, 191, 27, 15, currentBackdrop);
        lavaBlock(-mapMove + 539, 138, 27, 15, currentBackdrop);
        lavaBlock(-mapMove + 632, 177, 27, 15, currentBackdrop);
        lavaBlock(-mapMove + 750, 133, 27, 15, currentBackdrop);
        lavaBlock(-mapMove + 876, 79, 27, 15, currentBackdrop);
        lavaBlock(-mapMove + 1027, 196, 27, 15, currentBackdrop);
        block(-mapMove - 30, 357, 373, 14, currentBackdrop);
        block(-mapMove + 385, 309, 35, 50, currentBackdrop);
        block(-mapMove + 388, -15, 35, 206, currentBackdrop);
        block(-mapMove + 535, 254, 30, 111, currentBackdrop);
        block(-mapMove + 627, 296, 30, 75, currentBackdrop);
        block(-mapMove + 537, -25, 30, 166, currentBackdrop);
        block(-mapMove + 631, -18, 30, 196, currentBackdrop);
        block(-mapMove + 734 + 15, 252, 30, 113, currentBackdrop);
        block(-mapMove + 734 + 15, -25, 30, 160, currentBackdrop);
        block(-mapMove + 875, -18, 30, 99, currentBackdrop);
        block(-mapMove + 876, 201, 30, 166, currentBackdrop);
        block(-mapMove + 1023, 323, 30, 89, currentBackdrop);
        block(-mapMove + 1025, -25, 30, 224, currentBackdrop);
        lavaBlock(-mapMove + 341, 354, 723, 170, currentBackdrop);
        block(-mapMove + 1149, 261, 31, 244, currentBackdrop);
        block(-mapMove + 1293, 211, 31, 279, currentBackdrop);
        block(-mapMove + 1438, 169, 31, 339, currentBackdrop);
        block(-mapMove + 1545, 239, 31, 6, currentBackdrop);
        block(-mapMove + 1676, 350, 31, 6, currentBackdrop);
        block(-mapMove + 1804, 281, 31, 6, currentBackdrop);
        specialMachineBox(-mapMove + 1963, 244, 50, 50, 0, 552, 'bird', 0);
        spike(-mapMove + 2078, -2, 30, currentBackdrop);
        spike(-mapMove + 2111, 65, 30, currentBackdrop);
        spike(-mapMove + 2159, 141, 30, currentBackdrop);
        spike(-mapMove + 2206, 206, 30, currentBackdrop);
        spike(-mapMove + 2273, 285, 30, currentBackdrop);
        spike(-mapMove + 2365, 335, 30, currentBackdrop);
        spike(-mapMove + 2458, 290, 30, currentBackdrop);
        spike(-mapMove + 2518, 215, 30, currentBackdrop);
        spike(-mapMove + 2557, 134, 30, currentBackdrop);
        spike(-mapMove + 2588, 46, 30, currentBackdrop);
        spike(-mapMove + 2524, 456, 30, currentBackdrop);
        spike(-mapMove + 2590, 400, 30, currentBackdrop);
        spike(-mapMove + 2663, 334, 30, currentBackdrop);
        spike(-mapMove + 2744, 274, 30, currentBackdrop);
        spike(-mapMove + 2817, 213, 30, currentBackdrop);
        spike(-mapMove + 2905, 164, 30, currentBackdrop);
        spike(-mapMove + 2994 - 20, 212, 30, currentBackdrop);
        spike(-mapMove + 3048 - 20, 284, 30, currentBackdrop);
        spike(-mapMove + 3102 - 20, 353, 30, currentBackdrop);
        spike(-mapMove + 3143 - 20, 424, 30, currentBackdrop);
        spike(-mapMove + 2999, -1, 30, currentBackdrop);
        spike(-mapMove + 3060, 54, 30, currentBackdrop);
        spike(-mapMove + 3116, 118, 30, currentBackdrop);
        spike(-mapMove + 3174, 182, 30, currentBackdrop);
        spike(-mapMove + 3252, 241, 30, currentBackdrop);
        spike(-mapMove + 3316, 324, 30, currentBackdrop);
        spike(-mapMove + 3402, 360, 30, currentBackdrop);
        spike(-mapMove + 3481, 325, 30, currentBackdrop);
        spike(-mapMove + 3543, 256, 30, currentBackdrop);
        spike(-mapMove + 3595, 175, 30, currentBackdrop);
        spike(-mapMove + 3629, 91, 30, currentBackdrop);
        spike(-mapMove + 3659, -6, 30, currentBackdrop);
        spike(-mapMove + 3579, 454, 30, currentBackdrop);
        spike(-mapMove + 3648, 391, 30, currentBackdrop);
        spike(-mapMove + 3720, 321, 30, currentBackdrop);
        spike(-mapMove + 3801, 267, 30, currentBackdrop);
        spike(-mapMove + 3871, 200, 30, currentBackdrop);
        spike(-mapMove + 3960, 153, 30, currentBackdrop);
        spike(-mapMove + 4060, 121, 30, currentBackdrop);
        block(-mapMove + 4128, 100, 165, 18, currentBackdrop);
        block(-mapMove + 4380, 222, 47, 9, currentBackdrop);
        block(-mapMove + 4518, 153, 47, 9, currentBackdrop);
        ballonblock(-mapMove + 4703, 164, 50, 34, 0, 5, currentBackdrop);
        lavaBlock(-mapMove + 4694, 180, 69, 343, currentBackdrop);
        ballonblock(-mapMove + 4703 + 150, 164, 50, 34, 1, 5, currentBackdrop);
        lavaBlock(-mapMove + 4694 + 150, 180, 69, 343, currentBackdrop);
        ballonblock(-mapMove + 4703 + 300, 164, 50, 34, 2, 5, currentBackdrop);
        lavaBlock(-mapMove + 4694 + 300, 180, 69, 343, currentBackdrop);
        ballonblock(-mapMove + 4703 + 450, 164, 50, 34, 3, 7, currentBackdrop);
        trampoline(-mapMove + 5310, 307, 100, 12, 0, currentBackdrop);
        block(-mapMove + 5328, 378, 64, 140, currentBackdrop);
        flagCheckpoint(-mapMove + 4247, -160, 11, 260, 0, currentBackdrop);
        block(-mapMove + 5520, 244, 50, 11, currentBackdrop);
        block(-mapMove + 5717, 245, 125, 11, currentBackdrop);
        specialMachineBox(-mapMove + 5764, 191, 50, 50, 1, 900, 'gravity-guy', 0);
        block(-mapMove + 5876, 19, 473 + 20, 50, currentBackdrop);
        block(-mapMove + 6009, 74, 62, 71, currentBackdrop);
        block(-mapMove + 6269 + 20, 74, 80, 71, currentBackdrop);
        spike(-mapMove + 5975, 77, 30, currentBackdrop);
        spike(-mapMove + 6236 + 20, 76, 30, currentBackdrop);
        spike(-mapMove + 6204 + 20, 77, 30, currentBackdrop);
        spike(-mapMove + 6235 + 20, 105, 30, currentBackdrop);
        block(-mapMove + 6352 + 20, 151, 131, 53, currentBackdrop);
        block(-mapMove + 6645, 152, 88, 96, currentBackdrop);
        block(-mapMove + 6506, 100, 135, 45, currentBackdrop);
        block(-mapMove + 6957, 148, 105, 88, currentBackdrop);
        block(-mapMove + 6736, 95, 218, 49, currentBackdrop);
        block(-mapMove + 7066, 91, 306, 49, currentBackdrop);
        block(-mapMove + 7059, 436, 356, 49, currentBackdrop);
        lavaBlock(-mapMove + 7125, 318, 381, 21, currentBackdrop);
        lavaBlock(-mapMove + 7373, 89, 131, 21, currentBackdrop);
        lavaBlock(-mapMove + 7487, 89, 20, 250, currentBackdrop);
        block(-mapMove + 7127, 338, 378, 6, currentBackdrop);
        spike(-mapMove + 7174, 408, 30, currentBackdrop);
        spike(-mapMove + 7274, 340, 30, currentBackdrop);
        spike(-mapMove + 7383, 408, 30, currentBackdrop);
        block(-mapMove + 7640, 342, 84, 8, currentBackdrop);
        block(-mapMove + 7808, 254, 84, 8, currentBackdrop);
        block(-mapMove + 7967, 340, 84, 8, currentBackdrop);
        block(-mapMove + 8106, 469, 84, 9, currentBackdrop);
        block(-mapMove + 8267, 395, 84, 9, currentBackdrop);
        block(-mapMove + 8498, 396, 84, 9, currentBackdrop);
        block(-mapMove + 8627, 237, 84, 9, currentBackdrop);
        block(-mapMove + 8862, 237, 84, 9, currentBackdrop);
        block(-mapMove + 9086, 235, 84, 9, currentBackdrop);
        portal(-mapMove + 9199, 312, 62, 112, currentBackdrop);
        flagCheckpoint(-mapMove + 5750, -15, 11, 260, 1, currentBackdrop);
        }
            break;
            
        case 30:
        level31: {
        block(-mapMove - 30, 357, 373, 14, currentBackdrop);
        specialMachineBox(-mapMove + 300, 301, 50, 50, 0, 722, 'gravity-guy', 0);
        block(-mapMove + 326, 102, 787, 19, currentBackdrop);
        lavaBlock(-mapMove + 495, 127, 23, 83, currentBackdrop);
        lavaBlock(-mapMove + 496, 291, 23, 50, currentBackdrop);
        lavaBlock(-mapMove + 495 + 170, 127, 23, 83, currentBackdrop);
        lavaBlock(-mapMove + 496 + 170, 291, 23, 50, currentBackdrop);
        lavaBlock(-mapMove + 816, 128, 32, 40, currentBackdrop);
        lavaBlock(-mapMove + 1027, 127, 32, 40, currentBackdrop);
        block(-mapMove + 1061, 129, 52, 50, currentBackdrop);
        lavaBlock(-mapMove + 1325, 126, 141, 33, currentBackdrop);
        block(-mapMove + 1272, 103, 51, 132, currentBackdrop);
        block(-mapMove + 1272, 103, 522, 21, currentBackdrop);
        lavaBlock(-mapMove + 1637, 128, 160, 33, currentBackdrop);
        block(-mapMove + 1693, 124, 50, 50, currentBackdrop);
        block(-mapMove + 1862, 102, 51, 106, currentBackdrop);
        block(-mapMove + 2022, 105, 50, 162, currentBackdrop);
        block(-mapMove + 2184, 106, 50, 217, currentBackdrop);
        block(-mapMove + 2304, 106, 50, 151, currentBackdrop);
        block(-mapMove + 2479, 106, 50, 151, currentBackdrop);
        block(-mapMove + 2598, 391, 50, 151, currentBackdrop);
        block(-mapMove + 2734, 106, 50, 151, currentBackdrop);
        block(-mapMove + 2917, 105, 50, 151, currentBackdrop);
        block(-mapMove + 3049, 107, 50, 76, currentBackdrop);
        specialMachineBox(-mapMove + 3098, 295, 50, 50, 1, 166, 'emoji-box', 3);
        lavaBlock(-mapMove + 3585 + 100, 48, 26, 256, currentBackdrop);
        lavaBlock(-mapMove + 3307 + 100, 276, 305, 225, currentBackdrop);
        lavaBlock(-mapMove + 3284 + 100, -15, 327, 64, currentBackdrop);
        lavaBlock(-mapMove + 3689 + 100, 104 - 100, 21, 233, currentBackdrop);
        lavaBlock(-mapMove + 3689 + 100, 82 - 100, 302, 29, currentBackdrop);
        lavaBlock(-mapMove + 3973 + 100, 99 - 100, 23, 235, currentBackdrop);
        lavaBlock(-mapMove + 3688 + 100, 328 - 100, 308, 21, currentBackdrop);
        specialMachineBox(-mapMove + 4254, 142, 50, 50, 2, 347, 'bird', 5);
        
        lavaBlock(-mapMove + 5233, -1, 168, 181, currentBackdrop);
        lavaBlock(-mapMove + 5237, 364, 168, 181, currentBackdrop);
        lavaBlock(-mapMove + 4506, 256, 50, 50, currentBackdrop);
        lavaBlock(-mapMove + 4541, 64, 50, 50, currentBackdrop);
        lavaBlock(-mapMove + 4635, 173, 50, 50, currentBackdrop);
        lavaBlock(-mapMove + 4398, 366, 50, 50, currentBackdrop);
        lavaBlock(-mapMove + 4558, 408, 50, 50, currentBackdrop);
        lavaBlock(-mapMove + 4402, -15, 469, 37, currentBackdrop);
        lavaBlock(-mapMove + 4402, -15 + 489, 469, 37, currentBackdrop);
        lavaBlock(-mapMove + 4687, 314, 50, 50, currentBackdrop);
        lavaBlock(-mapMove + 4764, 64, 50, 50, currentBackdrop);
        lavaBlock(-mapMove + 4819, 209, 50, 50, currentBackdrop);
        lavaBlock(-mapMove + 4823, 395, 50, 50, currentBackdrop);
        spike(-mapMove + 4886, 450, 30, currentBackdrop);
        spike(-mapMove + 4946, 414, 30, currentBackdrop);
        spike(-mapMove + 5004, 362, 30, currentBackdrop);
        spike(-mapMove + 5052, 295, 30, currentBackdrop);
        spike(-mapMove + 5134, 311, 30, currentBackdrop);
        spike(-mapMove + 4903, 13, 30, currentBackdrop);
        spike(-mapMove + 4965, 59, 30, currentBackdrop);
        spike(-mapMove + 5026, 110, 30, currentBackdrop);
        spike(-mapMove + 5114, 130, 30, currentBackdrop);
        spike(-mapMove + 5192, 166, 30, currentBackdrop);
        spike(-mapMove + 5201, 342, 30, currentBackdrop);
        spike(-mapMove + 5427, 318, 30, currentBackdrop);
        spike(-mapMove + 5499, 253, 30, currentBackdrop);
        spike(-mapMove + 5575, 196, 30, currentBackdrop);
        block(-mapMove + 5659, 183, 127, 22, currentBackdrop);
        trampoline(-mapMove + 5886, 257, 100, 12, 0, currentBackdrop);
        block(-mapMove + 5904, 329, 64, 165, currentBackdrop);
        block(-mapMove + 6135, 244, 64, 268, currentBackdrop);
        block(-mapMove + 6291, 314, 27, 4, currentBackdrop);
        block(-mapMove + 6423, 246, 27, 4, currentBackdrop);
        block(-mapMove + 6600, 243, 27, 4, currentBackdrop);
        block(-mapMove + 6677, 278, 27, 4, currentBackdrop);
        block(-mapMove + 6778, 327, 27, 4, currentBackdrop);
        block(-mapMove + 6943, 334, 60, 4, currentBackdrop);
        specialMachineBox(-mapMove + 6947, 280, 50, 50, 3, 453, 'gravity-guy', 0); // 3
        block(-mapMove + 7077, 156, 50, 7, currentBackdrop);
        block(-mapMove + 7219, 327, 50, 7, currentBackdrop);
        block(-mapMove + 7364, 159, 50, 7, currentBackdrop);
        block(-mapMove + 7578, 162, 50, 7, currentBackdrop);
        block(-mapMove + 7738, 233, 50, 7, currentBackdrop);
        block(-mapMove + 7890, 164, 50, 7, currentBackdrop);
        block(-mapMove + 8051, 234, 50, 7, currentBackdrop);
        block(-mapMove + 8197, 426, 54, 7, currentBackdrop);
        block(-mapMove + 8407, 423, 193, 7, currentBackdrop);
        spike(-mapMove + 8475, 393, 30, currentBackdrop);
        block(-mapMove + 8664, 200, 50, 12, currentBackdrop);
        specialMachineBox(-mapMove + 8759, 279, 50, 50, 4, 181, 'bird', 0); // 4
        spike(-mapMove + 8939, 283, 30, currentBackdrop);
        spike(-mapMove + 8973, 181, 30, currentBackdrop);
        spike(-mapMove + 8993, 395, 30, currentBackdrop);
        spike(-mapMove + 9014, 81, 30, currentBackdrop);
        spike(-mapMove + 9091, 1, 30, currentBackdrop);
        spike(-mapMove + 9064, 453, 30, currentBackdrop);
        spike(-mapMove + 9071, 379, 30, currentBackdrop);
        spike(-mapMove + 9041, 187, 30, currentBackdrop);
        spike(-mapMove + 9172, 226, 30, currentBackdrop);
        spike(-mapMove + 9108, 213, 30, currentBackdrop);
        spike(-mapMove + 9120, 374, 30, currentBackdrop);
        spike(-mapMove + 9241, 369, 30, currentBackdrop);
        spike(-mapMove + 9182, 364, 30, currentBackdrop);
        spike(-mapMove + 9317, 236, 30, currentBackdrop);
        spike(-mapMove + 9241, 217, 30, currentBackdrop);
        spike(-mapMove + 9305, 370, 30, currentBackdrop);
        spike(-mapMove + 9369, 364, 30, currentBackdrop);
        flagCheckpoint(-mapMove + 6185, -15, 11, 260, 0, currentBackdrop);
        flagCheckpoint(-mapMove + 4232, -69, 11, 260, 1, currentBackdrop);
        block(-mapMove + 4224, 191, 28, 331, currentBackdrop);
        portal(-mapMove + 9396, 247, 62, 112, currentBackdrop);
        }
            break;
            
        case 31:
        level32: {
        block(-mapMove + 299 + 150, 329, 40, 74, currentBackdrop);
        block(-mapMove + 18, 396, 1014 + 150, 22, currentBackdrop);
        lavaBlock(-mapMove + 341 + 150, 375, 692, 22, currentBackdrop);
        spike(-mapMove + 265 + 150, 366, 30, currentBackdrop);
        spike(-mapMove + 235 + 150, 366, 30, currentBackdrop);
        block(-mapMove + 488 + 150, 326, 39, 8, currentBackdrop);
        block(-mapMove + 583 + 150, 354, 45, 8, currentBackdrop);
        block(-mapMove + 705 + 150, 294, 45, 8, currentBackdrop);
        block(-mapMove + 829 + 150, 224, 45, 8, currentBackdrop);
        spike(-mapMove + 831 - 3 + 150, 128, 30, currentBackdrop);
        spike(-mapMove + 831 + 5 + 150, 128, 30, currentBackdrop);
        
        block(-mapMove + 829 + 150 - 7 + 150, 224 + 50, 45 + 14, 8, currentBackdrop);
        spike(-mapMove + 831 + 150 - 3 + 150, 128 + 50, 30, currentBackdrop);
        spike(-mapMove + 831 + 155 + 150, 128 + 50, 30, currentBackdrop);
        block(-mapMove + 1158 + 150, 224, 42, 6, currentBackdrop);
        block(-mapMove + 1320 + 150, 176, 42, 6, currentBackdrop);
        spike(-mapMove + 1322 + 150, 80, 30, currentBackdrop);
        block(-mapMove + 1516 + 150, 172, 50, 7, currentBackdrop);
        spike(-mapMove + 1524 + 150, 33, 30, currentBackdrop);
        block(-mapMove + 1663 + 150, 244, 43, 7, currentBackdrop);
        block(-mapMove + 1816 + 150, 184, 43, 7, currentBackdrop);
        spike(-mapMove + 1820 + 150, 73, 30, currentBackdrop);
        block(-mapMove + 2015 + 150, 396, 43, 7, currentBackdrop);
        specialMachineBox(-mapMove + 2096 + 150, 286, 50, 50, 0, 280, 'bird', 0);
        block(-mapMove + 2266 + 150, 193 + 40, 55, 298, currentBackdrop);
        block(-mapMove + 2266 + 150, -25, 55, 85, currentBackdrop);
        lavaBlock(-mapMove + 2266 + 150, 67, 55, 13, currentBackdrop);
        lavaBlock(-mapMove + 2266 + 150, 181 + 40, 55, 13, currentBackdrop);
        block(-mapMove + 2266 + 200 + 150, 193 + 200 + 40, 55, 298, currentBackdrop);
        block(-mapMove + 2266 + 200 + 150, -25, 55, 85 + 200, currentBackdrop);
        lavaBlock(-mapMove + 2266 + 200 + 150, 67 + 200, 55, 13, currentBackdrop);
        lavaBlock(-mapMove + 2266 + 200 + 150, 181 + 200 + 40, 55, 13, currentBackdrop);
        lavaBlock(-mapMove + 2761, 308, 30, 20, currentBackdrop);
        lavaBlock(-mapMove + 2763, 448, 30, 20, currentBackdrop);
        lavaBlock(-mapMove + 2762, 166, 30, 20, currentBackdrop);
        lavaBlock(-mapMove + 2761, 34, 30, 20, currentBackdrop);
        lavaBlock(-mapMove + 2761 + 130, 308 - 65, 30, 20, currentBackdrop);
        lavaBlock(-mapMove + 2763 + 130, 448 - 65, 30, 20, currentBackdrop);
        lavaBlock(-mapMove + 2762 + 130, 166 - 65, 30, 20, currentBackdrop);
        lavaBlock(-mapMove + 2761 + 130, 34 - 65, 30, 20, currentBackdrop);
        lavaBlock(-mapMove + 2761 + 260, 308, 30, 20, currentBackdrop);
        lavaBlock(-mapMove + 2763 + 260, 448, 30, 20, currentBackdrop);
        lavaBlock(-mapMove + 2762 + 260, 166, 30, 20, currentBackdrop);
        lavaBlock(-mapMove + 2761 + 260, 34, 30, 20, currentBackdrop);
        lavaBlock(-mapMove + 2761 + 390, 308 - 65, 30, 30, currentBackdrop);
        lavaBlock(-mapMove + 2763 + 390, 448 - 65, 30, 30, currentBackdrop);
        lavaBlock(-mapMove + 2762 + 390, 166 - 65, 30, 30, currentBackdrop);
        lavaBlock(-mapMove + 2761 + 390, 34 - 65, 30, 30, currentBackdrop);
        specialMachineBox(-mapMove + 3261, 285, 50, 50, 1, 325, 'gravity-guy', 0);
        trampoline(-mapMove + 3240, 343, 100, 12, 0, currentBackdrop);
        block(-mapMove + 3265, 413, 50, 87, currentBackdrop);
        block(-mapMove + 3390, 346, 50, 157, currentBackdrop);
        block(-mapMove + 3582, 344, 50, 157, currentBackdrop);
        lavaBlock(-mapMove + 3647, 307, 403, 279, currentBackdrop);
        block(-mapMove + 3673, 112, 93, 22, currentBackdrop);
        block(-mapMove + 3800, 268, 93, 22, currentBackdrop);
        block(-mapMove + 4034, 265, 93, 22, currentBackdrop);
        block(-mapMove + 4173, -8, 50, 126, currentBackdrop);
        block(-mapMove + 4338, -8, 50, 198, currentBackdrop);
        block(-mapMove + 4522, -4, 50, 262, currentBackdrop);
        block(-mapMove + 4609, 403, 188, 262, currentBackdrop);
        flagCheckpoint(-mapMove + 2174, 137, 11, 260, 0, currentBackdrop);
        flagCheckpoint(-mapMove + 4673, 144, 11, 260, 1, currentBackdrop);
        specialMachineBox(-mapMove + 4808, 291, 50, 50, 2, 166, 'bird', 0);
        speedBlock(-mapMove + 4964, 289, 124, 50, currentBackdrop);
        lavaBlock(-mapMove + 4978, -6, 50, 246, currentBackdrop);
        lavaBlock(-mapMove + 4981, 387, 50, 246, currentBackdrop);
        lavaBlock(-mapMove + 5186, -5, 50, 338, currentBackdrop);
        lavaBlock(-mapMove + 5438, 328, 50, 338, currentBackdrop);
        lavaBlock(-mapMove + 5438, -17, 50, 238, currentBackdrop);
        lavaBlock(-mapMove + 5646, 4, 50, 293, currentBackdrop);
        lavaBlock(-mapMove + 5648, 406, 50, 293, currentBackdrop);
        lavaBlock(-mapMove + 5837, 336 + 20, 50, 293, currentBackdrop);
        block(-mapMove + 5950, 344, 84, 13, currentBackdrop);
        block(-mapMove + 6051, 152, 77, 13, currentBackdrop);
        specialMachineBox(-mapMove + 5943, 294, 50, 50, 3, 214, 'gravity-guy', 0);
        block(-mapMove + 6234, 74, 46, 18, currentBackdrop);
        block(-mapMove + 6414, 136, 95, 18, currentBackdrop);
        block(-mapMove + 6577, 34, 52, 18, currentBackdrop);
        block(-mapMove + 6697, 166, 52, 18, currentBackdrop);
        block(-mapMove + 6818, 255, 52, 18, currentBackdrop);
        block(-mapMove + 7001, 207, 52, 18, currentBackdrop);
        trampoline(-mapMove + 7120, 413, 100, 12, 3, currentBackdrop);
        specialMachineBox(-mapMove + 7246, 314, 50, 50, 4, 166, 'emoji-box', 3);
        lavaBlock(-mapMove + 7200, 231, 127, 27, currentBackdrop);
        lavaBlock(-mapMove + 7426, -15, 127, 342, currentBackdrop);
        lavaBlock(-mapMove + 7754, -16, 127, 396, currentBackdrop);
        portal(-mapMove + 8507, 278, 62, 112, currentBackdrop);
        lavaBlock(-mapMove + 8450, 248, 10, 181, currentBackdrop);
        lavaBlock(-mapMove + 8625, 246, 10, 181, currentBackdrop);
        lavaBlock(-mapMove + 8448, 238, 188, 15, currentBackdrop);
        lavaBlock(-mapMove + 8448, 415, 188, 15, currentBackdrop);
        }
            break;
            
        case 32:
        level33: {
        block(-mapMove + 3, 283, 347, 25, currentBackdrop);
        block(-mapMove + 410, 340, 43, 15, currentBackdrop);
        block(-mapMove + 554, 294, 43, 15, currentBackdrop);
        block(-mapMove + 689, 235, 293, 13, currentBackdrop);
        lavaBlock(-mapMove + 756, 186, 14, 50, currentBackdrop);
        lavaBlock(-mapMove + 896, 186, 14, 50, currentBackdrop);
        block(-mapMove + 1102, 235, 315, 13, currentBackdrop);
        ballonblock(-mapMove + 1043, 385, 117, 13, 0, 5, currentBackdrop);
        lavaBlock(-mapMove + 1040, 451, 128, 50, currentBackdrop);
        block(-mapMove + 1285, 448, 111, 20, currentBackdrop);
        lavaBlock(-mapMove + 1172, 255, 89, 48, currentBackdrop);
        spike(-mapMove + 1367, 416, 30, currentBackdrop);
        lavaBlock(-mapMove + 1411, -5, 25, 261, currentBackdrop);
        speedBlock(-mapMove + 1412, 358, 124, 50, currentBackdrop);
        block(-mapMove + 1564, 434, 71, 26, currentBackdrop);
        block(-mapMove + 1795, 351, 71, 26, currentBackdrop);
        block(-mapMove + 1963, 421, 71, 26, currentBackdrop);
        block(-mapMove + 2175, 362, 71, 26, currentBackdrop);
        specialMachineBox(-mapMove + 2178, 311, 50, 50, 0, 178, 'gravity-guy', 0);
        block(-mapMove + 2369, 41, 288, 31, currentBackdrop);
        spike(-mapMove + 2451, 79, 30, currentBackdrop);
        spike(-mapMove + 2614, 80, 30, currentBackdrop);
        block(-mapMove + 2716, 89, 140, 28, currentBackdrop);
        lavaBlock(-mapMove + 2786, 124, 74, 23, currentBackdrop);
        specialMachineBox(-mapMove + 2925, 87, 50, 50, 1, 178, 'bird', 0);
        lavaBlock(-mapMove + 3167, -6, 50, 212, currentBackdrop);
        lavaBlock(-mapMove + 3166, 334, 50, 369, currentBackdrop);
        spike(-mapMove + 3291, 251, 30, currentBackdrop);
        lavaBlock(-mapMove + 3217, 126, 496, 29, currentBackdrop);
        lavaBlock(-mapMove + 3216, 393, 496, 29, currentBackdrop);
        spike(-mapMove + 3416, 178, 30, currentBackdrop);
        spike(-mapMove + 3419, 347, 30, currentBackdrop);
        spike(-mapMove + 3527, 231, 30, currentBackdrop);
        spike(-mapMove + 3526, 193, 30, currentBackdrop);
        spike(-mapMove + 3525, 157, 30, currentBackdrop);
        spike(-mapMove + 3651, 266, 30, currentBackdrop);
        spike(-mapMove + 3652, 304, 30, currentBackdrop);
        spike(-mapMove + 3655, 346, 30, currentBackdrop);
        trampoline(-mapMove + 3739, 300, 100, 12, 1, currentBackdrop);
        block(-mapMove + 3756, 379, 66, 142, currentBackdrop);
        block(-mapMove + 3921, 301, 82, 231, currentBackdrop);
        block(-mapMove + 4124, 255, 82, 277, currentBackdrop);
        flagCheckpoint(-mapMove + 4162, -5, 11, 260, 0, currentBackdrop);
        block(-mapMove + 4335, 255, 67, 13, currentBackdrop);
        specialMachineBox(-mapMove + 4330, 203, 50, 50, 2, 378, 'gravity-guy', 0);
        block(-mapMove + 4503, -24, 448, 55, currentBackdrop);
        lavaBlock(-mapMove + 4596, 38, 77, 28, currentBackdrop);
        lavaBlock(-mapMove + 4792, 38, 77, 28, currentBackdrop);
        block(-mapMove + 5042, 293, 45, 12, currentBackdrop);
        block(-mapMove + 5152, 115, 18, 12, currentBackdrop);
        block(-mapMove + 5326, 115, 18, 12, currentBackdrop);
        block(-mapMove + 5424, 327, 18, 12, currentBackdrop);
        block(-mapMove + 5551, 119, 18, 12, currentBackdrop);
        block(-mapMove + 5649, 331, 18, 12, currentBackdrop);
        block(-mapMove + 5834, 331, 18, 12, currentBackdrop);
        block(-mapMove + 5972, 263, 191, 12, currentBackdrop);
        spike(-mapMove + 6131, 232, 30, currentBackdrop);
        flagCheckpoint(-mapMove + 6050, 3, 11, 260, 1, currentBackdrop);
        block(-mapMove + 6247, 300, 116, 17, currentBackdrop);
        spike(-mapMove + 6332, 270, 30, currentBackdrop);
        ballonblockUP(-mapMove + 6455, 293, 126, 25, 1, 5, currentBackdrop);
        block(-mapMove + 6722, 99, 87, 432, currentBackdrop);
        block(-mapMove + 6888, 221, 38, 432, currentBackdrop);
        block(-mapMove + 7074, 218, 38, 432, currentBackdrop);
        speedBlock(-mapMove + 7249, 215, 124, 50, currentBackdrop);
        block(-mapMove + 7336, 332, 76, 28, currentBackdrop);
        spike(-mapMove + 7397, 302, 30, currentBackdrop);
        trampoline(-mapMove + 7610, 407, 100, 12, 1, currentBackdrop);
        block(-mapMove + 7989, 316, 46, 27, currentBackdrop);
        spike(-mapMove + 8029, 284, 30, currentBackdrop);
        portal(-mapMove + 8252, 378, 62, 112, currentBackdrop);
        }
            break;
        
        case 33:
        level34: {
        
        block(-mapMove + 10, 258, 330, 26, currentBackdrop);
        block(-mapMove + 475, 201, 50, 50, currentBackdrop);
        specialMachineBox(-mapMove + 523, 93, 50, 50, 0, 380, 'gravity-guy', 0);
        block(-mapMove + 640, 444, 78, 50, currentBackdrop);
        block(-mapMove + 745, 155, 77, 22, currentBackdrop);
        block(-mapMove + 887, 348, 77, 22, currentBackdrop);
        block(-mapMove + 1031, 84, 77, 22, currentBackdrop);
        block(-mapMove + 1262, 81, 77, 22, currentBackdrop);
        block(-mapMove + 1473, 77, 77, 91, currentBackdrop);
        block(-mapMove + 1679, 74, 77, 153, currentBackdrop);
        block(-mapMove + 1819, 70, 77, 12, currentBackdrop);
        spike(-mapMove + 722, 385, 30, currentBackdrop);
        spike(-mapMove + 756, 322, 30, currentBackdrop);
        spike(-mapMove + 793, 262, 30, currentBackdrop);
        spike(-mapMove + 843, 299, 30, currentBackdrop);
        spike(-mapMove + 582, 402, 30, currentBackdrop);
        spike(-mapMove + 547, 351, 30, currentBackdrop);
        spike(-mapMove + 519, 291, 30, currentBackdrop);
        spike(-mapMove + 430, 205, 30, currentBackdrop);
        spike(-mapMove + 370, 241, 30, currentBackdrop);
        spike(-mapMove + 973, 309, 30, currentBackdrop);
        spike(-mapMove + 1035, 260, 30, currentBackdrop);
        spike(-mapMove + 1089, 207, 30, currentBackdrop);
        spike(-mapMove + 1169, 95, 30, currentBackdrop);
        block(-mapMove + 2217, 373, 103, 13, currentBackdrop);
        flagCheckpoint(-mapMove + 2274, 113, 11, 260, 0, currentBackdrop);
        ballonblock(-mapMove + 2432, 368, 104, 25, 0, 9, currentBackdrop);
        ballonblock(-mapMove + 2570, 368, 104, 25, 1, 10, currentBackdrop);
        ballonblock(-mapMove + 2711, 365, 104, 25, 2, 11, currentBackdrop);
        ballonblock(-mapMove + 2855, 366, 104, 25, 3, 12, currentBackdrop);
        trampoline(-mapMove + 3035, 364, 100, 12, 0, currentBackdrop);
        block(-mapMove + 3060, 451, 50, 50, currentBackdrop);
        specialMachineBox(-mapMove + 3178, 275, 50, 50, 1, 196, 'bird', 0);
        spike(-mapMove + 3309, 281, 30, currentBackdrop);
        spike(-mapMove + 3388, 141, 30, currentBackdrop);
        spike(-mapMove + 3533, 199, 30, currentBackdrop);
        spike(-mapMove + 3310, 337, 30, currentBackdrop);
        spike(-mapMove + 3310, 400, 30, currentBackdrop);
        spike(-mapMove + 3311, 459, 30, currentBackdrop);
        spike(-mapMove + 3495, 224, 30, currentBackdrop);
        spike(-mapMove + 3440, 260, 30, currentBackdrop);
        spike(-mapMove + 3376, 275, 30, currentBackdrop);
        spike(-mapMove + 3332, 90, 30, currentBackdrop);
        spike(-mapMove + 3312, 16, 30, currentBackdrop);
        spike(-mapMove + 3433, 94, 30, currentBackdrop);
        spike(-mapMove + 3458, 23, 30, currentBackdrop);
        spike(-mapMove + 3560, 51, 30, currentBackdrop);
        spike(-mapMove + 3507, 50, 30, currentBackdrop);
        spike(-mapMove + 3569, 234, 30, currentBackdrop);
        spike(-mapMove + 3608, 36, 30, currentBackdrop);
        spike(-mapMove + 3668, 16, 30, currentBackdrop);
        spike(-mapMove + 3618, 270, 30, currentBackdrop);
        spike(-mapMove + 3673, 281, 30, currentBackdrop);
        spike(-mapMove + 3730, 276, 30, currentBackdrop);
        spike(-mapMove + 3723, 35, 30, currentBackdrop);
        spike(-mapMove + 3767, 86, 30, currentBackdrop);
        spike(-mapMove + 3836, 151, 30, currentBackdrop);
        spike(-mapMove + 3768, 295, 30, currentBackdrop);
        spike(-mapMove + 3815, 314, 30, currentBackdrop);
        spike(-mapMove + 3870, 321, 30, currentBackdrop);
        spike(-mapMove + 3806, 119, 30, currentBackdrop);
        spike(-mapMove + 3879, 157, 30, currentBackdrop);
        lavaBlock(-mapMove + 3675, 164, 12, 18, currentBackdrop);
        block(-mapMove + 3989, 278, 97, 221, currentBackdrop);
        lavaBlock(-mapMove + 4101, 226, 26, 291, currentBackdrop);
        block(-mapMove + 3989 + 150, 278, 97, 221, currentBackdrop);
        lavaBlock(-mapMove + 4101 + 150, 226, 26, 291, currentBackdrop);
        block(-mapMove + 3989 + 300, 278, 97, 221, currentBackdrop);
        lavaBlock(-mapMove + 4101 + 300, 226, 26, 291, currentBackdrop);
        ballonblock(-mapMove + 4462, 278, 118, 32, 4, 4, currentBackdrop);
        block(-mapMove + 4633, 279, 50, 255, currentBackdrop);
        block(-mapMove + 4784, 223, 50, 278, currentBackdrop);
        block(-mapMove + 4908, 278, 50, 278, currentBackdrop);
        spike(-mapMove + 5037, 387 + sin(frameCount * 7) * 25, 30, currentBackdrop);
        block(-mapMove + 5029, 395, 50, 278, currentBackdrop);
        block(-mapMove + 5171, 397, 50, 278, currentBackdrop);
        block(-mapMove + 5310, 319, 50, 185, currentBackdrop);
        block(-mapMove + 5470, 319, 355, 185, currentBackdrop);
        spike(-mapMove + 5547, 288, 30, currentBackdrop);
        spike(-mapMove + 5679, 288, 30, currentBackdrop);
        portal(-mapMove + 5987, 209, 62, 112, currentBackdrop);
        
        }
            break;
            
        case 34:
        level35: {
        block(-mapMove + 11, 277, 319, 33, currentBackdrop);
        spike(-mapMove + 290 + sin(frameCount * 5) * 18, 247, 30, currentBackdrop);
        spike(-mapMove + 290 - sin(frameCount * 5) * 18, 247, 30, currentBackdrop);
        ballonblockUP(-mapMove + 370, 461 - mapMove / 2, 92, 23, 0, 0, currentBackdrop);
        ballonblock(-mapMove + 558, -10 + mapMove / 2, 92, 23, 1, 0, currentBackdrop);
        ballonblockUP(-mapMove + 730, 561 - mapMove / 2, 92, 23, 2, 0, currentBackdrop);
        ballonblock(-mapMove + 890, -150 + mapMove / 2, 92, 23, 3, 0, currentBackdrop);
        specialMachineBox(-mapMove + 1072, 288, 50, 50, 0, 231, 'gravity-guy', 0);
        block(-mapMove + 1122, 419, 102, 21, currentBackdrop);
        spike(-mapMove + 1192, 389, 30, currentBackdrop);
        block(-mapMove + 1220, 181, 104, 25, currentBackdrop);
        spike(-mapMove + 1312, 215, 30, currentBackdrop);
        block(-mapMove + 1330, 409, 125, 24, currentBackdrop);
        spike(-mapMove + 1419, 378, 30, currentBackdrop);
        block(-mapMove + 1449, 180, 369, 29, currentBackdrop);
        lavaBlock(-mapMove + 1818, 179, 21, 125, currentBackdrop);
        lavaBlock(-mapMove + 1533, 289, 304, 15, currentBackdrop);
        trampoline(-mapMove + 1532, 456, 100, 12, 0, currentBackdrop);
        block(-mapMove + 1678, 457, 205, 20, currentBackdrop);
        spike(-mapMove + 1787, 427, 30, currentBackdrop);
        specialMachineBox(-mapMove + 1937, 227, 50, 50, 1, 231, 'bird', 0);
        lavaBlock(-mapMove + 2073, 167, 50, 336, currentBackdrop);
        lavaBlock(-mapMove + 2288, -5, 50, 275, currentBackdrop);
        lavaBlock(-mapMove + 2289, 381, 50, 275, currentBackdrop);
        spike(-mapMove + 2410, 305, 30, currentBackdrop);
        spike(-mapMove + 2525, 235, 30, currentBackdrop);
        spike(-mapMove + 2369, 415, 30, currentBackdrop);
        spike(-mapMove + 2538, 369, 30, currentBackdrop);
        spike(-mapMove + 2393, 159, 30, currentBackdrop);
        spike(-mapMove + 2517, 85, 30, currentBackdrop);
        spike(-mapMove + 2579, 431, 30, currentBackdrop);
        spike(-mapMove + 2646, 280, 30, currentBackdrop);
        spike(-mapMove + 2621, 147, 30, currentBackdrop);
        spike(-mapMove + 2656, 46, 30, currentBackdrop);
        spike(-mapMove + 2714, 397, 30, currentBackdrop);
        spike(-mapMove + 2744, 196, 30, currentBackdrop);
        specialMachineBox(-mapMove + 2780, 78, 50, 50, 2, 110, 'emoji-box', 3);
        lavaBlock(-mapMove + 2924, -1, 233, 322, currentBackdrop);
        lavaBlock(-mapMove + 3280, -9, 233, 223, currentBackdrop);
        lavaBlock(-mapMove + 3283, 321, 233, 223, currentBackdrop);
        lavaBlock(-mapMove + 3730, -5, 86, 313, currentBackdrop);
        lavaBlock(-mapMove + 3730, 180, 233, 313, currentBackdrop);
        spike(-mapMove + 4007, 134 + sin(frameCount * 15) * 15, 30, currentBackdrop);
        block(-mapMove + 3815, 150, 223, 25, currentBackdrop);
        specialMachineBox(-mapMove + 4181, 409, 50, 50, 3, 300, 'gravity-guy', 3);
        block(-mapMove + 4180, 467, 92, 12, currentBackdrop);
        spike(-mapMove + 4272, 436, 30, currentBackdrop);
        flagCheckpoint(-mapMove + 3945, -108, 11, 260, 0, currentBackdrop);
        block(-mapMove + 4357, 75, 75, 20, currentBackdrop);
        block(-mapMove + 4490, 15, 54, 20, currentBackdrop);
        block(-mapMove + 4672, 54, 58, 20, currentBackdrop);
        block(-mapMove + 4825, 316, 58, 20, currentBackdrop);
        block(-mapMove + 5007, 315, 58, 20, currentBackdrop);
        block(-mapMove + 5116, 371, 58, 20, currentBackdrop);
        block(-mapMove + 5251, 112, 58, 20, currentBackdrop);
        block(-mapMove + 5389, 403, 114, 20, currentBackdrop);
        spike(-mapMove + 4564, 43, 30, currentBackdrop);
        spike(-mapMove + 4618, 51, 30, currentBackdrop);
        spike(-mapMove + 4775, 87, 30, currentBackdrop);
        spike(-mapMove + 4818, 141, 30, currentBackdrop);
        spike(-mapMove + 4855, 180, 30, currentBackdrop);
        spike(-mapMove + 5198, 328, 30, currentBackdrop);
        spike(-mapMove + 5335, 135, 30, currentBackdrop);
        flagCheckpoint(-mapMove + 5475, 143, 11, 260, 3, currentBackdrop);
        block(-mapMove + 5606, 335, 50, 185, currentBackdrop);
        lavaBlock(-mapMove + 5609, -13, 50, 238, currentBackdrop);
        block(-mapMove + 5778, 266, 50, 238, currentBackdrop);
        lavaBlock(-mapMove + 5778, -17, 50, 185, currentBackdrop);
        block(-mapMove + 5939, 342, 50, 143, currentBackdrop);
        lavaBlock(-mapMove + 5942, -7, 50, 243, currentBackdrop);
        block(-mapMove + 6106, 407, 50, 155, currentBackdrop);
        block(-mapMove + 6249, 437, 50, 155, currentBackdrop);
        lavaBlock(-mapMove + 6108, -9, 50, 215, currentBackdrop);
        lavaBlock(-mapMove + 6253, -5, 50, 338, currentBackdrop);
        block(-mapMove + 6438, 441, 223, 50, currentBackdrop);
        speedBlock(-mapMove + 6425, 391, 124, 50, currentBackdrop);
        spike(-mapMove + 6632, 411, 30, currentBackdrop);
        specialMachineBox(-mapMove + 6817, 407, 50, 50, 4, 110, 'bird', 3);
        lavaBlock(-mapMove + 6973, 379, 90, 344, currentBackdrop);
        lavaBlock(-mapMove + 6974, -5, 90, 287, currentBackdrop);
        lavaBlock(-mapMove + 7163, 455, 115, 287, currentBackdrop);
        lavaBlock(-mapMove + 7166, -16, 115, 346, currentBackdrop);
        portal(-mapMove + 7328, 328, 62, 112, currentBackdrop);
        }
            break;
            
        case 35:
        level36: {
        messageSign(450, 101, 27, "Level Made By ScusX (@GiantScus)");
        block(-mapMove + 86, 281, 267, 29, currentBackdrop);
        block(-mapMove + 428, 204, 27, 104, currentBackdrop);
        block(-mapMove + 554, 203, 27, 104, currentBackdrop);
        block(-mapMove + 656, 149, 27, 104, currentBackdrop);
        block(-mapMove + 746, 99, 110, 27, currentBackdrop);
        specialMachineBox(-mapMove + 808, 31, 50, 50, 0, 80, 'emoji-box', 2);
        lavaBlock(-mapMove + 912, 183, 155, 50, currentBackdrop);
        block(-mapMove + 860, 176, 50, 50, currentBackdrop);
        block(-mapMove + 1069, 0, 253, 356, currentBackdrop);
        block(-mapMove + 1323, 174, 400, 31, currentBackdrop);
        ballonblock(-mapMove + 1836, 173, 145, 33, 0, -4, currentBackdrop);
        block(-mapMove + 2025, -15, 180, 36 + 10, currentBackdrop);
        block(-mapMove + 2065, 284, 180, 36, currentBackdrop);
        
        trampoline(-mapMove + 2261, 297, 100, 12, 0, currentBackdrop);
        block(-mapMove + 2370, 87, 50, 287, currentBackdrop);
        block(-mapMove + 2214, 380, 206, 37, currentBackdrop);
        block(-mapMove + 2213, 313, 32, 104, currentBackdrop);
        flagCheckpoint(-mapMove + 2369, -173, 11, 260, 0, currentBackdrop);
        speedBlock(-mapMove + 2524, 99, 124, 50, currentBackdrop);
        block(-mapMove + 2523, 153, 159, 30, currentBackdrop);
        block(-mapMove + 2889, 420, 259, 30, currentBackdrop);
        spike(-mapMove + 2942, 98, 30, currentBackdrop);
        spike(-mapMove + 2940, 62, 30, currentBackdrop);
        spike(-mapMove + 2944, 134, 30, currentBackdrop);
        spike(-mapMove + 2945, 171, 30, currentBackdrop);
        trampoline(-mapMove + 3308, 311, 100, 12, 1, currentBackdrop);
        for(var i = 0; i < 5; i ++) {
            if(i/2 === floor(i/2)) {
                block(-mapMove + 3491 + i * 100, 88, 100, 33, currentBackdrop);
            }
            else {
                block(-mapMove + 3491 + i * 100, 241, 100, 33, currentBackdrop);
            }
        }
        for(var i = 0; i < 5; i ++) {
            if(i/2 === floor(i/2)) {
                lavaBlock(-mapMove + 3491 + i * 100, 249, 98, 33, currentBackdrop);
            }
            else {
                lavaBlock(-mapMove + 3493 + i * 100, 96, 96, 33, currentBackdrop);
            }
        }
        specialMachineBox(-mapMove + 3483, 158, 50, 50, 1, 137, 'gravity-guy', 0);
        block(-mapMove + 3311, 392, 92, 27, currentBackdrop);
        block(-mapMove + 3467, 241, 23, 33, currentBackdrop);
        block(-mapMove + 3991, 241, 232, 33, currentBackdrop);
        spike(-mapMove + 3990, 210, 30, currentBackdrop);
        trampoline(-mapMove + 4350, 490, 100, 12, 2, currentBackdrop);
        speedBlock(-mapMove + 4336, 427, 124, 50, currentBackdrop);
        block(-mapMove + 4291, 158, 40, 20, currentBackdrop);
        trampoline(-mapMove + 4398, 105, 100, 12, 3, currentBackdrop);
        spike(-mapMove + 4508, 18, 30, currentBackdrop);
        block(-mapMove + 4406, 187, 87, 13, currentBackdrop);
        lavaBlock(-mapMove + 4387, -9, 115, 12, currentBackdrop);
        spike(-mapMove + 4481, -7, 30, currentBackdrop);
        block(-mapMove + 4570, 434, 225, 34, currentBackdrop);
        flagCheckpoint(-mapMove + 4614, 174, 11, 260, 1, currentBackdrop);
        specialMachineBox(-mapMove + 4736, 369, 50, 50, 2, 64, 'bird', 0);
        speedBlock(-mapMove + 4857, 237, 124, 50, currentBackdrop);
        block(-mapMove + 5282, 294, 90, 32, currentBackdrop);
        block(-mapMove + 5513, 231, 84, 31, currentBackdrop);
        trampoline(-mapMove + 5708, 140, 100, 12, 4, currentBackdrop);
        block(-mapMove + 5718, 223, 76, 28, currentBackdrop);
        specialMachineBox(-mapMove + 5900, 50, 50, 50, 3, 199, 'bird', 0);
        speedBlock(-mapMove + 6029, 250, 124, 50, currentBackdrop);
        //speedBlock(-mapMove + 6417, 118, 124, 50, currentBackdrop);
        speedBlock(-mapMove + 6900, 405, 124, 50, currentBackdrop);
        spike(-mapMove + 6121, 391, 30, currentBackdrop);
        spike(-mapMove + 6192, 202, 30, currentBackdrop);
        spike(-mapMove + 6464, 320, 30, currentBackdrop);
        spike(-mapMove + 6328, 339, 30, currentBackdrop);
        spike(-mapMove + 6290, 32, 30, currentBackdrop);
        spike(-mapMove + 6607, 102, 30, currentBackdrop);
        spike(-mapMove + 6682, 215, 30, currentBackdrop);
        spike(-mapMove + 6830, 434, 30, currentBackdrop);
        spike(-mapMove + 6939, 257, 30, currentBackdrop);
        spike(-mapMove + 7309, 397, 30, currentBackdrop);
        spike(-mapMove + 7168, 148, 30, currentBackdrop);
        spike(-mapMove + 7368, 35, 30, currentBackdrop);
        spike(-mapMove + 7512, 140, 30, currentBackdrop);
        spike(-mapMove + 7707, 355, 30, currentBackdrop);
        block(-mapMove + 7697, 468, 200, 35, currentBackdrop);
        trampoline(-mapMove + 8008, 442, 100, 12, 5, currentBackdrop);
        trampoline(-mapMove + 8223, 314, 100, 12, 6, currentBackdrop);
        block(-mapMove + 8226, 392, 94, 23, currentBackdrop);
        ballonblockUP(-mapMove + 7544, 498, 94, 23, 1, 2, currentBackdrop);
        speedBlock(-mapMove + 7782, 410, 124, 50, currentBackdrop);
        portal(-mapMove + 8427, 18, 62, 112, currentBackdrop);
        block(-mapMove + 8466, 445, 500, 11, currentBackdrop);
        block(-mapMove + 9000, 371, 600, 11, currentBackdrop);
        block(-mapMove + 9600, 300, 800, 11, currentBackdrop);
        flagCheckpoint(-mapMove + 10150, 40, 11, 260, 2, currentBackdrop);
        trampoline(-mapMove + 10450, 370, 100, 12, 7, currentBackdrop);
        block(-mapMove + 10455, 451, 92, 50, currentBackdrop);
        block(-mapMove + 10849, 296, 122, 29, currentBackdrop);
        speedBlock(-mapMove + 10438, 307, 124, 50, currentBackdrop);
        
        if(mapMove > 12000) {
            var fade = (mapMove - 12000)/4;
            if(fade > 255) { fade = 255; }
            fill(0, 0, 0, fade);
            rect(0, 0, width, height);
            fill(255,0,0, fade);
            //ellipse(playerX+playerSize/2, playerY+playerSize/2, playerSize, playerSize);
        }
        
        block(-mapMove + 11166, 246, 50, 249, currentBackdrop);
        block(-mapMove + 11374, 320, 50, 249, currentBackdrop);
        block(-mapMove + 11629, 278, 50, 249, currentBackdrop);
        ballonblockUP(-mapMove + 11850, 300, 200, 33, 1, 4, currentBackdrop);
        speedBlock(-mapMove + 10854, 237, 124, 50, currentBackdrop);
        lavaBlock(-mapMove + 12062, 102, 18, 231, currentBackdrop);
        block(-mapMove + 12102, 128, 139, 34, currentBackdrop);
        block(-mapMove + 12319, 128, 139, 34, currentBackdrop);
        block(-mapMove + 12547, 181, 200, 31, currentBackdrop);
        flagCheckpoint(-mapMove + 12153, -132, 11, 260, 3, currentBackdrop);
        spike(-mapMove + 12605, 150, 30, currentBackdrop);
        specialMachineBox(-mapMove + 12650, 72, 50, 50, 4, 209, 'gravity-guy', 3);
        lavaBlock(-mapMove + 13010, 19, 20, 50, currentBackdrop);
        block(-mapMove + 12809, 147, 99, 400, currentBackdrop);
        block(-mapMove + 12912, -6, 199, 58, currentBackdrop);
        block(-mapMove + 13132, 218, 99, 300, currentBackdrop);
        block(-mapMove + 13391, 263, 99, 230, currentBackdrop);
        block(-mapMove + 13586, 104, 170, 24, currentBackdrop);
        //spike(-mapMove + 13661, 71, 30, currentBackdrop);
        trampoline(-mapMove + 13858, 220, 100, 12, 8, currentBackdrop);
        block(-mapMove + 13863, 306, 90, 25, currentBackdrop);
        ballonblockUP(-mapMove + 14068 - 5, 184, 213 + 10, 25, 3, 4, currentBackdrop);
        lavaBlock(-mapMove + 14341, 83, 120, 26, currentBackdrop);
        block(-mapMove + 14340, 180, 123, 29, currentBackdrop);
        block(-mapMove + 14339, 19, 123, 78, currentBackdrop);
        speedBlock(-mapMove + 14344, 118, 124, 50, currentBackdrop);
        trampoline(-mapMove + 14595, 415, 100, 12, 9, currentBackdrop);
        lavaBlock(-mapMove + 14718, 321, 22, 89, currentBackdrop);
        block(-mapMove + 14759, 405, 91, 16, currentBackdrop);
        block(-mapMove + 14916, 346, 50, 147, currentBackdrop);
        block(-mapMove + 15091, 346, 50, 147, currentBackdrop);
        block(-mapMove + 15219, 279, 50, 214, currentBackdrop);
        /*trampoline(-mapMove + 15352, 307, 100, 12, 3, currentBackdrop);
        block(-mapMove + 15358, 390, 88, 26, currentBackdrop);
        portal(-mapMove + 15575, 60, 62, 112, currentBackdrop);*/
        trampoline(-mapMove + 15461, 433, 100, 12, 10, currentBackdrop);
        trampoline(-mapMove + 15366, 433, 100, 12, 10, currentBackdrop);
        portal(-mapMove + 15763, 240, 62, 112, currentBackdrop);
        
        if(mapMove < 10200) {
            if(mapMove > 9300) {
                var fade = mapMove - 9300;
                if(fade < 0) { fade = 0; }
                if(fade > 255) { fade = 255; }
                fill(0, 0, 0, fade);
                rect(0, 0, width, height);
                if(mapMove > 9600 && mapMove < 10000) {
                    fill(255,255,255);
                    textSize(35);
                    text("DON'T LET IT\nHAPPEN AGAIN!!!", width / 2, height / 2);
                }
            }
            else if(mapMove > 8700) {
                var fade = mapMove - 8700;
                if(fade < 0) { fade = 0; }
                if(fade > 255) { fade = 255; }
                fill(0, 0, 0, fade);
                rect(0, 0, width, height);
                if(mapMove > 9000) {
                    fill(255,255,255);
                    textSize(32);
                    text("DO YOU KNOW WHAT\nHAPPENED LAST TIME A GUY\nMISSED THE PORTAL?", width / 2, height / 2);
                }
            }
            else if(mapMove > 8000) {
                var fade = mapMove - 8000;
                if(fade > 255) { fade = 255; }
                fill(0, 0, 0, fade);
                rect(0, 0, width, height);
                if(mapMove > 8300) {
                    fill(255,255,255);
                    textSize(35);
                    text("YOU MISSED THE\nPORTAL, DIDN'T YOU?", width / 2, height / 2);
                }
            }
        }
    
    }
            break;
            
        case 36:
        level37: {
        block(-mapMove + 3, 301, 347, 22, currentBackdrop);
        spike(-mapMove + 320, 271, 30, currentBackdrop);
        spike(-mapMove + 290, 271, 30, currentBackdrop);
        block(-mapMove + 402, 600 - mapMove, 102, 27, currentBackdrop);
        block(-mapMove + 574, 146, 11, 412, currentBackdrop);
        block(-mapMove + 746, 843 - mapMove, 11, 412, currentBackdrop);
        block(-mapMove + 887, -600 + mapMove, 66, 18, currentBackdrop);
        speedBlock(-mapMove + 1101, 1336 - mapMove, 124, 50, currentBackdrop);
        specialMachineBox(-mapMove + 1083, 1336 - mapMove, 50, 50, 0, 196, 'gravity-guy', 0);
        block(-mapMove + 1036, 459, 198, 15, currentBackdrop);
        spike(-mapMove + 1200, 429, 30, currentBackdrop);
        block(-mapMove + 1325, 147, 57, 8, currentBackdrop);
        block(-mapMove + 1444, 288, 57, 9, currentBackdrop);
        block(-mapMove + 1575, 147, 57, 9, currentBackdrop);
        block(-mapMove + 1900, 145, 57, 9, currentBackdrop);
        if(mapMove < 1600)
        {
        block(-mapMove + 1758, 327, 64, 9, currentBackdrop);
        }
        if(mapMove > 1650)
        {
        lavaBlock(-mapMove + 1758, 327, 64, 9, currentBackdrop);
        }
        
        if(mapMove < 1920)
        {
        block(-mapMove + 2038, 320, 64, 9, currentBackdrop);
        }
        
        if(mapMove > 1920)
        {
        lavaBlock(-mapMove + 2038, 320, 64, 9, currentBackdrop);
        }
        
        block(-mapMove + 2062, 58, 64, 9, currentBackdrop);
        block(-mapMove + 2249, 311, 126, 11, currentBackdrop);
        flagCheckpoint(-mapMove + 2352, 51, 11, 260, 0, currentBackdrop);
        block(-mapMove + 2507, 315, 48, 14, currentBackdrop);
        block(-mapMove + 2638, 235, 48, 14, currentBackdrop);
        ballonblock(-mapMove + 2811, 237, 48, 14, 0, 9, currentBackdrop);
        ballonblock(-mapMove + 2967, 238, 48, 14, 1, 9, currentBackdrop);
        lavaBlock(-mapMove + 2783, 256, 248, 249, currentBackdrop);
        ballonblockUP(-mapMove + 3118, 256, 102, 26, 2, 5, currentBackdrop);
        block(-mapMove + 3268, 124, 448, 17, currentBackdrop);
        spike(-mapMove + 3409, 95, 30, currentBackdrop);
        spike(-mapMove + 3535, 94, 30, currentBackdrop);
        spike(-mapMove + 3690, 95, 30, currentBackdrop);
        spike(-mapMove + 3690, 63, 30, currentBackdrop);
        spike(-mapMove + 3691, 30, 30, currentBackdrop);
        block(-mapMove + 3283, 2058 - mapMove / 2, 217, 50, currentBackdrop);
        spike(-mapMove + 3365, 2028 - mapMove / 2, 30, currentBackdrop);
        spike(-mapMove + 3477, 2028 - mapMove / 2, 30, currentBackdrop);
        
        block(-mapMove + 3283 + 280, 2058 + 100 - mapMove / 2, 217, 50, currentBackdrop);
        spike(-mapMove + 3365 + 280, 2028 + 100 - mapMove / 2, 30, currentBackdrop);
        spike(-mapMove + 3477 + 280, 2028 + 100 - mapMove / 2, 30, currentBackdrop);
        ballonblock(-mapMove + 3838, 344, 119, 29, 3, 5, currentBackdrop);
        trampoline(-mapMove + 4092, 430, 100, 12, 0, currentBackdrop);
        specialMachineBox(-mapMove + 4226, 387, 50, 50, 1, 363, 'bird', 0);
        lavaBlock(-mapMove + 9022 - mapMove, -4, 34, 391, currentBackdrop);
        lavaBlock(-mapMove + 8850 - mapMove, 151, 384, 31, currentBackdrop);
        lavaBlock(-mapMove + 9022 - mapMove + 800, -4 + 150, 34, 391, currentBackdrop);
        lavaBlock(-mapMove + 8850 - mapMove + 800, 151+ 150, 384, 31, currentBackdrop);
        
        lavaBlock(-mapMove + 9022 - mapMove + 1600, -4, 34, 391, currentBackdrop);
        lavaBlock(-mapMove + 8850 - mapMove + 1600, 151, 384, 31, currentBackdrop);
        lavaBlock(-mapMove + 9022 - mapMove + 2000, -4 + 310, 34, 391, currentBackdrop);
        spike(-mapMove + 6057, 285 + sin(frameCount * 10) * 20, 30, currentBackdrop);
        spike(-mapMove + 6059, 111 - sin(frameCount * 10) * 20, 30, currentBackdrop);
        block(-mapMove + 5703, 302, 129, 27, currentBackdrop);
        block(-mapMove + 5961, 301, 129, 27, currentBackdrop);
        trampoline(-mapMove + 6163, 6430 - mapMove, 100, 12, 0, currentBackdrop);
        block(-mapMove + 6179, 6514 - mapMove, 66, 290, currentBackdrop);
        block(-mapMove + 6408, 402, 103, 16, currentBackdrop);
        spike(-mapMove + 6477, 371, 30, currentBackdrop);
        specialMachineBox(-mapMove + 6569, 6750 - mapMove, 50, 50, 2, 190, 'emoji-box', 3);
        lavaBlock(-mapMove + 6850, 288, 280, 285, currentBackdrop);
        lavaBlock(-mapMove + 6850, -14, 280, 185, currentBackdrop);
        lavaBlock(-mapMove + 7207, 115, 311, 401, currentBackdrop);
        lavaBlock(-mapMove + 7603, -13, 311, 219, currentBackdrop);
        lavaBlock(-mapMove + 7604, 320, 311, 219, currentBackdrop);
        block(-mapMove + 7917, 319, 175, 22, currentBackdrop);
        flagCheckpoint(-mapMove + 8051, 59, 11, 260, 1, currentBackdrop);
        block(-mapMove + 8124, 4403 - mapMove / 2, 130, 26, currentBackdrop);
        spike(-mapMove + 8224, 4373 - mapMove / 2, 30, currentBackdrop);
        
        block(-mapMove + 8124 + 150, 4403 - mapMove / 2 + 100, 130, 26, currentBackdrop);
        spike(-mapMove + 8224 + 150, 4373 - mapMove / 2 + 100, 30, currentBackdrop);
        
        block(-mapMove + 8124 + 300, 4403 - mapMove / 2 + 200, 130, 26, currentBackdrop);
        spike(-mapMove + 8224 + 300, 4373 - mapMove / 2 + 200, 30, currentBackdrop);
        block(-mapMove + 8635, 400, 158, 25, currentBackdrop);
        speedBlock(-mapMove + 8637, 8926 - mapMove, 124, 50, currentBackdrop);
        spike(-mapMove + 8765, 369, 30, currentBackdrop);
        specialMachineBox(-mapMove + 9011, 9316 - mapMove, 50, 50, 3, 243, 'gravity-guy', 0);
        if(mapMove <= 8920)
        {
            block(-mapMove + 8994, 9373 - mapMove, 130, 18, currentBackdrop);
        }
        if(mapMove > 8920)
        {
            block(-mapMove + 8994, 450, 130, 18, currentBackdrop);
        }
        
        block(-mapMove + 9235, -8973 + mapMove, 113, 18, currentBackdrop);
        block(-mapMove + 9421, -9041 + mapMove, 113, 18, currentBackdrop);
        block(-mapMove + 9590, 262, 142, 18, currentBackdrop);
        block(-mapMove + 9773, 462, 99, 18, currentBackdrop);
        spike(-mapMove + 9839, 433, 30, currentBackdrop);
        block(-mapMove + 9901, 203, 68, 19, currentBackdrop);
        portal(-mapMove + 10013, 326, 62, 112, currentBackdrop);        
        }
            break;
            
        case 37:
        level38: {
        block(-mapMove + 6, 299, 298, 29, currentBackdrop);
        spike(-mapMove + 272, 268, 30, currentBackdrop);
        spike(-mapMove + 242, 269, 30, currentBackdrop);
        spike(-mapMove + 485, 758 - mapMove, 30, currentBackdrop);
        spike(-mapMove + 653, 950 - mapMove, 30, currentBackdrop);
        spike(-mapMove + 985, 1199 - mapMove, 30, currentBackdrop);
        block(-mapMove + 383, 406, 133, 101, currentBackdrop);
        block(-mapMove + 600, 434, 143, 73, currentBackdrop);
        block(-mapMove + 879, 429, 145, 62, currentBackdrop);
        if(mapMove >= 1044)
        {
        block(-mapMove + 1138, 366, 70, 16, currentBackdrop);
        }
        if(mapMove >= 1174)
        {
        block(-mapMove + 1275, 442, 34, 16, currentBackdrop);
        }
        trampoline(-mapMove + 1409, 1739 - mapMove, 100, 12, 0, currentBackdrop);
        block(-mapMove + 1435, 1808 - mapMove, 50, 400, currentBackdrop);
        block(-mapMove + 1594, 335, 78, 19, currentBackdrop);
        stroke(204, 0, 255);
        fill(225, 0, 255, 50);
        ellipse(-mapMove + 1670, 292, 15, 90);
        ellipse(-mapMove + 1832, 89, 15, 90);
        ellipse(-mapMove + 1832, 89, 15, 90);
        ellipse(-mapMove + 2190, 427, 90, 15);
        ellipse(-mapMove + 2407, 60, 90, 15);
        noStroke();
        
        if(mapMove >= 1670 - 150 && mapMove <= 1730 && playerY >= 292)
        {
            mapMove = 1730;
            playerY = 80;
        }
        
        if(mapMove >= 2000 && playerY >= 427 && mapMove <= 2300)
        {
            mapMove = 2300;
            playerY = 30;
        }
        
        trampoline(-mapMove + 1932, 419, 100, 12, 1, currentBackdrop);
        specialMachineBox(-mapMove + 2434, 240, 50, 50, 0, 285, 'bird', 0);
        lavaBlock(-mapMove + 5198 - mapMove, -13, 50, 377, currentBackdrop);
        lavaBlock(-mapMove + 5524 - mapMove, -13, 50, 248, currentBackdrop);
        lavaBlock(-mapMove + 5524 - mapMove, 338, 50, 248, currentBackdrop);
        lavaBlock(-mapMove + 5810 - mapMove, -2624 + mapMove, 50, 368, currentBackdrop);
        lavaBlock(-mapMove + 5810 - mapMove, -3140 + mapMove, 50, 368, currentBackdrop);
        lavaBlock(-mapMove + 3160, 3, 50, 391, currentBackdrop);
        lavaBlock(-mapMove + 3387, 332, 50, 391, currentBackdrop);
        lavaBlock(-mapMove + 3387, -22, 50, 225, currentBackdrop);
        lavaBlock(-mapMove + 3552, 228, 50, 100, currentBackdrop);
        block(-mapMove + 3553, 215, 185, 9, currentBackdrop);
        flagCheckpoint(-mapMove + 3671, -44, 11, 260, 0, currentBackdrop);
        speedBlock(-mapMove + 3766, 111, 124, 50, currentBackdrop);
        block(-mapMove + 4029, 255, 120, 11, currentBackdrop);
        spike(-mapMove + 4140, 225, 30, currentBackdrop);
        specialMachineBox(-mapMove + 4009, 201, 50, 50, 1, 322, 'gravity-guy', 0);
        block(-mapMove + 4216, 37, 55, 15, currentBackdrop);
        block(-mapMove + 4547, -2193 + mapMove / 2, 55, 15, currentBackdrop);
        block(-mapMove + 4749, -1994 + mapMove / 2, 97, 15, currentBackdrop);
        spike(-mapMove + 4820, -2022 + mapMove / 2, 30, currentBackdrop);
        block(-mapMove + 4855, -2227 + mapMove / 2, 97, 15, currentBackdrop);
        spike(-mapMove + 4945, -2203 + mapMove / 2, 30, currentBackdrop);
        block(-mapMove + 5014, -2269 + mapMove / 2, 97, 15, currentBackdrop);
        spike(-mapMove + 5101, -2246 + mapMove / 2, 30, currentBackdrop);
        block(-mapMove + 5216, 48, 208, 10, currentBackdrop);
        spike(-mapMove + 5317, 67, 30, currentBackdrop);
        block(-mapMove + 5567, 294, 200, 10, currentBackdrop);
        spike(-mapMove + 5615, 263, 30, currentBackdrop);
        trampoline(-mapMove + 5886, 6062 - mapMove, 100, 12, 1, currentBackdrop);
        block(-mapMove + 5910, 6124 - mapMove, 50, 400, currentBackdrop);
        block(-mapMove + 6048, -5772 + mapMove, 81, 13, currentBackdrop);
        spike(-mapMove + 6247, 6461 - mapMove, 30, currentBackdrop);
        block(-mapMove + 6211, 6477 - mapMove, 104, 13, currentBackdrop);
        specialMachineBox(-mapMove + 6405, 341, 50, 50, 2, 150, 'bird', 0);
        lavaBlock(-mapMove + 12905 - mapMove, -5, 207, 365, currentBackdrop);
        lavaBlock(-mapMove + 12905 - mapMove, 484, 207, 100, currentBackdrop);
        lavaBlock(-mapMove + 12905 + 300 - mapMove, -5, 207, 308, currentBackdrop);
        lavaBlock(-mapMove + 12905 + 300 - mapMove, 428, 207, 100, currentBackdrop);
        lavaBlock(-mapMove + 12905 + 600 - mapMove, -5, 207, 260, currentBackdrop);
        lavaBlock(-mapMove + 12905 + 600 - mapMove, 382, 207, 128, currentBackdrop);
        portal(-mapMove + 6940, 264, 62, 112, currentBackdrop);
        }
            break;
            
        case 38:
        level39: {
            block(-mapMove + 7, 287, 392, 32, currentBackdrop);
        trampoline(-mapMove + 502, 320 + sin(frameCount * 5) * 35, 100, 12, 0, currentBackdrop);
        trampoline(-mapMove + 502 + 200, 320 + cos(frameCount * 5) * 35, 100, 12, 1, currentBackdrop);
        block(-mapMove + 499, 367, 113, 127, currentBackdrop);
        block(-mapMove + 499 + 200, 367, 113, 127, currentBackdrop);
        spike(-mapMove + 1002, 256 + sin(frameCount * 10) * 15, 30, currentBackdrop);
        spike(-mapMove + 1034, 256 + sin(frameCount * 10) * 15, 30, currentBackdrop);
        spike(-mapMove + 1149, 256 + cos(frameCount * 10) * 15, 30, currentBackdrop);
        spike(-mapMove + 1180, 256 + cos(frameCount * 10) * 15, 30, currentBackdrop);
        block(-mapMove + 918, 271, 369, 50, currentBackdrop);
        spike(-mapMove + 1092 + sin(frameCount * 5) * 30, 58 + cos(frameCount * 5) * 30, 30, currentBackdrop);
        spike(-mapMove + 1092 - sin(frameCount * 5) * 30, 58 - cos(frameCount * 5) * 30, 30, currentBackdrop);
        
        specialMachineBox(-mapMove + 1329, 141, 50, 50, 0, 170, 'bird', 0);
        block(-mapMove + 1239, 224, 44, 35, currentBackdrop);
        birdStyle(-mapMove + 1263, 245, 50, -50, -99, "defualt");
        fill(0, 170, 255);
        ellipse(-mapMove + 1253, 235, 25, 20);
        fill(255, 0, 0);
        ellipse(-mapMove + 1253, 235, 2, 20);
        ellipse(-mapMove + 1253, 235, 20, 2);
        
        spike(-mapMove + 1433, 202, 100, currentBackdrop);
        spike(-mapMove + 1433 + 140, 52, 100, currentBackdrop);
        spike(-mapMove + 1433 + 140, 372, 100, currentBackdrop);
        spike(-mapMove + 1634, 244, 45, currentBackdrop);
        spike(-mapMove + 1749, 178, 45, currentBackdrop);
        spike(-mapMove + 1746, 337, 45, currentBackdrop);
        spike(-mapMove + 1852, 275, 45, currentBackdrop);
        lavaBlock(-mapMove + 1459, 277, 45, 21, currentBackdrop);
        lavaBlock(-mapMove + 1600, 128, 45, 21, currentBackdrop);
        lavaBlock(-mapMove + 1601, 447, 45, 21, currentBackdrop);
        lavaBlock(-mapMove + 1646, 279, 21, 10, currentBackdrop);
        lavaBlock(-mapMove + 1763, 212, 18, 10, currentBackdrop);
        lavaBlock(-mapMove + 1761, 372, 18, 10, currentBackdrop);
        lavaBlock(-mapMove + 1866, 308, 18, 10, currentBackdrop);
        lavaBlock(-mapMove + 1703, 17, 239, 110, currentBackdrop);
        lavaBlock(-mapMove + 1710, 419, 239, 133, currentBackdrop);
        block(-mapMove + 1955, 213, 50, 50, currentBackdrop);
        
        block(-mapMove + 2146, 215, 50, 50, currentBackdrop);
        
        block(-mapMove + 2321, 1500 - mapMove / 2, 77, 65, currentBackdrop);
        emojiBody(-mapMove + 2321 + (77 / 2), 1538 - mapMove / 2, 108, "frustrated");
        
        emojiBody(-mapMove + 2146 + 25, 215 + 30, 80, "dead");
        
        fill(77, 77, 77, 100);
        ellipse(-mapMove + 2146 + 25, 215 + 30, 80, 80);
        
        if(mapMove >= 2204)
        {
            block(-mapMove + 2525, 289, 51, 46, currentBackdrop);
            emojiBody(-mapMove + 2551, 216 + 100, 76, "sick");
            noStroke();
        }
        
        if(mapMove >= 2404)
        {
            block(-mapMove + 2692, 240, 50, 50, currentBackdrop);
            emojiBody(-mapMove + 2717, 216 + 53, 78, "eyeballroll");
            fill(0, 0, 0);
            ellipse(-mapMove + 2702, 216 + 41, 27, 27);
            ellipse(-mapMove + 2732, 216 + 41, 27, 27);
            fill(252, 0, 8);
            ellipse(-mapMove + 2702, 216 + 41, 15, 15);
            ellipse(-mapMove + 2732, 216 + 41, 15, 15);
        }
        
        block(-mapMove + 2840, 345, 23, 19, currentBackdrop);
        emojiBody(-mapMove + 2852, 216 + 142, 38, "frustrated");
        fill(255, 0, 0, 100);
        ellipse(-mapMove + 2852, 216 + 142, 38, 38);
        
        ballonblockUP(-mapMove + 2996, 341, 117, 28, 0, 5, currentBackdrop);
        ballonblock(-mapMove + 3263, -1353 + mapMove / 2, 112, 27, 1, 4, currentBackdrop);
        
        block(-mapMove + 3496, 253, 139, 24, currentBackdrop);
        specialMachineBox(-mapMove + 3576, 195, 50, 50, 1, 188, 'gravity-guy', 0);
        block(-mapMove + 3665, 42, 112, 29, currentBackdrop);
        block(-mapMove + 3881, 122, 112, 29, currentBackdrop);
        spike(-mapMove + 3648, 228, 30, currentBackdrop);
        spike(-mapMove + 3670, 163, 30, currentBackdrop);
        spike(-mapMove + 3791, 80, 30, currentBackdrop);
        spike(-mapMove + 3825, 109, 30, currentBackdrop);
        flagCheckpoint(-mapMove + 3516, -7, 11, 260, 0, currentBackdrop);
        trampoline(-mapMove + 4050, 410, 100, 12, 0, currentBackdrop);
        block(-mapMove + 4185, 409, 109, 23, currentBackdrop);
        block(-mapMove + 4225, 440, 27, 63, currentBackdrop);
        block(-mapMove + 4298, 369, 47, 63, currentBackdrop);
        specialMachineBox(-mapMove + 4353, 396, 50, 50, 2, 188, 'bird', 0);
        
        lavaBlock(-mapMove + 4560, 272 + 30, 197, 191, currentBackdrop);
        
        lavaBlock(-mapMove + 4531, 314 + 30, 33, 79, currentBackdrop);
        spike(-mapMove + 4539, 375 + 30, 30, currentBackdrop);
        spike(-mapMove + 4514, 333 + 30, 30, currentBackdrop);
        spike(-mapMove + 4522, 311 + 30, 30, currentBackdrop);
        spike(-mapMove + 4535, 304 + 30, 30, currentBackdrop);
        
        noStroke();
        birdStyle(-mapMove + 4560 + (197 / 2), 272 + (191 / 2) + 30, 197, -196, -90, "defualt");
        
        fill(0, 170, 255);
        ellipse(-mapMove + 4620, 330 + 30, 80, 80);
        
        fill(255, 0, 0);
        ellipse(-mapMove + 4620, 330 + 30, 40, 20 + sin(frameCount * 5) * 15);
        
        fill(0, 54, 135);
        pushMatrix();
        translate(-mapMove + 4617, 300 + 30);
        rotate(-20 + sin(frameCount * 5) * 4);
        ellipse(0, 0, 80, 4);
        popMatrix();
        
        spike(-mapMove + 4633 + cos(frameCount * 10) * 10, 88 + sin(frameCount * 10) * 10, 30, currentBackdrop);
        spike(-mapMove + 4633 + cos(frameCount * 10) * 40, 88 + sin(frameCount * 10) * 40, 30, currentBackdrop);
        spike(-mapMove + 4633 + cos(frameCount * 10) * 70, 88 + sin(frameCount * 10) * 70, 30, currentBackdrop);
        spike(-mapMove + 4783, 215, 30, currentBackdrop);
        spike(-mapMove + 4758, 255, 30, currentBackdrop);
        spike(-mapMove + 4823, 110, 30, currentBackdrop);
        spike(-mapMove + 4810, 58, 30, currentBackdrop);
        lavaBlock(-mapMove + 4918, -1, 50, 251, currentBackdrop);
        lavaBlock(-mapMove + 4920, 389, 50, 251, currentBackdrop);
        block(-mapMove + 5097, 291, 140, 38, currentBackdrop);
        block(-mapMove + 5374, 289, 140, 38, currentBackdrop);
        block(-mapMove + 5653, 290, 140, 38, currentBackdrop);
        block(-mapMove + 5864, 389, 33, 38, currentBackdrop);
        block(-mapMove + 6007, 321, 99, 35, currentBackdrop);
        specialMachineBox(-mapMove + 6244, 315, 50, 50, 3, 129, 'emoji-box', 3);
        
        lavaBlock(-mapMove + 6562, 167, 24, 233, currentBackdrop);
        lavaBlock(-mapMove + 6731, 168, 24, 233, currentBackdrop);
        lavaBlock(-mapMove + 6562, -11, 193, 182, currentBackdrop);
        lavaBlock(-mapMove + 6562, 398, 193, 182, currentBackdrop);
        lavaBlock(-mapMove + 6826, 119, 25, 182, currentBackdrop);
        lavaBlock(-mapMove + 6826, 119, 336, 25, currentBackdrop);
        lavaBlock(-mapMove + 6826, 276, 336, 25, currentBackdrop);
        lavaBlock(-mapMove + 7140, 119, 25, 182, currentBackdrop);
        portal(-mapMove + 7222, 54, 62, 112, currentBackdrop);
        
        noStroke();
        }
            break;
            
        case 39:
        leve40: {
            
        messageSign(450, 101, 27, "Level Made By ScusX (@GiantScus)");
        pushMatrix();
        if(!testMode && mapMove > 1500) {
            translate(width/2, height/2);
            
            if(mapMove > 10000) {
                if(mapMove%330 < 6) {
                    translate(30, -80);
                }
                if(mapMove%700 < 6) {
                    translate(100, -80);
                }
                if(mapMove%450 < 6) {
                    scale(-0.5, 0.9);
                }
                if(mapMove%800 < 6) {
                    rotate(90);
                }
                if(mapMove%500 < 6) {
                    scale(1, 0.5);
                }
                if(mapMove%1210 < 6) {
                    scale(1, 0.5);
                }
            }
            
            if(mapMove > 15000) {
                if(mapMove%480 < 6) {
                    rotate(mapMove%360);
                }
                if(mapMove%1050 < 6) {
                    translate(100, -80);
                }
                if(mapMove%1150 < 6) {
                    translate(130, 20);
                }
                if(mapMove%1550 < 6) {
                    translate(230, 20);
                }
                if(mapMove%1350 < 6) {
                    scale(1, 0.5);
                }
                if(mapMove%150 < 6) {
                    scale(1, 0.9);
                }
            }
            
            if(mapMove > 19000) {
                if(mapMove%520 < 6) {
                    rotate((mapMove%180) * 2);
                }
                if(mapMove%530 < 6) {
                    translate(-90, 50);
                }
                if(mapMove%680 < 6) {
                    translate(130, 20);
                }
                if(mapMove%1630 < 6) {
                    translate(230, -200);
                }
                if(mapMove%1092 < 6) {
                    scale(0.75, 0.25);
                }
                if(mapMove%1050 < 6) {
                    scale(0.8, 2);
                }
            }
            
            if(mapMove%450 < 6) {
                scale(-1, 1);
            }
            if(mapMove%350 < 6) {
                scale(1, -1);
            }
            if(mapMove%750 > 36 && mapMove%750 < 40) {
                scale(-1, -1);
            }
            if(mapMove%650 > 36 && mapMove%650 < 45) {
                rotate(90);
            }
            if(mapMove%850 > 26 && mapMove%850 < 35) {
                rotate(-90);
            }
            
            translate(-width/2, -height/2);
        }
        
        //Note that these levels play with a lot of variables that they're not supposed to play with. It may bug out in updated versions of the game. Please don't update the game's engine, as you might break this level.
        
        //In the final game, I would like to remove the checks for being in the editor in the level since the editor really bugs out in some weird ways without these checks ;)
        glitchLevel:{
        if(abs((-(playerX + playerSize/2) + 14402) - (mapMove)) < 10 && abs(300 - (playerY+playerSize/2)) < 100) {
            playerY -= 200;
        }
        if(!testMode) {
            if(extraSpeedTimer > 0 && !death) {
                mapMove += 10;
            }
            if(mapMove >= 1000 && mapMove < 1010 && ballonBlockMove[0] >= -1) {
                if(ballonBlockMove[1] === 0) {
                    ballonBlockMove[2] = playerY;
                    ballonBlockMove[3] = playerGravity;
                    ballonBlockMove[1] = 1;
                }
                mapMove = 1000;
                ballonBlockMove[0] ++;
                if(ballonBlockMove[0] > 20) {
                    ballonBlockMove[0] = -2;
                    ballonBlockMove[1] = 0;
                }
            }
            if(mapMove >= 1050 && mapMove < 1060 && ballonBlockMove[0] >= -2) {
                if(ballonBlockMove[1] === 0) {
                    ballonBlockMove[2] = playerY;
                    ballonBlockMove[3] = playerGravity;
                    ballonBlockMove[1] = 1;
                }
                mapMove = 1050;
                ballonBlockMove[0] ++;
                if(ballonBlockMove[0] > 40) {
                    ballonBlockMove[0] = -3;
                    ballonBlockMove[1] = 0;
                }
            }
            if(mapMove >= 1100 && mapMove < 1110 && ballonBlockMove[0] >= -3) {
                if(ballonBlockMove[1] === 0) {
                    ballonBlockMove[2] = playerY;
                    ballonBlockMove[3] = playerGravity;
                    ballonBlockMove[1] = 1;
                }
                mapMove = 1100;
                ballonBlockMove[0] ++;
                if(ballonBlockMove[0] > 60) {
                    ballonBlockMove[0] = -4;
                    ballonBlockMove[1] = 0;
                }
            }
            if(mapMove >= 1130 && mapMove < 1140 && ballonBlockMove[0] >= -4) {
                if(ballonBlockMove[1] === 0) {
                    ballonBlockMove[2] = playerY;
                    ballonBlockMove[3] = playerGravity;
                    ballonBlockMove[1] = 1;
                }
                mapMove = 1130;
                ballonBlockMove[0] ++;
                if(ballonBlockMove[0] > 30) {
                    ballonBlockMove[0] = -5;
                    ballonBlockMove[1] = 0;
                }
            }
            if(mapMove >= 1170 && mapMove < 1180 && ballonBlockMove[0] >= -5) {
                if(ballonBlockMove[1] === 0) {
                    ballonBlockMove[2] = playerY;
                    ballonBlockMove[3] = playerGravity;
                    ballonBlockMove[1] = 1;
                }
                mapMove = 1170;
                ballonBlockMove[0] ++;
                if(ballonBlockMove[0] > 70) {
                    ballonBlockMove[0] = -6;
                    ballonBlockMove[1] = 0;
                }
            }
            if(mapMove >= 1200 && mapMove < 1210 && ballonBlockMove[0] >= -6) {
                if(ballonBlockMove[1] === 0) {
                    ballonBlockMove[2] = playerY;
                    ballonBlockMove[3] = playerGravity;
                    ballonBlockMove[1] = 1;
                }
                mapMove = 1200;
                ballonBlockMove[0] ++;
                if(ballonBlockMove[0] > 200) {
                    ballonBlockMove[0] = -7;
                    ballonBlockMove[1] = 0;
                }
            }
            if(ballonBlockMove[1] === 1) {
                playerY = ballonBlockMove[2];
                playerGravity = ballonBlockMove[3];
            }
        }
        
        if(mapMove > 500 && !testMode && mapMove < 1200) {
            var speed = (mapMove - 500) / 100;
            if(speed > 2.5) {
                speed = 2.5;
            }
            mapMove -= speed;
            mapMove = round(mapMove);
        }
        block(-mapMove + 70, 248, 330, 35, currentBackdrop);
        spike(-mapMove + 231, 217, 30, currentBackdrop);
        block(-mapMove + 285, 226, 89, 14, currentBackdrop);
        block(-mapMove + 376, 162, 89, 14, currentBackdrop);
        block(-mapMove + 524, 128, 89, 14, currentBackdrop);
        block(-mapMove + 708, 218, 181, 31, currentBackdrop);
        flagCheckpoint(-mapMove + 1378, 33, 11, 260, 0, currentBackdrop);
        trampoline(-mapMove + 990, 304, 100, 12, 0, currentBackdrop);
        trampoline(-mapMove + 1190, 304, 100, 12, 1, currentBackdrop);
        trampoline(-mapMove + 1090, 304, 100, 12, 2, currentBackdrop);
        block(-mapMove + 1004, 388, 268, 32, currentBackdrop);
        block(-mapMove + 1376, 292, 50, 50, currentBackdrop);
        ballonblock(-mapMove + 1484, 296, 50, 50, 4, 3, currentBackdrop);
        ballonblock(-mapMove + 1544, 241, 50, 50, 5, 6, currentBackdrop);
        ballonblock(-mapMove + 1604, 340, 50, 50, 6, 2, currentBackdrop);
        block(-mapMove + 2066, 206, 50, 50, currentBackdrop);
        block(-mapMove + 2196, 203, 50, 50, currentBackdrop);
        pushMatrix();
        rotate(-10);
        trampoline(-mapMove + 1733, 339, 100, 12, 3, currentBackdrop);
        rotate(20);
        trampoline(-mapMove + 1870, 255, 100, 12, 4, currentBackdrop);
        popMatrix();
        ballonblock(-mapMove + 2336, 233, 78, 38, 7, 51, currentBackdrop);
        ballonblock(-mapMove + 2460, 281, 78, 38, 8, 51, currentBackdrop);
        trampoline(-mapMove + 2603, 317, 100, 12, 6, currentBackdrop);
        if(trampAnimation[6] > 10) {
            playerY = -50;
        }
        block(-mapMove + 2875, 155, 279, 26, currentBackdrop);
        speedBlock(-mapMove + 3128, 83, 124, 50, currentBackdrop);
        block(-mapMove + 3516, 259, 70, 253, currentBackdrop);
        block(-mapMove + 3888, 179, 70, 323, currentBackdrop);
        pushMatrix();
        translate(100, 0);
        trampoline(-mapMove + 4194, 279, 100, 12, 7, currentBackdrop);
        popMatrix();
        
        if(mapMove > 4300 && mapMove < 5150) {
            playerX -= 2;
            block(playerX - 30, 200, 100, 40, currentBackdrop);
        }
        else {
            playerX = 82;
        }
        
        spike(-mapMove + 4750, 151, 30, currentBackdrop);
        spike(-mapMove + 5109, 151, 30, currentBackdrop);
        spike(-mapMove + 5165, 151, 30, currentBackdrop);
        spike(-mapMove + 5165, 117, 30, currentBackdrop);
        spike(-mapMove + 5108, 115, 30, currentBackdrop);
        spike(-mapMove + 5109, 77, 30, currentBackdrop);
        spike(-mapMove + 5157, 76, 30, currentBackdrop);
        spike(-mapMove + 5133, 39, 30, currentBackdrop);
        spike(-mapMove + 5133, 1, 30, currentBackdrop);
        
        if(mapMove > 5100) {
            block(-mapMove + 5233, 194, 148, 23, currentBackdrop);
        }
        if(mapMove > 5250) {
            block(-mapMove + 5433, 130, 148, 23, currentBackdrop);
        }
        
        if(mapMove > 5400) {
            ballonblockUP(-mapMove + 5618, 60, 148, 23, 9, -4, currentBackdrop);
        }
        else if(mapMove > 5300) {
            ballonblockUP(-mapMove + 5619, 191, 148, 23, 9, 0, currentBackdrop);
        }
        
        if(mapMove > 5500) {
            block(-mapMove + 5841, -60, 24, 225, currentBackdrop);
        }
        
        block(-5700 + mapMove, 260, 200, 20, currentBackdrop);
        
        block(-mapMove*2 + 5885*2, 187, 105, 22, currentBackdrop);
        block(-mapMove*2 + 5985*2, 137, 105, 22, currentBackdrop);
        if(mapMove > 5900 && mapMove < 6320) {
            trampoline(50, 500 + sin(mapMove-5900)*350, 100, 12, 8, currentBackdrop);
            block(50, 580 + sin(mapMove-5900)*350, 100, 400, currentBackdrop);
        }
        if(mapMove > 6600 && mapMove < 7020) {
            trampoline(50, 500 + sin(mapMove-6600)*350, 100, 12, 9, currentBackdrop);
            block(50, 580 + sin(mapMove-6600)*350, 100, 400, currentBackdrop);
        }
        block(-mapMove + 6438, 202, 122, 23, currentBackdrop);
        block(-mapMove + 6627, 138, 149, 21, currentBackdrop);
        block(-mapMove + 7117, 138, 149, 21, currentBackdrop);
        block(mapMove - 7379, 241, 170, 21, currentBackdrop);
        block(mapMove - 7579, 330, 50, 21, currentBackdrop);
        block(mapMove - 7720, 330, 70, 21, currentBackdrop);
        
        if(mapMove > 7200) {
            if(mapMove < 7400) {
                lavaBlock(0, 500 - sin((mapMove - 7020)/2)*200, 500, 200, currentBackdrop);
            }
        }
        else if(mapMove > 5580) {
            lavaBlock(0, 300, 500, 200, currentBackdrop);
        }
        else if(mapMove > 5400) {
            lavaBlock(0, 500 - sin((mapMove - 5400)/2)*200, 500, 200, currentBackdrop);
        }
        
        specialMachineBox(-mapMove + 7989, 250, 50, 50, 0, 230, 'bird', 0);
        if(mapMove > 7900 && mapMove < 8500) {
            lavaBlock(0, 500-sin((mapMove-7900)/2) * 350, 500, 50, currentBackdrop);
        }
        if(mapMove > 7950 && mapMove < 8680) {
            lavaBlock(0, -sin((mapMove-7900)/2) * 300, 500, 50, currentBackdrop);
        }
        block(-mapMove + 8915, 229, 179, 28, currentBackdrop);
        flagCheckpoint(-mapMove + 8945, -31, 11, 260, 1, currentBackdrop);
        ballonblock(-mapMove + 9171, 231, 1000, 25, 10, sin((mapMove - 9000)*2)*10, currentBackdrop);
        block(-mapMove + 10194, 41, 160, 500, currentBackdrop);
        trampoline(-mapMove + 10490, 145, 100, 12, 10, currentBackdrop);
        if(mapMove > 10650 && mapMove < 10800) {
            playerGravity = -(mapMove - 10650)*0.05;
        }
        
        noStroke();
        fill(255, 255, 255, 100);
        rect(-mapMove + 10650 + playerX, 0, 150, 500);
        var c = -mapMove + 10725 + playerX;
        for(var i = -(mapMove - 10700)%100 - 100; i < height; i += 100) {
            beginShape();
            vertex(c, i);
            vertex(c-50, i+50);
            vertex(c+50, i+50);
            endShape();
        }
        block(-mapMove + 10979, 231, 119, 35, currentBackdrop);
        block(-mapMove + 10496, 225, 89, 21, currentBackdrop);
        pushMatrix();
        translate(-100, 100);
        rotate(-30);
        trampoline(-mapMove + 11250, 260, 100, 12, 11, currentBackdrop);
        popMatrix();
        
        if(mapMove > 11300) {
            block(0, 170+(mapMove-11300), 200, 30, currentBackdrop);
        }
        
        trampoline(mapMove - 11703, 437, 100, 12, 12, currentBackdrop);
        block(-mapMove + 12020, 420, 70, 70, currentBackdrop);
        
        /*fill(240, 150, 0);
        pushMatrix();
        translate(-mapMove + 600, 200);
        for(var i = 0; i < 100; i += 20) {
            quad(0 + i, 0, 30 + i, 30, 10 + i, 0, 30 + i, -30);
        }
        popMatrix();*/
        
        block(-mapMove + 12191, 383, 50, 120, currentBackdrop);
        block(-mapMove + 12326, 337, 50, 160, currentBackdrop);
        ballonblock(-mapMove + 12455, 311, 100, 31, 11, 50, currentBackdrop);
        ballonblock(-mapMove + 12567, 311, 118, 31, 12, -200, currentBackdrop);
        if(mapMove > 12600) {
            block(-mapMove + 12732, 52, 140, 25, currentBackdrop);
        }
        block(mapMove - 12975, 207, 220, 25, currentBackdrop);
        lavaBlock(-mapMove + 12823, -80, 1000, 50, currentBackdrop);
        trampoline(-mapMove + 13214, 269, 100, 12, 13, currentBackdrop);
        if(mapMove > 13300) {
            lavaBlock(-mapMove + 13383, 153, 155, 88, currentBackdrop);
        }
        block(-mapMove + 13292, 372, 285, 24, currentBackdrop);
        block(mapMove - 13592, 372, 285, 24, currentBackdrop);
        spike(-mapMove + 13547, 338, 30, currentBackdrop);
        spike(-mapMove + 13709, 338, 30, currentBackdrop);
        trampoline(-mapMove + 13615, 428, 100, 12, 14, currentBackdrop);
        trampoline(mapMove - 13815, 428, 100, 12, 15, currentBackdrop);
        block(-mapMove + 14070, 372, 285, 24, currentBackdrop);
        spike(-mapMove + 14250, 337, 30, currentBackdrop);
        block(-mapMove + 14388, 172, 178, 28, currentBackdrop);
        
        noFill();
        strokeWeight(3);
        stroke(0, 255, 60);
        ellipse(14402 - mapMove, 220, 50, 200);
        
        noStroke();
        fill(242, 180, 34);
        ellipse(14402 - mapMove, 320, 50, 100);
        fill(207, 151, 20);
        ellipse(14401 - mapMove, 320, 43, 90);
        
        fill(37, 127, 230);
        ellipse(14402 - mapMove, 120, 50, 100);
        fill(32, 105, 189);
        ellipse(14403 - mapMove, 120, 43, 90);
        
        noFill();
        strokeWeight(3);
        stroke(0, 255, 60);
        ellipse(14802 - mapMove, 200, 40, 300);
        
        noStroke();
        fill(242, 180, 34);
        ellipse(14802 - mapMove, 50, 50, 100);
        fill(207, 151, 20);
        ellipse(14801 - mapMove, 50, 43, 90);
        
        fill(37, 127, 230);
        ellipse(14802 - mapMove, 350, 50, 100);
        fill(32, 105, 189);
        ellipse(14803 - mapMove, 350, 43, 90);
        
        block(-mapMove + 14373, 372, 60, 20, currentBackdrop);
        block(-mapMove + 14608, 103, 200, 28, currentBackdrop);
        if(mapMove > 14770) {
            block(-mapMove + 14956, 150, 178, 28, currentBackdrop);
        }
        else {
            block(-mapMove + 14782, 409, 178, 28, currentBackdrop);
        }
        if(mapMove > 14950) {
            block(-mapMove + 15197, 80, 178, 28, currentBackdrop);
        }
        
        if(mapMove > 15200 && mapMove < 15500) {
            trampoline(50, 500 - sin(mapMove - 15300)*350, 100, 12, 16, currentBackdrop);
            block(50, 580 - sin(mapMove - 15300)*350, 100, 330, currentBackdrop);
        }
        
        block(mapMove - 15501, 183, 80, 33, currentBackdrop);
        ballonblockUP(-mapMove + 15848, 190, 180, 33, 13, 4, currentBackdrop);
        block(-mapMove + 16052, -17, 142, 528, currentBackdrop);
        block(-mapMove + 16391, 195, 347, 29, currentBackdrop);
        spike(-mapMove + 16457, 162, 30, currentBackdrop);
        spike(-mapMove + 16600, 162, 30, currentBackdrop);
        specialMachineBox(-mapMove + 16696, 142, 50, 50, 2, 159, 'gravity-guy', 0);
        block(-mapMove + 16819, 270, 153, 34, currentBackdrop);
        ballonblock(-mapMove + 16971, -25, 276, 27, 14, 3, currentBackdrop);
        block(-mapMove + 17396, 249, 209, 22, currentBackdrop);
        block(mapMove - 17700, 335, 209, 22, currentBackdrop);
        spike(mapMove - 17610, 305, 30, currentBackdrop);
        trampoline(-mapMove + 18017, 338, 100, 12, 17, currentBackdrop);
        block(-mapMove + 18017, 410, 100, 30, currentBackdrop);
        block(-mapMove + 18226, 278, 167, 31, currentBackdrop);
        ballonblock(-mapMove + 18469, 240, 137, 31, 15, -5, currentBackdrop);
        block(-mapMove + 18752, 15, 117, 23, currentBackdrop);
        trampoline(-mapMove + 18945, 192, 100, 12, 18, currentBackdrop);
        block(-mapMove + 19147, 125, 182, 29, currentBackdrop);
        block(-mapMove + 19443, 106, 178, 26, currentBackdrop);
        trampoline(-mapMove + 19769, 425, 100, 12, 19, currentBackdrop);
        block(-mapMove + 20020, 385, 144, 27, currentBackdrop);
        ballonblockUP(-mapMove + 20246, 327, 144, 27, 16, 7, currentBackdrop);
        trampoline(-mapMove + 20457, 37, 100, 12, 20, currentBackdrop);
        block(-mapMove + 20464, 120, 86, 387, currentBackdrop);
        block(-mapMove + 20681, 88, 96, 426, currentBackdrop);
        trampoline(-mapMove + 20910, 151, 100, 12, 0, currentBackdrop);
        lavaBlock(-mapMove + 21201, 105, 28, 26, currentBackdrop);
        block(-mapMove + 21103, 116, 207, 22, currentBackdrop);
        if(mapMove < 21200) {
            block(-mapMove + 21409, 223, 104, 30, currentBackdrop);
        }
        else {
            block(-mapMove + 21419, 66, 104, 30, currentBackdrop);
        }
        block(-mapMove + 21654, 250, 159, 24, currentBackdrop);
        portal(-mapMove + 21799, 122, 62, 112, currentBackdrop);
        
        popMatrix();
        
        if(!testMode) {
            if(mapMove < 1210) {
                for(var i = 0; i < 20; i ++) {
                    for(var j = 0; j < 20; j ++) {
                        var alph = (mapMove / 4 - 100) + noise(i/5,j/5,mapMove/100)*50;
                        if(alph < 0) {
                            alph = 0;
                        }
                        if(alph > 255) {
                            alph = 255;
                        }
                        fill(0, 0, 0, alph);
                        rect(i*25,j*25,25,25);
                    }
                }
            }
            else {
                for(var i = 0; i < 20; i ++) {
                    for(var j = 0; j < 20; j ++) {
                        var alph = 50 + noise(i/5,j/5,mapMove/100)*100;
                        if(alph < 0) {
                            alph = 0;
                        }
                        if(alph > 255) {
                            alph = 255;
                        }
                        fill(0, 0, 0, alph);
                        rect(i*25,j*25,25,25);
                    }
                }
            }
        }
        
        if((mapMove > 500 && mapMove < 505)||(mapMove > 600 && mapMove < 605)||(mapMove > 750 && mapMove < 760)||(mapMove > 800 && mapMove < 815)||ballonBlockMove[1] === 1) {
            var a = (mapMove - 490)/5;
            pushMatrix();
            translate(width/2,height/2);
            fill(0, 0, 0, a);
            ellipse(0, 0, 300, 300);
            fill(255, 255, 255, a);
            quad(20, -20, 80, -40, 80, -90, 20, -50);
            quad(-20, -20, -80, -40, -80, -90, -20, -50);
            fill(0, 0, 0, a);
            ellipse(45, -43, 20, 20);
            ellipse(-45, -43, 20, 20);
            if(ballonBlockMove[1] === 1) {
                fill(255, 255, 255, a);
                textSize(60);
                if(ballonBlockMove[0]%30 > 8) {
                    text('How Dare you\nAWAKEN ME?!?!', 0, 100);
                }
                else {
                    text(glitchText('How Dare you\nAWAKEN ME?!?!'), 0, 100);
                }
                /*rotate(-30);
                textSize(30);
                text('Warning! Warning!', 0, -180);
                rotate(-2);
                text('This level is broken', 30, -140);
                rotate(5);
                text('NaNNaNNaN', 60, -160);
                rotate(20);
                text("ERROR Something went wrong", 30, -130);*/
            }
            popMatrix();
        }
        
        if(mapMove > 21644) {
            textSize(70);
            fill(255, 255, 255);
            mapMove = 21644;
            if(ballonBlockMove[20] === undefined) {
                ballonBlockMove[20] = 0;
            }
            ballonBlockMove[20] ++;
            if(ballonBlockMove[20] < 60) {
                text(glitchText("No you don't"), width/2, height/2);
            }
            else if(ballonBlockMove[20] < 120) {
                text("No you don't", width/2, height/2);
            }
            else if(ballonBlockMove[20] < 170) {
                text(glitchText("You can\nnever win"), width/2, height/2);
            }
            else if(ballonBlockMove[20] < 230) {
                text("You can\nnever win", width/2, height/2);
            }
            else if(ballonBlockMove[20] < 300) {
                text(glitchText("THIS IS NOT\nTHE END!!!"), width/2, height/2);
            }
            else if(ballonBlockMove[20] < 400) {
                text("THIS IS NOT\nTHE END!!!", width/2, height/2);
            }
            else {
                textSize(35);
                background(0, 0, 0);
                var txts = 'THE END\n\nGame Design:\nISAAC EMERALD\n\nLevels:\nISAAC EMERALD\nScusX\nThēphāntømprøgrāmmēr\nFunkyChicken\n\nGraphics:\nISAAC EMERALD\n\nAn Emerald Games Production';
                var n = ballonBlockMove[20]%430;
                if(n < 8 || (n > 80 && n < 86) || (n > 183 && n < 187) || (n > 272 && n < 279) || (n > 340 && n < 350) || (n > 380 && n < 390)) {txts = glitchText(txts);}
                textAlign(CENTER, TOP);
                text(txts, 0, 500-(ballonBlockMove[20]-400), width, 10000);
                
                textAlign(CENTER, CENTER);
                if(ballonBlockMove[20] > 1600) {
                    levelDone = true;
                }
            }
        }
        
        }
        }
            break;
    }
};

//title (Emoji Dash)
var title = function(){
    
    pushMatrix();
    
    translate(-111, 44);
    
    scale(1.4);
    
    noFill();
    stroke(0, 84, 168);
    strokeWeight(11);
    
    var shapeXpos = 116;
    var shapeYpos = -17;
    var shapeX = [64,29,29,43,28,28,63];
    var shapeY = [43,44,56,67,75,95,95];
    beginShape();for(var i =0;i<shapeX.length;++i){vertex(shapeX[i] + shapeXpos, shapeY[i] + shapeYpos);}endShape();
    
    var shapeXpos = 114;
    var shapeYpos = -18;
    var shapeX = [80,85,86,103,122,123,126];
    var shapeY = [97,45,45,75,45,45,97];
    beginShape();for(var i =0;i<shapeX.length;++i){vertex(shapeX[i] + shapeXpos, shapeY[i] + shapeYpos);}endShape();
    
    var shapeXpos = 114;
    var shapeYpos = -15;
    var shapeX = [224,224,215,204,200];
    var shapeY = [44,87,95,94,87];
    beginShape();for(var i =0;i<shapeX.length;++i){vertex(shapeX[i] + shapeXpos, shapeY[i] + shapeYpos);}endShape();
    
    var shapeXpos = 116;
    var shapeYpos = -17 - 10;
    var shapeX = [47,67,65,28,29, 57];
    var shapeY = [154,151,176,180,129, 126];
    beginShape();for(var i =0;i<shapeX.length;++i){vertex(shapeX[i] + shapeXpos, shapeY[i] + shapeYpos);}endShape();
    
    var shapeXpos = 183;
    var shapeYpos = 60 - 10;
    var shapeX = [80,85,86,103,122,123,126];
    var shapeY = [97,45,45,75,45,45,97];
    beginShape();for(var i =0;i<shapeX.length;++i){vertex(shapeX[i] + shapeXpos, shapeY[i] + shapeYpos);}endShape();
    
    var shapeXpos = 302;
    var shapeYpos = 63 - 10;
    var shapeX = [64,29,29,43,28,28,63];
    var shapeY = [46,44,56,69,75,95,99];
    beginShape();for(var i =0;i<shapeX.length;++i){vertex(shapeX[i] + shapeXpos, shapeY[i] + shapeYpos);}endShape();
    
    rect(357, 28, 1, 50);
    
    noStroke();
    emojiBody(281, 53, 60, "winky");
    poopEmoji(205, 136 - 10, 34);
    
    textFont(createFont("Tahoma Bold"));
    textSize(24);
    fill(0, 84, 168);
    text("THE", 190, 9);
    textSize(13);
    fill(0, 166, 17);
    text('\x2d\x20\x49\x53\x41\x41\x43\x20\x45\x4d\x45\x52\x41\x4c\x44', 250, 165);
    textFont(createFont("Calabri (body)"));
    popMatrix();

};

//buttons for levels
var buttonAnimattion2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var buttonLevel = function(x, y, d, pageSwitch, BNUM, dificulty)
{
    noFill();
    strokeWeight(d / 12);
    stroke(0, 0, 0, 50);
    ellipse(x, y + d / 16, d, d);
    
    if(dist(mouseX, mouseY, x, y) < d / 2)
    {
        fill(255, 255, 255, 100);
        cursor(HAND);
        
        buttonAnimattion2[BNUM] += 1;
        
        if(mouseIsPressed)
        {
            pages = pageSwitch;
            
            levels = BNUM;
        }
    }else if(keys[32]){
        pages = pageSwitch;
        levels = BNUM;
    }
    else
    {
        buttonAnimattion2[BNUM] -= 1;
    }
    
    if(buttonAnimattion2[BNUM] >= d / 16)
    {
        buttonAnimattion2[BNUM] = d / 16;
    }
    
    if(buttonAnimattion2[BNUM] <= 0)
    {
        buttonAnimattion2[BNUM] = 0;
    }
    
    noFill();
    fill(255, 255, 255);
    stroke(0, 119, 255);
    ellipse(x, y + buttonAnimattion2[BNUM], d, d);
    
    strokeWeight(d / 33);
    stroke(135, 189, 250);
    ellipse(x, y + buttonAnimattion2[BNUM], d / 1.1, d / 1.1);
    
    textAlign(CENTER, CENTER);
    
    textSize(27);
    fill(135, 189, 250);
    text("LEVEL " + (BNUM + 1), x, y + 2 + buttonAnimattion2[BNUM] + 25);
    text("LEVEL " + (BNUM + 1), x, y + 4 + buttonAnimattion2[BNUM] + 25);
    fill(0, 140, 255);
    text("LEVEL " + (BNUM + 1), x, y + buttonAnimattion2[BNUM] + 25);
    
    noFill();
    
    switch(dificulty)
    {
        case 0:
        emojiBody(x, y - 25 + buttonAnimattion2[BNUM], 60, "angel");
            break;
            
        case 1:
        emojiBody(x, y - 25 + buttonAnimattion2[BNUM], 60, "defualt");
            break;
            
        case 2:
        emojiBody(x, y - 25 + buttonAnimattion2[BNUM], 60, "content");
            break;
            
        case 3:
        emojiBody(x, y - 25 + buttonAnimattion2[BNUM], 60, "eyeballroll");
            break;
            
        case 4:
        emojiBody(x, y - 25 + buttonAnimattion2[BNUM], 60, "frustrated"); 
            break;
            
        case 5:
        emojiBody(x, y - 25 + buttonAnimattion2[BNUM], 60, "angry"); 
            break;
            
        case 6:
        emojiBody(x, y - 25 + buttonAnimattion2[BNUM], 60, "dead"); 
            break;
    }
    
    
    noStroke();
    
};

var lockedLevel = function(x, y, s){
    
    pushMatrix();
    scale(s);
    fill(0, 119, 255);
    rect(34 + x, 34 + y, 70 + 12, 70 + 12, 5);
    fill(135, 189, 250);
    rect(36 + x, 36 + y, 70 + 8, 70 + 8, 5);
    fill(255, 255, 255);
    rect(40 + x, 40 + y, 70, 70, 5);

    noStroke();
    
    stroke(135, 189, 250);
    strokeWeight(9);
    noFill();
    arc(75 + x, 62 + y, 22, 28, -180, 0);
    noStroke();
    
    fill(255, 255, 255);
    rect(40 + x, 40 + y, 70, 70, 5);
    
    fill(135, 189, 250);
    rect(54 + x, 60 + y, 42, 42, 5);
    
    fill(0, 119, 255);
    rect(57 + x, 63 + y, 36, 36, 5);
    
    fill(135, 189, 250);
    ellipse(75 + x, 78 + y, 10, 10);
    arc(75 + x, 86 + y, 10, 10, -180, 0);
    
    fill(255, 255, 255);
    ellipse(75 + x, 78 + y, 6, 6);
    arc(75 + x, 85 + y, 6, 6, -180, 0);
    
    stroke(0, 119, 255);
    strokeWeight(3);
    noFill();
    arc(75 + x, 62 + y, 22, 28, -180, 0);
    popMatrix();
};

//pages
var
    achievementPage = function(){
    
        fill(255, 255, 255);
        
        for(var i = 0; i < achievement.state.length; ++i)
        {
            
            if(i <= 6)
            {
                achievement.y[i] = 86;
                achievement.x[i] = i * 85 + 41;
            }
            
            if(i >= 4)
            {
                achievement.y[i] = 170;
                achievement.x[i] = i * 85 - (75 * 5) + 76;
            }
            
            fill(0, 119, 255);
            rect(34 + achievement.x[i], 34 + achievement.y[i], 70 + 12, 70 + 12, 5);
            fill(135, 189, 250);
            rect(36 + achievement.x[i], 36 + achievement.y[i], 70 + 8, 70 + 8, 5);
            fill(255, 255, 255);
            rect(40 + achievement.x[i], 40 + achievement.y[i], 70, 70, 5);
            
            
            switch(achievement.state[i])
            {
                case 0:
                
                noStroke();
                
                stroke(135, 189, 250);
                strokeWeight(9);
                noFill();
                arc(75 + achievement.x[i], 62 + achievement.y[i], 22, 28, -180, 0);
                noStroke();
                
                fill(255, 255, 255);
                rect(40 + achievement.x[i], 40 + achievement.y[i], 70, 70, 5);
                
                fill(135, 189, 250);
                rect(54 + achievement.x[i], 60 + achievement.y[i], 42, 42, 5);
                
                fill(0, 119, 255);
                rect(57 + achievement.x[i], 63 + achievement.y[i], 36, 36, 5);
                
                fill(135, 189, 250);
                ellipse(75 + achievement.x[i], 78 + achievement.y[i], 10, 10);
                arc(75 + achievement.x[i], 86 + achievement.y[i], 10, 10, -180, 0);
                
                fill(255, 255, 255);
                ellipse(75 + achievement.x[i], 78 + achievement.y[i], 6, 6);
                arc(75 + achievement.x[i], 85 + achievement.y[i], 6, 6, -180, 0);
                
                stroke(0, 119, 255);
                strokeWeight(3);
                noFill();
                arc(75 + achievement.x[i], 62 + achievement.y[i], 22, 28, -180, 0);
                
                    break;
                    
                case 1:
                fill(255, 255, 255);
                rect(40 + achievement.x[i], 40 + achievement.y[i], 70, 70, 5);
                
                //achievement image
                
                switch(i)
                {
                    case 0:
                        
                    star(achievement.x[i] + 74, achievement.y[i] + 65, 20 + sin(frameCount * 4) * 5);
                    
                    star(achievement.x[i] + 74 - 20, achievement.y[i] + 65 + 8, 20 + sin(frameCount * 3) * 5);
                    
                    star(achievement.x[i] + 74 + 20, achievement.y[i] + 65 + 8, 20 + sin(frameCount * 5) * 5);
                    
                        break;
                        
                    case 1:
                        
                    emojiBody(achievement.x[i] + 74, achievement.y[i] + 74, 50 + sin(frameCount * 7) * 5, "XD");
                        
                        break;
                    
                    case 2:
                        
                    birdStyle(achievement.x[i] + 77, achievement.y[i] + 74, 30, 30, -90 + sin(frameCount * 4) * 15, "candy");
                        
                        break;
                        
                    case 3:
                        
                        star(achievement.x[i] + 60, achievement.y[i] + 73, 30 + sin(frameCount * 4) * 2);
                        textSize(20);
                        fill(255, 106, 0);
                        
                        pushMatrix();
                        translate(achievement.x[i] + 92, achievement.y[i] + 74);
                        rotate(sin(frameCount * 6) * 5);
                        text("x30", 0, 0);
                        text("x30", 1, 0);
                        popMatrix();
                        break;
                        
                    case 4:
                        
                        textSize(12);
                        fill(255, 106, 0);
                        
                        pushMatrix();
                        translate(achievement.x[i] + 74, achievement.y[i] + 74);
                        rotate(sin(frameCount * 2) * 200);
                        text("REQUIRED:\nNOTHING!", 0, 0);
                        popMatrix();
                        
                        break;
                        
                    case 5:
                        
                        emojiBody(achievement.x[i] + 74, achievement.y[i] + 74, 50 - sin(frameCount * 5) * 5, "dead");
                        
                        break;
                        
                    
                    case 6:
                        
                        emojiBox(achievement.x[i] + 74 / 1.35 + sin(frameCount * 8) * 5, achievement.y[i] + 74 / 1.2, 40, 40);
                        
                        break;    
                        
                    case 7:
                        
                        birdStyle(achievement.x[i] + 82, achievement.y[i] + 74 + sin(frameCount * 4) * 10, 30, 30, -90 + sin(frameCount * 4) * 15, "roman");
                        
                        break;
                    
                }
                
                    break;
            }
            
            noStroke();
            
            if(mouseX >= 40 + achievement.x[i] && mouseX < 40 + 70 + achievement.x[i] && mouseY > 40 + achievement.y[i] && mouseY < 40 + 70 + achievement.y[i])
            {
                cursor(HAND);
                
                fill(255, 255, 255, 50);
                rect(40 + achievement.x[i], 40 + achievement.y[i], 70, 70);
                
                textSize(26);
                fill(255, 255, 255);
                text(achievement.names[i] +  "!\n" + achievement.directions[i], 250, 366);
                fill(5, 126, 255);
                text(achievement.names[i] +  "!\n" + achievement.directions[i], 250, 363);
                        
            }
        }
        
        button(171 - 136, 378 + 84, 52, "home", 8);
        
},

    levelPickerPage = function(){
        
        hearts = 3;
        
        scoreShowcase = -1000;
        
        coinBox(27, 28, 38);
        
        for(var i = 0; i < mapStars.length; ++i)
        {
            
            if(i === scrollLevels)
            {
            
            if(scrollLevels <= 9)
            {
                buttonLevel(250 + (i * 500) - (scrollLevels * 500), 248 - 50, 159, "game", i, mapDif[i]);
            }
            
            else if(starCoins >= 13 && scrollLevels >= 9 && scrollLevels <= 19)
            {
                buttonLevel(250 + (i * 500) - (scrollLevels * 500), 248 - 50, 159, "game", i, mapDif[i]);
                
            }
            else if(starCoins >= 39 && scrollLevels > 19 && scrollLevels <= 29)
            {
                buttonLevel(250 + (i * 500) - (scrollLevels * 500), 248 - 50, 159, "game", i, mapDif[i]);
                
            }
            
            else if(starCoins >= 66 && scrollLevels > 29 && scrollLevels <= 39)
            {
                buttonLevel(250 + (i * 500) - (scrollLevels * 500), 248 - 50, 159, "game", i, mapDif[i]);
                
            }
            
            else
            {
                lockedLevel(105 + (i * 500) - (scrollLevels * 500), 40, 1.4);
                
                if(scrollLevels < 19)
                {
                coinBoxStore(231 + (i * 500) - (scrollLevels * 500), 240, 38, 13);
                }
                
                if(scrollLevels >= 19 && scrollLevels <= 29)
                {
                coinBoxStore(231 + (i * 500) - (scrollLevels * 500), 240, 38, 39);
                }
                
                if(scrollLevels > 29 && scrollLevels <= 39)
                {
                coinBoxStore(231 + (i * 500) - (scrollLevels * 500), 240, 38, 66);
                }
                
                textSize(20);
                text("REQUIRED", 250 + (i * 500) - (scrollLevels * 500), 270);
                
                fill(0, 98, 255);
                text("LEVEL " + (i + 1), 250 + (i * 500) - (scrollLevels * 500), 90);
            }
            
            pushMatrix();
            if(mapStars[i] >= 1)
            {
                translate(0, 30);
            }
            starPlaceholder(250 - 35 + (i * 500) - (scrollLevels * 500), 374 - 50, 30);
            starPlaceholder(250 + (i * 500) - (scrollLevels * 500), 365 - 50, 30);
            starPlaceholder(250 + 35 + (i * 500) - (scrollLevels * 500), 374 - 50, 30);
            
            if(mapStars[i] >= 1)
            {
                star(250 - 35 + (i * 500) - (scrollLevels * 500), 374 - 50, 30);
            }
            
            if(mapStars[i] >= 2)
            {
                star(250 + (i * 500) - (scrollLevels * 500), 365 - 50, 30);
            }
            
            if(mapStars[i] >= 3)
            {
                star(250 + 35 + (i * 500) - (scrollLevels * 500), 374 - 50, 30);
            }
            popMatrix();
            
            if(mapStars[i] >= 1)
            {
                fill(0, 119, 255, 175);
                rect(250 - (122 / 2) + (i * 500) - (scrollLevels * 500), 297, 122, 25);
                rect(189 + (i * 500) - (scrollLevels * 500), 322, 3, 54);
                rect(308 + (i * 500) - (scrollLevels * 500), 322, 3, 54);
                rect(192 + (i * 500) - (scrollLevels * 500), 373, 116, 3);
                textSize(18);
                fill(255, 98, 0);
                text("TOP:", 250 + (i * 500) - (scrollLevels * 500), 310);
                fill(255, 217, 0);
                text("TOP:", 250 + (i * 500) - (scrollLevels * 500), 308);
            }
            }
        }
        
        if(scrollLevels >= 1)
        {
            fill(0, 119, 255);
            rect(106 - 4, 233 - 54, 48, 48);
            fill(135, 189, 250);
            rect(106 - 2, 233 - 52, 44, 44);
            fill(255, 255, 255);
            rect(106, 233 - 50, 40, 40);
            
            fill(135, 189, 250);
            textSize(51);
            text("<", 125, 201.5);
            text("<", 125, 202);
            textSize(33);
            text("<", 129, 202);
            
            textSize(35);
            fill(0, 119, 255);
            text("<", 125, 202);
            
            if(mouseX >= 106 && mouseX <= 106 + 40 && mouseY >= 233 - 50 && mouseY <= 233 + 40 - 50)
            {
                fill(106, 179, 252, 50);
                rect(106, 233 - 50, 40, 40);
                cursor(HAND);
            }
        }
        
        if(scrollLevels < mapStars.length - 1)
        {
            fill(0, 119, 255);
            
            fill(0, 119, 255);
            rect(106 - 4 + 250, 233 - 54, 48, 48);
            fill(135, 189, 250);
            rect(106 - 2 + 250, 233 - 52, 44, 44);
            fill(255, 255, 255);
            rect(106 + 250, 233 - 50, 40, 40);
            
            fill(135, 189, 250);
            textSize(51);
            text(">", 125 + 250, 201.5);
            text(">", 126 + 250, 202);
            textSize(33);
            text(">", 121 + 250, 202);
            
            textSize(35);
            fill(0, 119, 255);
            text(">", 125 + 250, 202);
                
            if(mouseX >= 106 + 250 && mouseX <= 106 + 40 + 250 && mouseY >= 233 - 50 && mouseY <= 233 + 40 - 50)
            {
                fill(106, 179, 252, 50);
                rect(106 + 250, 233 - 50, 40, 40);
                cursor(HAND);
            }
        
        }
        
        button(171 - 136, 378 + 84, 52, "home", 3);
        
    },
    
    homePage = function(){
        
        title();
            
        button(250, 379 - 10, 146, "levelPick", 0);
        
        button(250 - 136, 379 + 12, 101, "achievements", 1);
        
        button(250 + 136, 379 + 12, 101, "store", 2);
        
        button(20 + 35, 379 + 100, 30, "helpCenter", 4);
        button(20, 379 + 100, 30, "credits", 7);
        
        //save button
        fill(0, 157, 255);
        rect(10, 10, 40, 40);
        fill(255, 255, 255);
        rect(15, 15, 30, 15, 5);
        rect(15, 36, 30, 13.5);
        fill(0, 157, 255);
        rect(15 + 5, 36 + 7, 7, 7);
        
        if(mouseX >= 10 && mouseX <= 10 + 40 && mouseY >= 10 && mouseY <= 10 + 40)
        {
            cursor(HAND);
            fill(255, 255, 255, 80);
            rect(10, 10, 40, 40);
            
            textAlign(0, 0);
            textSize(14);
            fill(6, 77, 191);
            text("SAVE\nPROGRESS", 53, 25);
            textAlign(CENTER, CENTER);
        }
        
    },
    
    settingsPage = function(){
        
        button(171 - 136, 378 + 84, 52, "home", 5);
        
        textSize(39);
        fill(0, 43, 255);
        text("Volume:", 211, 174);
        
        if(mouseX >= 286 && mouseX <= 286 + 42 && mouseY >= 160 && mouseY <= 160 + 30)
        {
            cursor(HAND);
        }
        
        switch(volumeSwitch)
        {
            case false:
                
                fill(0, 115, 173);
                rect(289, 160, 40, 30, 30);
                ellipse(300, 175, 25, 25);
                ellipse(318, 175, 25, 25);
                
                fill(255, 255, 255);
                ellipse(302, 175, 25, 25);
                
                break;
                
            case true:
                
                fill(66, 192, 255);
                rect(289, 160, 40, 30, 30);
                ellipse(300, 175, 25, 25);
                ellipse(318, 175, 25, 25);
                
                fill(255, 255, 255);
                ellipse(316, 175, 25, 25);
                
                break;
        }
    },
    
    buttonCredit = function(x, y, w, h, n, ns, listOfCreds, locs, profileLink)
    {
        
        noStroke();
        fill(0, 39, 102, 200);
        if(mouseX >= x && mouseX <= x + w && mouseY >= y && mouseY <= y + h)
        {
            fill(0, 39, 102, 100);
            cursor(HAND);
        }
        rect(x, y, w, h);
        
        fill(255, 255, 255);
        textSize(ns);
        text(n, x + w / 2, y + h / 3);
        
        textSize(locs);
        text(listOfCreds, x + w / 2, y + h / 1.4);
        
        if(mouseX >= x && mouseX <= x + w && mouseY >= y && mouseY <= y + h && mouseIsPressed)
        {
            println("vvvv\n\n\n" + profileLink + "\n\n^^^^");
        }
        
    },
    creditsPage = function(){
        
        button(171 - 136, 378 + 84, 52, "home", 6);
        
        buttonCredit(5, 96, 500 - 10, 92, "ISAAC EMERALD", 56, "Creator Of Game", 20, "https://www.khanacademy.org/profile/IsaacEmerald/projects");
        
        buttonCredit(5, 96 + 100, 500 - 10, 92, "ScusX", 56, "Beta Tester | Bug Fixer | (EXTREME) - Level Dev", 20, "https://www.khanacademy.org/profile/GiantScus/projects");
        
        buttonCredit(0 + 5, 200 + 100, 500 - 10, 51, "FunkyChicken", 25, "(EXTREME) - Level Dev", 16, "https://www.khanacademy.org/profile/AFunkyChicken/projects");
        
        buttonCredit(0 + 5, 285 + 80, 500 - 10, 42, "Thephantomprogrammer", 14, "(MEDIUM) - Level Dev", 11, "https://www.khanacademy.org/profile/TPP13/projects");
        
    },
    
    gamePage = function(){
    
        noStroke();
        maps();
        
        if(testMode === false)
        {
            noStroke();
            
            if(powerupDelayTimer > 0)
            {
                textSize(25);
                
                fill(82, 63, 245);
                text(floor(powerupDelayTimer / 16), 250, 63 + 20);
                text(floor(powerupDelayTimer / 16), 252, 63 + 20);
                fill(105, 119, 250);
                text(floor(powerupDelayTimer / 16), 250, 60 + 20);
                text(floor(powerupDelayTimer / 16), 252, 60 + 20);
                
                noFill();
                stroke(105, 119, 250);
                strokeWeight(5);
                
                for(var i = 0; i < 9; ++i)
                {
                    arc(250, 60 + 20, 50, 50, coolSpinnerPU + i * 40, coolSpinnerPU + 10 + i * 40);
                }
                
                if(death === false)
                {
                    coolSpinnerPU += 3;
                }
            }
            player();
            noStroke();
        }
        
        noStroke();
        deadAndOtherStuff_afterDone();
        
        if(currentPowerup !== "emoji-box" && stopGameForSign === false)
        {
            if(currentPowerup !== "gravity-guy")
            {
                playerGravity += 0.5;
                playerY += playerGravity;
            }
            
            if(currentPowerup === "gravity-guy")
            {
                playerY += playerGravity + 5;
                
                switch(switchGravity)
                {
                    case "DOWN":
                    playerGravity += 0.5;
                        break;
                    
                    case "UP":
                    playerGravity -= 0.5;
                        break;
                }
            }
        }
        
        if(levels === 38)
        {
            fill(0, 0, 0, 160);
            rect(0, 0, 500, 500);
        }
    };

//store pages
var
    store = function(){
    
    button(250 - 90, 250, 159, "store_emoji", 5);
    
    button(250 + 90, 250, 159, "backdropstore", 9);
    
    button(171 - 136, 378 + 84, 52, "home", 8);
    
},

    emojiStore = function(){
        
        fill(0, 119, 255);
        rect(193.5 - 5, 285 - 5, 113 + 10, 50 + 10);
        fill(135, 189, 250);
        rect(193.5 - 2, 285 - 2, 113 + 4, 50 + 4);
        fill(255, 255, 255);
        rect(193.5, 285, 113, 50);
        
        for(var i = 0; i < emoji.prices.length; ++i)
        {
            emojiBody(250 + (i * 500) - (scrollEmoji * 500), 207, 128, emoji.Switch[i]);
            noStroke();
            
            if(starCoins < emoji.prices[i])
            {
            coinBoxStore(224 + (i * 500) - (scrollEmoji * 500), 312, 38, emoji.prices[i]);
            }
            
            textSize(25);
            fill(255, 145, 0);
            text(emoji.names_description.n[i] + "!", 250 + (i * 500) - (scrollEmoji * 500), 370);
            textSize(20);
            text(emoji.names_description.d[i], 250 + (i * 500) - (scrollEmoji * 500), 400);
            
            if(mouseX >= 193.5 + (i * 500) - (scrollEmoji * 500) && mouseX <= 193.5 + 113 + (i * 500) - (scrollEmoji * 500) && mouseY >= 285 && mouseY <= 285 + 50)
            {
                fill(0, 98, 255, 50);
                rect(193.5 + (i * 500) - (scrollEmoji * 500), 285, 113, 50);
                
                if(starCoins >= emoji.prices[i])
                {
                    cursor(HAND);
                }
                
                if(starCoins < emoji.prices[i])
                {
                    cursor("not-allowed");
                }
            }
            
            textSize(20);
            
            if(starCoins >= emoji.prices[i] && currentEmoji === emoji.Switch[i])
            {
                fill(135, 189, 250);
                text("SELECTED", 250 + (i * 500) - (scrollEmoji * 500), 309 + 2);
                fill(0, 119, 255);
                text("SELECTED", 250 + (i * 500) - (scrollEmoji * 500), 309);
            }
            
            if(starCoins >= emoji.prices[i] && currentEmoji !== emoji.Switch[i])
            {
                fill(135, 189, 250);
                text("ACHIEVED", 250 + (i * 500) - (scrollEmoji * 500), 309 + 2);
                fill(0, 119, 255);
                text("ACHIEVED", 250 + (i * 500) - (scrollEmoji * 500), 309);
            }
        }
        
        noStroke();
        
        coinBox(27, 28, 38);
        
        button(171 - 136, 378 + 84, 52, "store", 3);
        
        if(scrollEmoji >= 1)
        {
            fill(0, 119, 255);
            rect(106 - 4, 233 - 54, 48, 48);
            fill(135, 189, 250);
            rect(106 - 2, 233 - 52, 44, 44);
            fill(255, 255, 255);
            rect(106, 233 - 50, 40, 40);
            
            fill(135, 189, 250);
            textSize(51);
            text("<", 125, 201.5);
            text("<", 125, 202);
            textSize(33);
            text("<", 129, 202);
            
            textSize(35);
            fill(0, 119, 255);
            text("<", 125, 202);
            
            if(mouseX >= 106 && mouseX <= 106 + 40 && mouseY >= 233 - 50 && mouseY <= 233 + 40 - 50)
            {
                fill(106, 179, 252, 50);
                rect(106, 233 - 50, 40, 40);
                cursor(HAND);
            }
        }
        
        if(scrollEmoji < emoji.prices.length - 1)
        {
            fill(0, 119, 255);
            
            fill(0, 119, 255);
            rect(106 - 4 + 250, 233 - 54, 48, 48);
            fill(135, 189, 250);
            rect(106 - 2 + 250, 233 - 52, 44, 44);
            fill(255, 255, 255);
            rect(106 + 250, 233 - 50, 40, 40);
            
            fill(135, 189, 250);
            textSize(51);
            text(">", 125 + 250, 201.5);
            text(">", 126 + 250, 202);
            textSize(33);
            text(">", 121 + 250, 202);
            
            textSize(35);
            fill(0, 119, 255);
            text(">", 125 + 250, 202);
                
            if(mouseX >= 106 + 250 && mouseX <= 106 + 40 + 250 && mouseY >= 233 - 50 && mouseY <= 233 + 40 - 50)
            {
                fill(106, 179, 252, 50);
                rect(106 + 250, 233 - 50, 40, 40);
                cursor(HAND);
            }
        
        }
        
    },
    
    backDropStore = function(){
        
        for(var i = 0; i < backgroundPrices.length; ++i)
        {
            if(i === scrollBackdrop)
            {
                backDrop(backgroundSwitch[i]);
            }
            pushMatrix();
            translate(51, 0);
            
            block(153 + (i * 500) - (scrollBackdrop * 500), 207, 50, 30, backgroundSwitch[i]);
            
            lavaBlock(281 + (i * 500) - (scrollBackdrop * 500), 332, 108, 30, backgroundSwitch[i]);
            
            speedBlock(153 + (i * 500) - (scrollBackdrop * 500), 142, 124, 50, backgroundSwitch[i]);
            
            portal(17 + (i * 500) - (scrollBackdrop * 500), 139, 104, 111, backgroundSwitch[i]);
            
            ballonblock(285 + (i * 500) - (scrollBackdrop * 500), 207, 100, 30, 0, 0, backgroundSwitch[i]);
            ballonblockUP(285 + (i * 500) - (scrollBackdrop * 500), 262, 100, 30, 0, 0, backgroundSwitch[i]);
            trampoline(153 + (i * 500) - (scrollBackdrop * 500), 280, 100, 14, 0, backgroundSwitch[i]);
            flagCheckpoint(133 + (i * 500) - (scrollBackdrop * 500), 146, 10, 259, 0, backgroundSwitch[i]);
            spike(229 + (i * 500) - (scrollBackdrop * 500), 207, 30, backgroundSwitch[i]);
            birdStyle(97 + (i * 500) - (scrollBackdrop * 500), 276, 30, 30, -90, backgroundSwitch[i]);
            
            particleStyle(64 + (i * 500) - (scrollBackdrop * 500), 276, 15, 15, backgroundSwitch[i]);
            
            particleStyle(42 + (i * 500) - (scrollBackdrop * 500), 276, 12, 12, backgroundSwitch[i]);
            
            particleStyle(22 + (i * 500) - (scrollBackdrop * 500), 276, 8, 8, backgroundSwitch[i]);
            
            popMatrix();
            
            noStroke();
            
            fill(0, 119, 255);
            rect(193.5 - 5 + (i * 500) - (scrollBackdrop * 500), 285 - 5 + 150, 113 + 10, 50 + 10);
            fill(135, 189, 250);
            rect(193.5 - 2 + (i * 500) - (scrollBackdrop * 500), 285 - 2 + 150, 113 + 4, 50 + 4);
            fill(255, 255, 255);
            rect(193.5 + (i * 500) - (scrollBackdrop * 500), 285 + 150, 113, 50);
            
            if(starCoins < backgroundPrices[i])
            {
            coinBoxStore(223 + (i * 500) - (scrollBackdrop * 500), 312 + 150, 38, backgroundPrices[i]);
            }
            
            if(mouseX >= 193.5 + (i * 500) - (scrollBackdrop * 500) && mouseX <= 193.5 + 113 + (i * 500) - (scrollBackdrop * 500) && mouseY >= 285 + 150 && mouseY <= 285 + 50 + 150)
            {
                fill(0, 98, 255, 50);
                rect(193.5 + (i * 500) - (scrollBackdrop * 500), 285 + 150, 113, 50);
                
                if(starCoins >= backgroundPrices[i])
                {
                    cursor(HAND);
                }
                
                if(starCoins < backgroundPrices[i])
                {
                    cursor("not-allowed");
                }
            }
            
            textSize(20);
            
            if(starCoins >= backgroundPrices[i] && currentBackdrop === backgroundSwitch[i])
            {
                fill(135, 189, 250);
                text("SELECTED", 250 + (i * 500) - (scrollBackdrop * 500), 309 + 2 + 150);
                fill(0, 119, 255);
                text("SELECTED", 250 + (i * 500) - (scrollBackdrop * 500), 309 + 150);
            }
            
            if(starCoins >= backgroundPrices[i] && currentBackdrop !== backgroundSwitch[i])
            {
                fill(135, 189, 250);
                text("ACHIEVED", 250 + (i * 500) - (scrollBackdrop * 500), 309 + 2 + 150);
                fill(0, 119, 255);
                text("ACHIEVED", 250 + (i * 500) - (scrollBackdrop * 500), 309 + 150);
            }
            
            textSize(40);
            fill(backdropNameColor[i]);
            text(backdropName[i], 250 + (i * 500) - (scrollBackdrop * 500), 58);
            fill(0, 0, 0, 50);
            text(backdropName[i], 250 + (i * 500) - (scrollBackdrop * 500), 58);
            fill(backdropNameColor[i]);
            text(backdropName[i], 250 + (i * 500) - (scrollBackdrop * 500), 55);
            text("__________", 250 + (i * 500) - (scrollBackdrop * 500), 55);
        }
        
        coinBox(27, 28, 38);
        
        button(171 - 136, 378 + 84, 52, "store", 3);
        
        if(scrollBackdrop >= 1)
        {
            fill(0, 119, 255);
            rect(106 - 4 - 100, 233 - 54, 48, 48);
            fill(135, 189, 250);
            rect(106 - 2 - 100, 233 - 52, 44, 44);
            fill(255, 255, 255);
            rect(106 - 100, 233 - 50, 40, 40);
            
            fill(135, 189, 250);
            textSize(51);
            text("<", 125 - 100, 201.5);
            text("<", 125 - 100, 202);
            textSize(33);
            text("<", 129 - 100, 202);
            
            textSize(35);
            fill(0, 119, 255);
            text("<", 125 - 100, 202);
            
            if(mouseX >= 106 - 100 && mouseX <= 106 + 40 - 100 && mouseY >= 233 - 50 && mouseY <= 233 + 40 - 50)
            {
                fill(106, 179, 252, 50);
                rect(106 - 100, 233 - 50, 40, 40);
                cursor(HAND);
            }
        }
        
        if(scrollBackdrop < backgroundPrices.length - 1)
        {
            fill(0, 119, 255);
            
            fill(0, 119, 255);
            rect(106 - 4 + 250 + 99, 233 - 54, 48, 48);
            fill(135, 189, 250);
            rect(106 - 2 + 250 + 99, 233 - 52, 44, 44);
            fill(255, 255, 255);
            rect(106 + 250 + 99, 233 - 50, 40, 40);
            
            fill(135, 189, 250);
            textSize(51);
            text(">", 125 + 250 + 99, 201.5);
            text(">", 126 + 250 + 99, 202);
            textSize(33);
            text(">", 121 + 250 + 99, 202);
            
            textSize(35);
            fill(0, 119, 255);
            text(">", 125 + 250 + 99, 202);
                
            if(mouseX >= 106 + 250 + 99 && mouseX <= 106 + 40 + 250 + 99 && mouseY >= 233 - 50 && mouseY <= 233 + 40 - 50)
            {
                fill(106, 179, 252, 50);
                rect(106 + 250 + 99, 233 - 50, 40, 40);
                cursor(HAND);
            }
        
        }
        
    };
    
var
    page_HC = "home",
    
    button_HC = function(x, y, w, h, pageSwitch, txt, txtSize){
        
        noStroke();
        fill(255, 255, 255, 100);
        rect(x, y, w, h);
        
        fill(4, 0, 255);
        if(mouseX > x && mouseX < x + w && mouseY > y && mouseY < y + h)
        {
            fill(0, 153, 255);
            cursor(HAND);
            
            if(mouseIsPressed)
            {
                page_HC = pageSwitch;
            }
        }
        
        textSize(txtSize);
        text(txt, x + w / 2, y + h / 2);
    },
    
    checkMarkHC = function(x, y, s, switchState){
    
    pushMatrix();
    translate(x - 195, y - 297);
    scale(s / 30);
    
    strokeWeight(5);
    
    switch(switchState)
    {
        case "no":
            stroke(230, 0, 0);
            line(222, 292, 200, 316);
            line(222 - 22, 292, 200 + 22, 316);
            break;
            
        case "yes":
            stroke(3, 230, 41);
            line(219, 291, 200, 316);
            line(192, 304, 200, 316);
            break;
    }
    
    popMatrix();
    
    noStroke();
},
    
    compileHC = function(){
        
        switch(page_HC)
        {
            case "home":
            button_HC(16, 58 - 30, 305, 23, "controls", "> What are the CONTROLS?", 23);
            button_HC(16, 58, 445, 23, "GGexplain", "> Why is Gravity-guy not switching gravity?", 23);
            button_HC(16, 58 + 30, 470, 23, "Bexplain", "> How do you buy Emoji's and Backgrounds?", 23);
            button_HC(16, 58 + 60, 369, 23, "Saveexplain", "> How do I SAVE my PROGRESS?", 23);
            button_HC(16, 58 + 90, 477, 23, "gemthing", "> What does that GEM with the question mark do?", 21);
            button_HC(16, 58 + 120, 260, 23, "birdex", "> How do I use the Bird?", 23);
            button_HC(16, 58 + 150, 400, 23, "boxex", "> What does the Tardis (Blue Box) do?", 23);
            button_HC(16, 58 + 180, 360, 23, "beatable-levels", "> Are the levels even beatable? >:(", 23);
            
            textSize(20);
            fill(161, 5, 5);
            text("Do you have a question that's not covered here?\nNo worries, just ask in the question's section\nbelow, and I will try to get back to you\nas soon as possible!\nAlso, be sure to see if other people haven't\nalready asked your question, as it might\nhave already been answered, and you can just\nsee what my answer was to them! ;)", 250, 360);
            
            button(171 - 136, 378 + 84, 52, "home", 6);
            
                break;
                
            case "boxex":
                
                signLook("EMOJI BOX", "This is the Emoji Box!\nPress [SPACE] to transport where the bubble is!\nYou have a ceirtan amount of transports each time,\nwhich you can see the number near your\nhealth bar.");
                
                strokeWeight(8);
                stroke(2, 70, 148);
                line(140, 157, 353, 218);
                
                strokeWeight(4);
                stroke(0, 119, 255);
                line(140, 157, 353, 218);
                
                strokeWeight(2);
                stroke(89, 166, 255);
                line(140, 157, 353, 218);
                
                noStroke();
                emojiBox(99, 137, 65, 65);
                emojiBoxBubble(328, 177, 65, 65);
                
                noFill();
                stroke(255, 0, 0);
                strokeWeight(3);
                ellipse(360, 200, 100, 100);
                line(410, 200, 430, 180);
                noStroke();
                textSize(25);
                
                //white
                fill(255, 0, 0);
                text("Bubble", 450, 165);
                
                button_HC(250 - (91 / 2), 472, 91, 23, "home", "> BACK <", 21);
                
                break;
                
            case "birdex":
                
                signLook("FLY BIRD", "(Up-Arrow OR Spacebar KEY & hold) to fly!\nRelease the KEY to stop flying!");
                
                birdStyle(250, 172, 100, 100, -90, currentBackdrop);
                
                button_HC(250 - (91 / 2), 472, 91, 23, "home", "> BACK <", 21);
                
                break;
                
            case "gemthing":
                
                signLook("MYSTERY BOX", "This is a Mystery Box!\nIf you grab it, then you will get a special\nPowerUp!\nThe possible PowerUps are:\nFly Bird, Emoji Box, and Gravity Guy");
                
                specialMachineBox(200, 123, 100, 100, 0);
                
                button_HC(250 - (91 / 2), 472, 91, 23, "home", "> BACK <", 21);
                
                break;
                
            case "GGexplain":
                
                textSize(25);
                
                //white
                fill(255, 255, 255);
                rect(0, 49, 500, 112);
                text("How to use Gravity-Guy:", 250, 31);
                
                //red
                fill(255, 0, 0);
                rect(0, 196, 500, 60);
                text("What you're probably missing:", 250, 181);
                
                textSize(22);
                fill(0, 0, 0);
                text("Press [SPACE] to switch your (GRAVITY)\nIf you jump while you have opposit gravity,\nthen you will jump DOWN just like if you actually\nhad opposit gravity!\n\n\nYou can only switch gravity if you're\nTOUCHING a BLOCK!", 250, 151);
                
                button_HC(250 - (91 / 2), 472, 91, 23, "home", "> BACK <", 21);
                //good
                block(36, 390, 150, 30, currentBackdrop);
                emojiBody(100, 366, 50, "defualt");
                
                checkMarkHC(134, 303, 32, "yes");
                
                //bad
                block(36 + 250, 390, 150, 30, currentBackdrop);
                emojiBody(100 + 250, 366 - 40, 50, "defualt");
                
                checkMarkHC(134 + 250, 303, 32, "no");
                
                fill(91, 79, 247, 50);
                for(var i = 0; i < 7; ++i)
                {
                    ellipse(100, 366, 50 - i * 5, 50 - i * 5);
                    ellipse(100 + 250, 366 - 40, 50 - i * 5, 50 - i * 5);
                }
                
                break;
                
            case "Bexplain":
                
                textSize(25);
                
                //white
                fill(255, 255, 255);
                rect(0, 250 - 120, 500, 235);
                text("How to get coins:", 250, 115);
                
                
                textSize(22);
                fill(0, 0, 0);
                text("Try to complete the levels with 3 + stars!\nThe more stars you get, the more stuff you can\nachieve, like different Emoji's, Backgrounds,\nand also levels!\nThey aren't technically coins, rather,\na level tracker, and the higher level you get,\nthe more privilages you get!\nThe star ammount is based off of how many stars\nyou have in all from the levels you completed.", 250, 250);
                
                button_HC(250 - (91 / 2), 472, 91, 23, "home", "> BACK <", 21);
                
                break;
                
            case "Saveexplain":
                
                textSize(25);
                
                //white
                fill(255, 255, 255);
                rect(0, 250 - 120, 500, 235);
                text("How to SAVE your PROGRESS:", 250, 115);
                
                
                textSize(22);
                fill(0, 0, 0);
                text("1) Click the SAVE button on the TOP LEFT\nof the HOME screen.\n2) Copy all of the CODE that is provided in the\nblack box! Be sure to scroll the grey bar all\nthe way to the left, and copy ALL of the CODE!\n3) Replace ALL of the old save CODE with\nthe NEW save code!\nThe variable is called Save_File on line 6.", 250, 250);
                
                button_HC(250 - (91 / 2), 472, 91, 23, "home", "> BACK <", 21);
                
                break;
                
            case "controls":
                
                textSize(25);
                
                //white
                fill(255, 255, 255);
                rect(0, 250 - 120, 500, 235);
                text("Controls:", 250, 115);
                
                
                textSize(22);
                fill(0, 0, 0);
                text("1) Use the (UP ARROW KEY) to jump\n\n2) Use the (SPACEBAR) for PowerUps:\nSwitching Gravity, Teleporting, Flying", 250, 250);
                
                button_HC(250 - (91 / 2), 472, 91, 23, "home", "> BACK <", 21);
                
                break;
                
            case "beatable-levels":
                
                textSize(25);
                
                //white
                fill(255, 255, 255);
                rect(0, 250 - 120, 500, 235);
                text("Are the levels even beatable? >:(", 250, 115);
                
                
                textSize(22);
                fill(0, 0, 0);
                text("The developer of this game (Isaac Emerald),\npersonally beat all the levels on this game!\nSo yes, it is beatable. I promise!", 250, 250);
                
                button_HC(250 - (91 / 2), 472, 91, 23, "home", "> BACK <", 21);
                
                break;
        }
    };

var compileEntireGameSets = function()
{
    starAmount: // set the ammount of the stars (from levels)
    {
        starCoins = mapStars[0] + mapStars[1] + mapStars[2] + mapStars[3] + mapStars[4] + mapStars[5] + mapStars[6] + mapStars[7] + mapStars[8] + mapStars[9] + mapStars[10] + mapStars[11] + mapStars[12] + mapStars[13] + mapStars[14] + mapStars[15] + mapStars[16] + mapStars[17] + mapStars[18] + mapStars[19] + mapStars[20] + mapStars[21] + mapStars[22] + mapStars[23] + mapStars[24] + mapStars[25] + mapStars[26] + mapStars[27] + mapStars[28] + mapStars[29] + mapStars[30] + mapStars[31] + mapStars[32] + mapStars[33] + mapStars[34] + mapStars[35] + mapStars[36] + mapStars[37] + mapStars[38] + mapStars[39];
    }
    
    if(starCoins >= 30)
    {
        achievement.state[3] = 1;
    }
    
    if(starCoins >= 13)
    {
        achievement.state[4] = 1;
    }
    
    if(mostlyDeadNum >= 100)
    {
        achievement.state[5] = 1;
    }
    
    if(powerUpNum[0] === true && powerUpNum[1] === true && powerUpNum[2] === true)
    {
        achievement.state[6] = 1;
    }
    
    if(achievement.state[0] === 1 && achievement.state[1] === 1 && achievement.state[2] === 1 && achievement.state[3] === 1 && achievement.state[4] === 1 && achievement.state[5] === 1 && achievement.state[6] === 1 && starCoins >= 105)
    {
        achievement.state[7] = 1;
    }
    
    cursorSet: // defualt cursor
    {
        cursorLoad -= 1;
            
        if(cursorLoad > 0)
        {
            cursor(WAIT);
        }
        
        if(cursorLoad <= 0)
        {
            cursorLoad = 0;
            cursor(ARROW);
        }
    }
    
    background(163, 221, 255);
    
    backDrop(currentBackdrop); // apply background/backdrop
    
    textAlign(CENTER, CENTER); // allign all text
    
    switch(pages) // switch pages
    {
        case "game":

            gamePage();
        
            break;
            
        case "levelPick":
            
            levelPickerPage();
            
            break;
            
        case "home":
            
            homePage();
            
            break;
            
        case "achievements":
            
            achievementPage();
            
            break;
            
        case "store":
            
            store();
            
            break;
            
        case "store_emoji":
            
            emojiStore();
            
            break;
            
        case "backdropstore":
            
            backDropStore();
            
            break;
            
        case "helpCenter":
            
            compileHC();
            
            break;
            
        case "credits":
            
            creditsPage();
            
            break;
    }
    
    achievedPopups: // achievement + buyable emojis & backdrops
    {
        for(var i = 0; i < backgroundPrices.length; ++i)
        {
            if(backdropMove[i] >= 250)
            {
                backdropMove[i] = 250;
            }
            
            if(starCoins >= backgroundPrices[i])
            {
                if(backdropMove[i] <= 0 && backdropEarned2[i] === false)
                {
                    backdropEarned[i] = true;
                }
                
                if(backdropEarned[i] === true)
                {
                    backdropMove[i] += 5;
                }
                
                if(backdropEarned[i] === false)
                {
                    backdropMove[i] -= 2;
                    
                    if(backdropMove[i] <= 5)
                    {
                        backdropEarned2[i] = true;
                    }
                }
                
                if(backdropMove[i] >= 250)
                {
                    backdropEarnedDelay[i] += 1;
                }
                
                if(backdropEarnedDelay[i] >= 300)
                {
                    backdropEarned[i] = false;
                }
                
                if(backdropEarned2[i] === false)
                {
                    noStroke();
                    fill(255, 255, 255);
                    rect(250 - 100, 7 - 250 + backdropMove[i], 200, 50);
                    
                    textSize(16);
                    
                    fill(135, 189, 250);
                    text("BACKGROUND EARNED\n", 250, 27 - 250 + backdropMove[i]);
                    
                    fill(0, 119, 255);
                    text("BACKGROUND EARNED\n", 250, 25 - 250 + backdropMove[i]);
                    text("BACKGROUND EARNED\n", 250, 25 - 250 + backdropMove[i]);
                    
                    textSize(18);
                    
                    fill(135, 189, 250);
                    text("\n" + backdropName[i] + "!", 250, 31 - 250 + backdropMove[i]);
                    
                    fill(0, 119, 255);
                    text("\n" + backdropName[i] + "!", 250, 29 - 250 + backdropMove[i]);
                    text("\n" + backdropName[i] + "!", 250, 29 - 250 + backdropMove[i]);
                }
            }
        }
        
        for(var i = 0; i < achievement.state.length; ++i)
        {
            if(achievement.move[i] >= 250)
            {
                achievement.move[i] = 250;
            }
            
            if(achievement.state[i] === 1)
            {
                if(achievement.move[i] <= 0 && achievement.earned2[i] === false)
                {
                    achievement.earned[i] = true;
                }
                
                if(achievement.earned[i] === true)
                {
                    achievement.move[i] += 5;
                }
                
                if(achievement.earned[i] === false)
                {
                    achievement.move[i] -= 2;
                    
                    if(achievement.move[i] <= 5)
                    {
                        achievement.earned2[i] = true;
                    }
                }
                
                if(achievement.move[i] >= 250)
                {
                    achievement.earnedDelay[i] += 1;
                }
                
                if(achievement.earnedDelay[i] >= 200)
                {
                    achievement.earned[i] = false;
                }
                
                if(achievement.earned2[i] === false)
                {
                    noStroke();
                    fill(255, 255, 255);
                    rect(250 - 100, 7 - 250 + achievement.move[i], 200, 50);
                    
                    textSize(16);
                    
                    fill(135, 189, 250);
                    text("ACHIEVEMENT EARNED\n", 250, 27 - 250 + achievement.move[i]);
                    
                    fill(0, 119, 255);
                    text("ACHIEVEMENT EARNED\n", 250, 25 - 250 + achievement.move[i]);
                    text("ACHIEVEMENT EARNED\n", 250, 25 - 250 + achievement.move[i]);
                    
                    textSize(18);
                    
                    fill(135, 189, 250);
                    text("\n" + achievement.names[i] + "!", 250, 31 - 250 + achievement.move[i]);
                    
                    fill(0, 119, 255);
                    text("\n" + achievement.names[i] + "!", 250, 29 - 250 + achievement.move[i]);
                    text("\n" + achievement.names[i] + "!", 250, 29 - 250 + achievement.move[i]);
                    
                }
            }
        }
        
        for(var i = 0; i < emoji.prices.length; ++i)
        {
            if(emoji.move[i] >= 250)
            {
                emoji.move[i] = 250;
            }
            
            if(starCoins >= emoji.prices[i])
            {
                if(emoji.move[i] <= 0 && emoji.earned2[i] === false)
                {
                    emoji.earned[i] = true;
                }
                
                if(emoji.earned[i] === true)
                {
                    emoji.move[i] += 5;
                }
                
                if(emoji.earned[i] === false)
                {
                    emoji.move[i] -= 2;
                    
                    if(emoji.move[i] <= 5)
                    {
                        emoji.earned2[i] = true;
                    }
                }
                
                if(emoji.move[i] >= 250)
                {
                    emoji.earnedDelay[i] += 1;
                }
                
                if(emoji.earnedDelay[i] >= 100)
                {
                    emoji.earned[i] = false;
                }
                
                if(emoji.earned2[i] === false)
                {
                    noStroke();
                    fill(255, 255, 255);
                    rect(250 - 100, 7 - 250 + emoji.move[i], 200, 50);
                    emojiBody(201, 33 - 250 + emoji.move[i], 42, emoji.Switch[i]);
                    
                    textSize(19);
                    
                    fill(135, 189, 250);
                    text("ACHIEVED", 273, 33 - 250 + emoji.move[i]);
                    
                    fill(0, 119, 255);
                    text("ACHIEVED", 273, 31 - 250 + emoji.move[i]);
                }
            }
        }
    }
    
    mouseClicked = function(){
        
        if(pages === "levelPick")
        {
            
            if(scrollLevels >= 1)
            {
                if(mouseX >= 106 && mouseX <= 106 + 40 && mouseY >= 233 - 50 && mouseY <= 233 + 40 - 50)
                {
                    scrollLevels -= 1;
                }
            }
            
            if(scrollLevels < mapStars.length - 1)
            {
                if(mouseX >= 106 + 250 && mouseX <= 106 + 40 + 250 && mouseY >= 233 - 50 && mouseY <= 233 + 40 - 50)
                {
                    scrollLevels += 1;
                }
                
            }
            
        }
        
        if(pages === "store_emoji")
        {
            
            if(scrollEmoji >= 1)
            {
                if(mouseX >= 106 && mouseX <= 106 + 40 && mouseY >= 233 - 50 && mouseY <= 233 + 40 - 50)
                {
                    scrollEmoji -= 1;
                }
            }
            
            if(scrollEmoji < emoji.prices.length - 1)
            {
                if(mouseX >= 106 + 250 && mouseX <= 106 + 40 + 250 && mouseY >= 233 - 50 && mouseY <= 233 + 40 - 50)
                {
                    scrollEmoji += 1;
                }
                
            }
            
            for(var i = 0; i < emoji.prices.length; ++i)
            {
                if(mouseX >= 193.5 + (i * 500) - (scrollEmoji * 500) && mouseX <= 193.5 + 113 + (i * 500) - (scrollEmoji * 500) && mouseY >= 285 && mouseY <= 285 + 50 && starCoins >= emoji.prices[i] && currentEmoji !== emoji.Switch[i])
                {
                    currentEmoji = emoji.Switch[i];
                    
                    achievement.state[1] = 1;
                    
                }
            }
        }
        
        if(pages === "backdropstore")
        {
            
            if(scrollBackdrop >= 1)
            {
                if(mouseX >= 106 - 100 && mouseX <= 106 + 40 - 100 && mouseY >= 233 - 50 && mouseY <= 233 + 40 - 50)
                {
                    scrollBackdrop -= 1;
                }
            }
            
            if(scrollBackdrop < backgroundPrices.length - 1)
            {
                if(mouseX >= 106 + 250 + 99 && mouseX <= 106 + 40 + 250 + 99 && mouseY >= 233 - 50 && mouseY <= 233 + 40 - 50)
                {
                    scrollBackdrop += 1;
                }
                
            }
            
            for(var i = 0; i < backgroundPrices.length; ++i)
            {
                if(mouseX >= 193.5 + (i * 500) - (scrollBackdrop * 500) && mouseX <= 193.5 + 113 + (i * 500) - (scrollBackdrop * 500) && mouseY >= 285 + 150 && mouseY <= 285 + 50 + 150 && starCoins >= backgroundPrices[i] && currentBackdrop !== backgroundSwitch[i])
                {
                    currentBackdrop = backgroundSwitch[i];
                    
                    achievement.state[2] = 1;
                }
            }
        }
        
        for(var i = 0; i < sighnInsctructState.length; ++i)
        {
            if(sighnInsctructState[i] === true && sighnInsctructStateDelete[i] === false)
            {
                sighnInsctructStateDelete[i] = true;
                stopGameForSign = false;
                
                if(mouseX >= 338 && mouseX <= 338 + 43 && mouseY >= 476 && mouseY <= 476 + 14)
                {
                    sighnInsctructStateDelete = [true, true, true, true, true, true, true, true, true, true, true, true, true];
                }
            }
        }
        
        if(pages === "game")
        {
            if(dist(mouseX, mouseY, 250 - 60, 250) < (115 / 2) && rageQuit === false && pauseGame === true)
            {
                rageQuit = true;
            }
            
            if(rageQuit === true && pauseGame === true && levelDone === false)
            {
                
                if(mouseX >= 100 + 150 && mouseX <= 100 + 150 + 150 && mouseY >= 300 && mouseY <= 300 + 150)
                {
                    rageQuit = false;
                    cursorLoad = 20;
                }
                
                if(mouseX >= 100 && mouseX <= 100 + 150 && mouseY >= 300 && mouseY <= 300 + 150)
                {
                    pages = "levelPick";
                    rageQuit = false;
                    pauseGame = false;
                    hearts = 0;
                    cursorLoad = 20;
                    mapMove = 0;
                    flagAnimation = [212, 212, 212, 212, 212];
                    flagAnimationState = [false, false, false, false, false];
                    ballonBlockMove = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                    playerSize = 49;
                    playerGravity = 0;
                    rotateEmoji = 0;
                    levelDone = false;
                    death = false;
                    respawnX = 0;
                    respawnY = 200;
                    playerX = 82;
                    playerY = 200;
                    respawnDelay = 0;
                    powerupApply = false;
                    powerupDelayTimer = 0;
                    currentPowerup = "defualt";
                    switchGravity = "DOWN";
                    gotTheSpecialBox = [false, false, false, false, false, false];
                    extraSpeedTimer = 0;
                    stopGameForSign = false;
                }
            
            }
            
            if(dist(mouseX, mouseY, 250 + 60, 250) < (115 / 2) && pauseGame === true && rageQuit !== true  && levelDone === false && cursorLoad <= 0)
            {
                pauseGame = false;
                hearts = 3;
                cursorLoad = 20;
                mapMove = 0;
                flagAnimation = [212, 212, 212, 212, 212];
                flagAnimationState = [false, false, false, false, false];
                ballonBlockMove = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                playerSize = 49;
                playerGravity = 0;
                rotateEmoji = 0;
                levelDone = false;
                death = false;
                respawnX = 0;
                respawnY = 200;
                playerX = 82;
                playerY = 200;
                respawnDelay = 0;
                powerupApply = false;
                powerupDelayTimer = 0;
                currentPowerup = "defualt";
                switchGravity = "DOWN";
                gotTheSpecialBox = [false, false, false, false, false, false];
                extraSpeedTimer = 0;
                stopGameForSign = false;
            }
            
            if(mouseIsPressed && mouseX >= 470 && mouseX <= 500 && mouseY >= 0 && mouseY <= 30 && levelDone === false)
            {
                rageQuit = false;
                
                switch(pauseGame)
                {
                    case false:
                    stopGameForSign = true;
                    pauseGame = true;
                        break;
                        
                    case true:
                    stopGameForSign = false;
                    pauseGame = false;
                        break;
                }
            }
        }
        
        if(mouseX >= 10 && mouseX <= 10 + 40 && mouseY >= 10 && mouseY <= 10 + 40 && pages === "home")
        {
            println("var Save_File = [" + achievement.state + "," + mostlyDeadNum + "," + powerUpNum + "," + mapStars + ",true" + ",'" + currentBackdrop + "','" + currentEmoji + "'," + volumeSwitch + "," + sighnInsctructStateDelete + "," + emoji.earned2 + "," + achievement.earned2 + "," + backdropEarned2 + "];");
        }
        
        if(width < 500)
        {
            if(mouseX >= 255 && mouseX <= 255 + 65 && mouseY >= 275 && mouseY <= 275 + 30)
            {
                println(GameLink);
            }
        }
        
    }; // clicked states
    
};

//logo vars and functions
var grow = 0, growSpeed = 3, delayTimerEmerald = 0;
var emeraldX = 200, emeraldXSpeed = 3;
var textEmeraldGamesX = 490, textEmeraldGamesSpeedX = 3;
var shade = 0;

var
    emeraldGemLogo = function(x, y, s)
    {
    
    //stroke
    stroke(255, 255, 255, 35);
    strokeWeight(s / 25);
    
    //base
    fill(111, 252, 98);
    beginShape();
    vertex(x - s, y - s / 2);
    vertex(x - s / 2, y - s);
    vertex(x + s / 2, y - s);
    vertex(x + s, y - s / 2);
    vertex(x + s, y + s);
    vertex(x + s / 2, y + s * 1.5);
    vertex(x - s / 2, y + s * 1.5);
    vertex(x - s, y + s);
    vertex(x - s, y - s / 2);
    endShape();
    
    //1
    fill(113, 245, 98);
    noStroke();
    beginShape();
    vertex(x - s, y - s / 2);
    vertex(x - s / 2, y - s);
    vertex(x - s / 3, y - s / 2);
    vertex(x - s / 2, y - s / 3);
    endShape();
    
    //2
    fill(82, 235, 65);
    beginShape();
    vertex(x - s / 2, y - s);
    vertex(x - s / 3, y - s / 2);
    vertex(x + s / 3, y - s / 2);
    vertex(x + s / 2, y - s);
    endShape();
    
    //3
    beginShape();
    fill(72, 227, 54);
    vertex(x + s / 2, y - s);
    vertex(x + s, y - s / 2);
    vertex(x + s / 2, y - s / 3);
    vertex(x + s / 3, y - s / 2);
    endShape();
    
    //4
    fill(67, 217, 48);
    beginShape();
    vertex(x + s, y - s / 2);
    vertex(x + s, y + s);
    vertex(x + s / 2, y + s / 1.1);
    vertex(x + s / 2, y - s / 3);
    endShape();
    
    //5
    fill(57, 207, 37);
    beginShape();
    vertex(x + s, y + s);
    vertex(x + s / 2, y + s * 1.5);
    vertex(x + s / 3, y + s);
    vertex(x + s / 2, y + s / 1.2);
    endShape();
    
    //6
    fill(57, 196, 35);
    beginShape();
    vertex(x + s / 3, y + s);
    vertex(x + s / 2, y + s * 1.5);
    vertex(x - s / 2, y + s * 1.5);
    vertex(x - s / 3, y + s);
    endShape();
    
    //7
    fill(79, 214, 55);
    beginShape();
    vertex(x - s, y + s);
    vertex(x - s / 2, y + s * 1.5);
    vertex(x - s / 3, y + s);
    vertex(x - s / 2, y + s / 1.2);
    endShape();
    
    //8
    fill(96, 240, 67);
    beginShape();
    vertex(x - s, y + s);
    vertex(x - s / 2, y + s / 1.2);
    vertex(x - s / 2, y - s / 3);
    vertex(x - s, y - s / 2);
    endShape();
    
    //shade
    fill(0, 0, 0, 4);
    beginShape();
    vertex(x + s / 2.3, y - s / 2.3);
    vertex(x + s / 2, y - s / 3);
    vertex(x + s / 2, y + s / 1.2);
    vertex(x + s / 3, y + s);
    vertex(x - s / 3, y + s);
    vertex(x - s / 2.3, y + s / 1.1);
    endShape();
    
    //shade 2
    fill(0, 0, 0, 5);
    beginShape();
    vertex(x + s / 6, y + s);
    vertex(x + s / 3, y + s);
    vertex(x + s / 2, y + s / 1.2);
    vertex(x + s / 2, y + s / 1.5);
    endShape();

},

    logoPage = function()
    {
    
    pushMatrix();
    scale(width / 400, height / 400);
    textAlign(CENTER, CENTER);
    
    background(255, 255, 255);
    
    //emerald efect
    pushMatrix();
    translate(emeraldX, 182);
    rotate(grow * 4.53);
    emeraldGemLogo(0, 0, grow);
    popMatrix();
    
    //grow emerald
    grow += growSpeed;
    
    //when emerald is at the right length
    if(grow >= 35)
    {
        growSpeed -= 0.1;
        delayTimerEmerald += 1;
    }
    
    //textX move to the side
    if(delayTimerEmerald >= 50)
    {
        textEmeraldGamesX -= textEmeraldGamesSpeedX;
    }
    
    //once text touches the emerald
    if(textEmeraldGamesX <= 365)
    {
        textEmeraldGamesSpeedX -= 0.07;
        emeraldX -= emeraldXSpeed;
    }
    
    //limmit the emerald moving to the Xpos
    if(emeraldX < 180)
    {
        emeraldXSpeed -= 0.07;
    }
    
    //once the speed is less then 0
    if(emeraldXSpeed <= 0)
    {
        emeraldXSpeed = 0;
        shade += 5;
    }
    
    //once the speed is less then 0
    if(textEmeraldGamesSpeedX <= 0)
    {
        textEmeraldGamesSpeedX = 0;
    }
    
    //once the speed is less then 0
    if(growSpeed <= 0)
    {
        growSpeed = 0;
    }
    
    //text
    textSize(37);
    fill(47, 117, 11);
    text("EMERALD\nGAMES    ", textEmeraldGamesX, 200);
    text("EMERALD\nGAMES    ", textEmeraldGamesX + 2, 200);
    text("EMERALD\nGAMES    ", textEmeraldGamesX, 202);
    text("EMERALD\nGAMES    ", textEmeraldGamesX + 2, 202);
    noStroke();
    popMatrix();
    fill(255, 255, 255, shade);
    rect(0, 0, 500, 500);

};

draw = function()
{   
    textFont(createFont("Calibri (body)"));
    
    //logo
    if(shade <= 300)
    {
        logoPage();
        
        if(mouseIsPressed)
        {
            shade = 400;
            cursorLoad = 20;
        }
    }
    //when logo is done (show game)
    if(shade > 300)
    {
        compileEntireGameSets();
        
    }
    
    if(width < 500)
    {
        fill(0, 0, 0, 230);
        rect(0, 0, 400, 400);
        
        textSize(23);
        fill(255, 0, 0);
        text("Click the [Settings] button\nbelow, and change the following:\nWidth: 500\nHeight: 500\nIf you want to continue playing!\nAlso, don't forget to tell Isaac Emerald\nwhat you think about this game in\nthe Tips&Thanks            ", 200, 200);
        
        fill(11, 153, 209);
        
        if(mouseX >= 255 && mouseX <= 255 + 65 && mouseY >= 275 && mouseY <= 275 + 30)
        {
            cursor(HAND);
            fill(84, 182, 242);
        }
        
        text("HERE", 255 + (65 / 2), 275 + (30 / 2));
        text("_____", 255 + (65 / 2), 275 + (30 / 2));
    }
};

