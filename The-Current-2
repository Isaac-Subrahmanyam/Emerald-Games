
/**
WARNING (NOT LOADING ERROR):
    If it isn't loading, click "Restart" while it is trying to load.
    This should fix the problem.
**/


/**REPLACE THIS SAVE CODE**/
var saveCode = [0, 0, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, 0, 0, false];


/**
    ---------------------
    ----THE CURRENT 2----
    ---------------------
    
    BY: ISAAC EMERALD & CAVAN P
    
    HOW:
    + Use UP&DOWN or W&S keys to move the player up and down.
    + Eat smaller fish to grow and eat bigger fish.
    + Once you are big enough to eat a fish, it will have a bubble over it.
    + Get to the Feeding Frenzy (a 15 second stage where you can eat all the fish).
    + After every Feeding Fenzy it will shrink the fish back to normal and the game will be a little harder.
    
    STORE:
    + 24 unique fish!
    + 20 unique achievements!
    
    Creator Profiles:
    + CavanP: https://www.khanacademy.org/profile/loyaltyKA/projects
    + IsaacEmerald: https://www.khanacademy.org/profile/IsaacEmerald/projects
    
    Credits:
    + Jacob: For triangle collision.
    + JCB (PlatformerKing): For animated buttons.
    
    Fish developers:
    + Prisha B: https://www.khanacademy.org/profile/prishainabox/projects
     - Ferdinand, Spongebob
    + Gray Wolf: https://www.khanacademy.org/profile/grantjenkins/projects
     - Spikes, Skully, Buzz
    + TNT Guy: https://www.khanacademy.org/profile/purplemushroom/projects
     - Mush, Steel Slayer

**/




// set up stuff
frameRate(100);
smooth();

/** Achivement Values That Must be SAVES **/
var sharkEatCount = saveCode[46];
var gamesCount = saveCode[47];
var globalFishCount = saveCode[48];
var galaxyPlays = saveCode[49];

/** Achivement Values THAT DON'T HAVE TO BE SAVED **/
var milli = 0;
var sec = 0;
var eatenSomething = false;
var yF = 0, gF = 0, pF = 0, bF = 0;
var earned = 0;
var fishCount = 0;
var yandg = true;
var powerState = false;
var randType = "";
var randName = "";
var wheelTypeFishState = false;

var canvas = createGraphics(width, height, P2D);

// set up better object constructor
Object.constructor.prototype.new= function () {
    var obj = Object.create(this.prototype);
    this.apply(obj, arguments);
    return obj;
};

//return get(0, 0, 600, 600);
var images = {
    
    'sand': function (){
    
    pushMatrix();
    scale(1.5);
    strokeWeight(3);
    stroke(186, 113, 44);
    fill(250, 215, 110);
    ellipse(332,460,216,154);
    ellipse(74,460,190,185);
    ellipse(200,460,388,193);
    popMatrix();
        
    var seaweed = function(x, y, n) {
        var r;
        noStroke();
        fill(32, 112, 27);
        pushMatrix();
        translate(x, y);
        for(var i = 0; i < n; i+=2)
        {
            r = i / 6 + 3;
            ellipse(x + Math.sin(i), y + i * r/3, r, r);
        }
        popMatrix();
    };
    var starfish = function(x, y, s, col, r) {
        fill(col);
        strokeWeight(3);
        stroke(col);
        pushMatrix();
        translate(x,y);
        scale(s);
        rotate(r);
        beginShape();
        curveVertex(-90, -46);
        curveVertex(-45, -41); 
        curveVertex(-24, -51); 
        curveVertex(10, -106); 
        curveVertex(35, -37); 
        curveVertex(81, -29); 
        curveVertex(108, -14); 
        curveVertex(70, 15); 
        curveVertex(50, 34); 
        curveVertex(51, 58); 
        curveVertex(59, 84); 
        curveVertex(49, 108); 
        curveVertex(-5, 65); 
        curveVertex(-34, 76); 
        curveVertex(-78, 92); 
        curveVertex(-65, 35); 
        curveVertex(-79, -6); 
        curveVertex(-96, -19); 
        curveVertex(-108, -36); 
        curveVertex(-90, -46); 
        curveVertex(-45, -41); 
        curveVertex(-24, -51);
        endShape();
        
        fill(0, 30);
        
        beginShape();
        curveVertex(-90, -46);
        curveVertex(-45, -41); 
        curveVertex(-24, -51); 
        curveVertex(10, -106); 
        curveVertex(35, -37); 
        curveVertex(81, -29); 
        curveVertex(108, -14); 
        curveVertex(70, 15); 
        curveVertex(50, 34); 
        curveVertex(51, 58); 
        curveVertex(59, 84); 
        curveVertex(49, 108); 
        curveVertex(-5, 65); 
        curveVertex(-34, 76); 
        curveVertex(-78, 92); 
        curveVertex(-65, 35); 
        curveVertex(-79, -6); 
        curveVertex(-96, -19); 
        curveVertex(-108, -36); 
        curveVertex(-90, -46); 
        curveVertex(-45, -41); 
        curveVertex(-24, -51);
        endShape();
        popMatrix();
    };
        
    seaweed(100, 262, 20);
    seaweed(103, 262, 20);
    seaweed(106, 274, 9);
    seaweed(25, 258 + 15, 19);
    seaweed(28, 264 + 13, 15);
    seaweed(22, 269 + 15, 11);
    seaweed(215, 274, 19);
    seaweed(219, 260, 27);
    seaweed(223, 280, 15);
    seaweed(280, 280 + 3, 15);
    seaweed(284, 283 + 4, 13);
    starfish(100 - 2, 565 + 4, 0.1, color(0, 0, 0, 30), 10);
    starfish(268, 571, 0.15, color(0, 0, 0, 30), -29);
    starfish(346, 571, 0.13, color(0, 0, 0, 30), 22);
    starfish(100 - 2, 562 + 4, 0.1, color(232, 51, 63), 10);
    starfish(268, 568, 0.15, color(77, 90, 222), -29);
    starfish(346, 568, 0.13, color(162, 77, 222), 22);
        
        return get(0, 0, 600, 600);
    },
    
    'title': function (){
        
        pushMatrix();
        translate(17, 0);
        scale(0.91);
        fill(0, 204, 255);
        stroke(0, 87, 145);
        strokeWeight(6);
        beginShape();
        vertex(373, 36);
        vertex(373, 106);
        vertex(394, 72);
        vertex(426, 64);
        vertex(459, 82);
        vertex(455, 118);
        vertex(427, 154);
        vertex(390, 188);
        vertex(368, 216);
        vertex(368, 239);
        vertex(506, 232);
        vertex(525, 241);
        vertex(525, 202);
        vertex(506, 210);
        vertex(435, 201);
        vertex(484, 156);
        vertex(514, 104);
        vertex(510, 57);
        vertex(474, 26);
        vertex(429, 22);
        vertex(395, 35);
        vertex(373, 36);
        endShape();
        
        fill(0, 153, 255);
        strokeWeight(3);
        pushMatrix();
        translate(-224, -37);
        scale(2.30);
        beginShape();
        vertex(144, 31);
        vertex(179, 29);
        vertex(177, 51);
        vertex(170, 42);
        vertex(164, 83);
        vertex(169, 93);
        vertex(155, 93);
        vertex(158, 83);
        vertex(152, 41);
        vertex(147, 52);
        vertex(144, 31);
        endShape();
        popMatrix();
        
        fill(0, 204, 255);
        pushMatrix();
        translate(-236, -37);
        scale(2.36);
        beginShape();
        vertex(185,29);
        vertex(197,29);
        vertex(195,53);
        vertex(209,53);
        vertex(205,29);
        vertex(221,29);
        vertex(217,53);
        vertex(217,81);
        vertex(221,91);
        vertex(205,91);
        vertex(210,80);
        vertex(204,66);
        vertex(199,66);
        vertex(194,80);
        vertex(199,91);
        vertex(183,91);
        vertex(187,81);
        vertex(186,54);
        vertex(185,29);
        endShape();
        popMatrix();
        
        fill(0, 153, 255);
        pushMatrix();
        translate(-228, -37);
        scale(2.30);
        beginShape();
        vertex(228, 30);
        vertex(246, 32);
        vertex(255, 30);
        vertex(255, 41);
        vertex(246, 39);
        vertex(244, 43);
        vertex(244, 57);
        vertex(254, 55);
        vertex(254, 67);
        vertex(244, 65);
        vertex(244, 78);
        vertex(247, 83);
        vertex(256, 80);
        vertex(256, 93);
        vertex(248, 90);
        vertex(229, 93);
        vertex(232, 63);
        vertex(228, 30);
        endShape();
        popMatrix();
        
        strokeWeight(5);
        
        pushMatrix();
        translate(-38,-66);
        scale(1.35);
        
        pushMatrix();
        translate(75, 115);
        scale(0.65);
        beginShape();
        vertex(63,115);
        vertex(74,111);
        vertex(87,113);
        vertex(94,123);
        vertex(92,132);
        vertex(96,139);
        vertex(81,139);
        vertex(85,132);
        vertex(81,127);
        vertex(77,121);
        vertex(73,129);
        vertex(73,158);
        vertex(76,166);
        vertex(81,161);
        vertex(84,155);
        vertex(81,148);
        vertex(96,148);
        vertex(92,155);
        vertex(94,165);
        vertex(87,173);
        vertex(78,176);
        vertex(67,174);
        vertex(59,168);
        vertex(60,144);
        vertex(58,124);
        vertex(63,115);
        endShape();
        popMatrix();
        
        fill(0, 204, 255);
        pushMatrix();
        translate(75, 115);
        scale(0.65);
        beginShape();
        vertex(102,113);
        vertex(105,125);
        vertex(103,140);
        vertex(102,165);
        vertex(108,172);
        vertex(121,176);
        vertex(134,172);
        vertex(140,165);
        vertex(140,140);
        vertex(137,125);
        vertex(140,113);
        vertex(124,113);
        vertex(128,125);
        vertex(125,140);
        vertex(125,162);
        vertex(121,166);
        vertex(118,162);
        vertex(118,140);
        vertex(114,125);
        vertex(118,112);
        vertex(102,113);
        endShape();
        popMatrix();
        
        fill(0, 153, 255);
        pushMatrix();
        translate(49, 116);
        scale(0.64);
        beginShape();
        vertex(148 + 43,112);
        vertex(172 + 43,112);
        vertex(180 + 43,116);
        vertex(183 + 43,123);
        vertex(183 + 43,136);
        vertex(179 + 43,141);
        vertex(172 + 43,144);
        vertex(182 + 43,147);
        vertex(182 + 43,165);
        vertex(185 + 43,175);
        vertex(169 + 43,175);
        vertex(172 + 43,165);
        vertex(169 + 43,151);
        vertex(164 + 43,148);
        vertex(160 + 43,163);
        vertex(163 + 43,174);
        vertex(148 + 43,174);
        vertex(150 + 43,163);
        vertex(148 + 43,149);
        vertex(172 + 43,130);
        vertex(156 + 43,122);
        vertex(156 + 43,137);
        vertex(148 + 43,144);
        vertex(148 + 43,112);
        endShape();
        popMatrix();
        
        fill(0, 204, 255);
        pushMatrix();
        translate(77, 116);
        scale(0.64);
        beginShape();
        vertex(148 + 43,112);
        vertex(172 + 43,112);
        vertex(180 + 43,116);
        vertex(183 + 43,123);
        vertex(183 + 43,136);
        vertex(179 + 43,141);
        vertex(172 + 43,144);
        vertex(182 + 43,147);
        vertex(182 + 43,165);
        vertex(185 + 43,175);
        vertex(169 + 43,175);
        vertex(172 + 43,165);
        vertex(169 + 43,151);
        vertex(164 + 43,148);
        vertex(160 + 43,163);
        vertex(163 + 43,174);
        vertex(148 + 43,174);
        vertex(150 + 43,163);
        vertex(148 + 43,149);
        vertex(172 + 43,130);
        vertex(156 + 43,122);
        vertex(156 + 43,137);
        vertex(148 + 43,144);
        vertex(148 + 43,112);
        endShape();
        popMatrix();
        
        fill(0, 153, 255);
        pushMatrix();
        translate(78, 168);
        scale(0.65);
        beginShape();
        vertex(228, 30);
        vertex(246, 32);
        vertex(255, 30);
        vertex(255, 41);
        vertex(246, 39);
        vertex(244, 43);
        vertex(244, 57);
        vertex(254, 55);
        vertex(254, 67);
        vertex(244, 65);
        vertex(244, 78);
        vertex(247, 83);
        vertex(256, 80);
        vertex(256, 93);
        vertex(248, 90);
        vertex(229, 93);
        vertex(232, 63);
        vertex(228, 30);
        endShape();
        popMatrix();
        
        fill(0, 204, 255);
        pushMatrix();
        translate(74, 114);
        scale(0.65);
        beginShape();
        vertex(269,113);
        vertex(281,110);
        vertex(291,140);
        vertex(294,120);
        vertex(291,113);
        vertex(304,113);
        vertex(302,120);
        vertex(306,176);
        vertex(291,176);
        vertex(283,155);
        vertex(278,165);
        vertex(282,175);
        vertex(268,175);
        vertex(271,165);
        vertex(269,113);
        endShape();
        popMatrix();
        
        fill(0, 153, 255);
        pushMatrix();
        translate(182, 167);
        scale(0.65);
        beginShape();
        vertex(144, 31);
        vertex(179, 29);
        vertex(177, 51);
        vertex(170, 42);
        vertex(164, 83);
        vertex(169, 93);
        vertex(155, 93);
        vertex(158, 83);
        vertex(152, 41);
        vertex(147, 52);
        vertex(144, 31);
        endShape();
        popMatrix();
        popMatrix();
        
        textSize(33);
        fill(0, 87, 145);
        text("ISAAC EMERALD X CAVAN P", 318, 265);
        text("ISAAC EMERALD X CAVAN P", 322, 265);
        text("ISAAC EMERALD X CAVAN P", 318, 262);
        text("ISAAC EMERALD X CAVAN P", 322, 262);
        text("ISAAC EMERALD X CAVAN P", 318, 268);
        text("ISAAC EMERALD X CAVAN P", 322, 268);
        text("ISAAC EMERALD X CAVAN P", 318, 263);
        text("ISAAC EMERALD X CAVAN P", 322, 263);
        text("ISAAC EMERALD X CAVAN P", 320, 268);
        text("ISAAC EMERALD X CAVAN P", 322, 262);
        fill(0, 153, 255);
        text("ISAAC EMERALD X CAVAN P", 320, 265);
        fill(0, 204, 255);
        text("ISAAC EMERALD X CAVAN P", 320, 263);
        
        pushMatrix();
        translate(0, 53);
        stroke(0, 122, 204, 100);
        fill(0, 153, 255, 100);
        ellipse(371, 275, 25, 25);
        ellipse(335, 263, 23, 23);
        ellipse(296, 257, 21, 21);
        ellipse(250, 267, 18, 18);
        ellipse(206, 278, 15, 15);
        ellipse(161, 273, 10, 10);
        ellipse(116, 252, 7, 7);
        popMatrix();
        popMatrix();
        
        return get(0, 0, 600, 600);
    },
};

// load images
var loadImages = function(){
    for(var i in images){
        if (typeof images[i] !== "object") {
            background(0, 0, 0, 0);
            images[i] = images[i]();
        }
    }
};

// variables
var powMode = 0, // power mode from wheel
    zoom = 1, // zoom for < key
    newBest = false, // track if new best is achieved
    curType = "og", // current fish type
    coins = saveCode[1], // coins
    
    // feeding frenzy
    growDelay = true,
    growState = false,
    frenzyDelay = 0,
    frenzyTime = 15,
    feedingFrenzy = false,
    
    // game controls
    gameSpeed = 0,
    fishState = 1,
    score = 0,
    scene = "menu",
    
    // death tracker
    deadState = false,
    deadRotate = 0,
    
    // other stuff
    trans = 0,
    gameState = saveCode[50],
    bestScore = saveCode[0],
    font_tahoma = createFont("Tahoma");

// store
var store = {
    prices: [0, 50, 75, 100, 100, 150, 200, 200, 300, 400, 500, 550, 600, 700, 700, 800, 800, 1000, 1000, 1200, 1500, 1800, 1900, 2000],
    type: ["og", "nemo", "dory", "afro", "student", "rainbow", "spikes", "star", "bee", "bubble", "must", "skelly", "chester", "willard", "wolf", "emerald", "mush", "sponge", "seafairy", "ultron", "robo", "unicorn", "galaxy", "cavan"],
    name: ["ROBIN", "NEMO", "DORY", "CLOWN", "TEACHER", "SKITTLES", "SPIKES", "GOLDY", "BUZZ", "BUBBLES", "FERDINAND", "SKELLY", "EVIL CHESTER", "WILLARD", "GRAY WOLF", "ISAAC EMERALD", "MUSH", "SPONGEBOB", "JELLY BELLY", "ULTRON DIMENSION", "STEEL SLAYER", "UNICORN", "GALAXY", "CAVAN"],
    bought: [saveCode[22], saveCode[23], saveCode[24], saveCode[25], saveCode[26], saveCode[27], saveCode[28], saveCode[29], saveCode[30], saveCode[31], saveCode[32], saveCode[33], saveCode[34], saveCode[35], saveCode[36], saveCode[37], saveCode[38], saveCode[39], saveCode[40], saveCode[41], saveCode[42], saveCode[43], saveCode[44], saveCode[45]]
},
    storeSwipe = 0;

// achievements
var achievements = {
    names: [
        "Window shopping",
        "Big Spender",
        "Out of this world",
        "Fatal accident",
        "You're supposed to eat the fish!!!",
        "Seeing Double",
        "One of a kind",
        "Going hungry",
        "Rich",
        "Addicted",
        "Speedy Gonzales",
        "Hungry Hungry Hippo",
        "Biggest fish in the sea",
        "Astronaut",
        "Back to School",
        "Sponge da bob",
        "Dedication",
        "Naptime",
        "Bank",
        "The end of the road"
    ],
    earned: [
        saveCode[2],
        saveCode[3],
        saveCode[4],
        saveCode[5],
        saveCode[6],
        saveCode[7],
        saveCode[8],
        saveCode[9],
        saveCode[10],
        saveCode[11],
        saveCode[12],
        saveCode[13],
        saveCode[14],
        saveCode[15],
        saveCode[16],
        saveCode[17],
        saveCode[18],
        saveCode[19],
        saveCode[20],
        saveCode[21]
    ],
    descriptions: [
        "Visit the shop",
        "Buy all the fish",
        "Buy the most expensive fish",
        "Get eaten by a shark 30 times",
        "Go 100 seconds without eating a single fish",
        "\nEat ONLY two yellow fish, two green fish,\ntwo purple fish, and two blue fish\n(In a single Feeding Frenzy)",
        "\nEat ONLY one yellow fish, one green fish,\none purple fish, and one blue fish\n(In a single Feeding Frenzy)",
        "Die without eating a fish",
        "Earn $200 in a single run\n(ALL POWERUPS EXCLUDED)",
        "Play 100 games",
        "Get to a feeding frenzy within one minute\n(ALL POWERUPS EXCLUDED)",
        "Eat 10 fish in 15 seconds\n(ALL POWERUPS EXCLUDED)",
        "Eat 500 fish",
        "Play 10 games with the Galaxy fish",
        "Buy the Teacher fish",
        "Buy the Spongebob fish",
        "\nGet to a feeding frenzy by\nonly eating yellow and green fish\n(ALL POWERUPS EXCLUDED)",
        "\nSurvive 5 minutes in a single game\n(ALL POWERUPS EXCLUDED)",
        "Have 3,000 coins in your bank",
        "Achieve every achievement besides this one"
    ],
    anim: [
        saveCode[2],
        saveCode[3],
        saveCode[4],
        saveCode[5],
        saveCode[6],
        saveCode[7],
        saveCode[8],
        saveCode[9],
        saveCode[10],
        saveCode[11],
        saveCode[12],
        saveCode[13],
        saveCode[14],
        saveCode[15],
        saveCode[16],
        saveCode[17],
        saveCode[18],
        saveCode[19],
        saveCode[20],
        saveCode[21]
    ],
    icons: [
        function(){
            pushMatrix();
            translate(-2, -5);
            noFill();
            strokeWeight(3);
            stroke(0);
            beginShape();
            vertex(55, 55);
            vertex(85, 55);
            vertex(80, 75);
            vertex(50, 75);
            vertex(45, 45);
            vertex(42, 42);
            endShape();
            beginShape();
            vertex(55, 75);
            vertex(52, 83);
            vertex(80, 83);
            endShape();
            ellipse(75, 87, 5, 5);
            ellipse(58, 87, 5, 5);
            popMatrix();
        },
        function(){
            pushMatrix();
            translate(112, -71);
            scale(1.3);
            noFill();
            strokeWeight(1);
            stroke(0);
            ellipse(52, 100, 38, 38);
            textSize(30);
            fill(0, 0, 0);
            text("$", 52, 98);
            popMatrix();
        },
        function(){
            strokeWeight(3);
            stroke(0);
            noFill();
            ellipse(300, 57, 70, 70);
            strokeWeight(2);
            pushMatrix();
            translate(236, 9);
            scale(0.6);
            beginShape();
            vertex(129, 31);
            vertex(125, 34);
            vertex(125, 39);
            vertex(115, 35);
            vertex(113, 35);
            vertex(105, 39);
            vertex(113, 42);
            vertex(115, 45);
            vertex(113, 47);
            vertex(110, 47);
            vertex(107, 43);
            vertex(105, 44);
            vertex(103, 49);
            vertex(99, 54);
            vertex(97, 61);
            vertex(104, 61);
            vertex(104, 60);
            vertex(109, 61);
            vertex(111, 63);
            vertex(120, 63);
            vertex(120, 67);
            vertex(117, 71);
            vertex(107, 71);
            vertex(100, 69);
            vertex(97, 67);
            vertex(89, 67);
            vertex(86, 72);
            vertex(81, 80);
            vertex(84, 88);
            vertex(88, 89);
            vertex(91, 91);
            vertex(93, 97);
            vertex(95, 99);
            vertex(102, 102);
            vertex(103, 106);
            vertex(103, 117);
            vertex(105, 122);
            vertex(107, 123);
            vertex(112, 125);
            vertex(119, 125);
            vertex(121, 119);
            vertex(123, 114);
            vertex(123, 110);
            vertex(123, 106);
            vertex(126, 102);
            vertex(130, 100);
            vertex(134, 94);
            vertex(134, 90);
            vertex(135, 88);
            vertex(138, 87);
            vertex(138, 82);
            vertex(146, 82);
            vertex(150, 81);
            vertex(149, 78);
            vertex(146, 75);
            vertex(142, 73);
            vertex(142, 72);
            vertex(145, 74);
            vertex(152, 75);
            vertex(156, 74);
            vertex(159, 79);
            vertex(161, 83);
            vertex(165, 86);
            endShape();
            beginShape();
            vertex(52, 83);
            vertex(62, 83);
            vertex(67, 88);
            vertex(71, 95);
            vertex(72, 99);
            vertex(75, 100);
            vertex(74, 105);
            vertex(70, 110);
            vertex(68, 120);
            endShape();
            beginShape();
            vertex(60, 50);
            vertex(73, 49);
            vertex(77, 49);
            vertex(82, 45);
            vertex(82, 41);
            vertex(86, 40);
            vertex(86, 37);
            vertex(88, 34);
            vertex(88, 28);
            endShape();
            popMatrix();
        },
        function(){
            stroke(0);
            noFill();
            strokeWeight(5);
            pushMatrix();
            translate(377, 12);
            scale(0.4);
            beginShape();
            vertex(110, 23);
            vertex(105, 23);
            vertex(96, 24);
            vertex(86, 31);
            vertex(78, 35);
            vertex(73, 40);
            vertex(66, 45);
            vertex(63, 52);
            vertex(61, 64);
            vertex(61, 75);
            vertex(65, 84);
            vertex(70, 91);
            vertex(72, 97);
            vertex(72, 111);
            vertex(72, 115);
            vertex(77, 116);
            vertex(83, 116);
            vertex(87, 115);
            vertex(87, 116);
            vertex(91, 119);
            vertex(91, 125);
            vertex(93, 131);
            vertex(103, 135);
            vertex(113, 135);
            vertex(123, 135);
            vertex(130, 129);
            vertex(131, 124);
            vertex(130, 117);
            vertex(132, 113);
            vertex(137, 113);
            vertex(146, 113);
            vertex(151, 108);
            vertex(151, 100);
            vertex(148, 95);
            vertex(153, 88);
            vertex(153, 82);
            vertex(158, 73);
            vertex(157, 60);
            vertex(156, 53);
            vertex(155, 49);
            vertex(152, 44);
            vertex(150, 42);
            vertex(146, 37);
            vertex(142, 34);
            vertex(140, 31);
            vertex(133, 30);
            vertex(127, 26);
            vertex(122, 25);
            vertex(117, 25);
            vertex(110, 24);
            endShape();
            ellipse(90, 70, 20, 16);
            ellipse(130, 70, 20, 16);
            pushMatrix();
            translate(0, -8);
            beginShape();
            vertex(113, 105);
            vertex(112, 101);
            vertex(110, 99);
            vertex(108, 100);
            vertex(105, 104);
            vertex(104, 107);
            vertex(104, 110);
            vertex(104, 113);
            vertex(108, 113);
            vertex(109, 111);
            vertex(111, 111);
            vertex(113, 112);
            vertex(113, 112);
            vertex(116, 112);
            vertex(117, 110);
            vertex(115, 109);
            vertex(113, 104);
            endShape();
            popMatrix();
            beginShape();
            vertex(110, 163);
            vertex(142, 180);
            vertex(146, 188);
            vertex(151, 196);
            vertex(161, 196);
            vertex(164, 192);
            vertex(165, 184);
            vertex(164, 180);
            vertex(167, 179);
            vertex(172, 174);
            vertex(172, 171);
            vertex(170, 163);
            vertex(164, 163);
            vertex(156, 163);
            vertex(150, 164);
            vertex(150, 166);
            vertex(123, 160);
            vertex(148, 148);
            vertex(154, 148);
            vertex(163, 148);
            vertex(170, 147);
            vertex(170, 141);
            vertex(169, 135);
            vertex(165, 132);
            vertex(165, 125);
            vertex(164, 121);
            vertex(160, 118);
            vertex(152, 118);
            vertex(149, 122);
            vertex(149, 122);
            vertex(146, 128);
            vertex(145, 132);
            vertex(142, 134);
            vertex(111, 152);
            vertex(78, 134);
            vertex(76, 132);
            vertex(75, 126);
            vertex(73, 122);
            vertex(70, 119);
            vertex(64, 118);
            vertex(58, 119);
            vertex(54, 122);
            vertex(56, 126);
            vertex(57, 133);
            vertex(52, 134);
            vertex(48, 135);
            vertex(48, 140);
            vertex(48, 147);
            vertex(55, 149);
            vertex(62, 149);
            vertex(68, 149);
            vertex(72, 146);
            vertex(95, 158);
            vertex(70, 169);
            vertex(61, 166);
            vertex(57, 164);
            vertex(50, 166);
            vertex(46, 170);
            vertex(51, 179);
            vertex(55, 181);
            vertex(55, 190);
            vertex(57, 194);
            vertex(62, 196);
            vertex(68, 196);
            vertex(72, 193);
            vertex(76, 183);
            vertex(77, 180);
            vertex(109, 164);
            endShape();
            popMatrix();
        },
        function(){
            noFill();
            stroke(0);
            strokeWeight(3);
            ellipse(533, 57, 55, 55);
            strokeWeight(1);
            ellipse(533, 57, 45, 45);
            
            strokeWeight(2);
            line(572, 76, 572, 52);
            line(569, 52, 575, 52);
            
            strokeWeight(1);
            line(569, 52, 569, 45);
            line(571, 52, 571, 45);
            line(573, 52, 573, 45);
            line(575, 52, 575, 45);
        },
        function(){
            noFill();
            strokeWeight(5);
            stroke(0);
            pushMatrix();
            translate(29, 140);
            scale(0.10);
            beginShape();
            vertex(212, 114);
            vertex(204, 113);
            vertex(197, 113);
            vertex(185, 112);
            vertex(171, 115);
            vertex(159, 120);
            vertex(144, 124);
            vertex(117, 130);
            vertex(100, 135);
            vertex(82, 144);
            vertex(79, 146);
            vertex(52, 153);
            vertex(44, 162);
            vertex(33, 168);
            vertex(33, 172);
            vertex(43, 180);
            vertex(44, 185);
            vertex(36, 185);
            vertex(32, 186);
            vertex(32, 191);
            vertex(36, 195);
            vertex(44, 199);
            vertex(51, 203);
            vertex(59, 204);
            vertex(67, 207);
            vertex(77, 211);
            vertex(92, 215);
            vertex(100, 217);
            vertex(111, 219);
            vertex(121, 222);
            vertex(123, 222);
            vertex(136, 224);
            vertex(148, 228);
            vertex(160, 230);
            vertex(168, 231);
            vertex(171, 233);
            vertex(177, 241);
            vertex(181, 248);
            vertex(185, 256);
            vertex(191, 264);
            vertex(201, 271);
            vertex(208, 275);
            vertex(216, 280);
            vertex(224, 282);
            vertex(223, 280);
            vertex(221, 278);
            vertex(218, 274);
            vertex(223, 274);
            vertex(225, 274);
            vertex(225, 272);
            vertex(228, 268);
            vertex(228, 266);
            vertex(224, 265);
            vertex(222, 262);
            vertex(222, 258);
            vertex(223, 258);
            vertex(228, 258);
            vertex(228, 259);
            vertex(231, 259);
            vertex(229, 257);
            vertex(226, 254);
            vertex(227, 252);
            vertex(229, 250);
            vertex(228, 248);
            vertex(224, 246);
            vertex(221, 244);
            vertex(218, 240);
            vertex(218, 238);
            vertex(219, 238);
            vertex(224, 238);
            vertex(233, 238);
            vertex(244, 238);
            vertex(253, 238);
            vertex(267, 239);
            vertex(279, 239);
            vertex(292, 239);
            vertex(305, 239);
            vertex(320, 238);
            vertex(329, 237);
            vertex(340, 234);
            vertex(349, 233);
            vertex(360, 232);
            vertex(363, 232);
            vertex(372, 237);
            vertex(384, 242);
            vertex(393, 247);
            vertex(403, 250);
            vertex(415, 254);
            vertex(424, 255);
            vertex(428, 252);
            vertex(426, 242);
            vertex(426, 236);
            vertex(426, 228);
            vertex(428, 222);
            vertex(432, 218);
            vertex(432, 217);
            vertex(436, 212);
            vertex(436, 210);
            vertex(431, 212);
            vertex(426, 213);
            vertex(425, 210);
            vertex(428, 208);
            vertex(436, 205);
            vertex(443, 205);
            vertex(451, 205);
            vertex(460, 205);
            vertex(468, 205);
            vertex(477, 205);
            vertex(488, 202);
            vertex(499, 206);
            vertex(508, 211);
            vertex(520, 214);
            vertex(533, 217);
            vertex(545, 221);
            vertex(555, 224);
            vertex(564, 226);
            vertex(573, 226);
            vertex(577, 226);
            vertex(574, 214);
            vertex(572, 206);
            vertex(569, 200);
            vertex(566, 194);
            vertex(561, 185);
            vertex(560, 178);
            vertex(560, 178);
            vertex(560, 162);
            vertex(572, 150);
            vertex(576, 144);
            vertex(577, 137);
            vertex(580, 130);
            vertex(581, 128);
            vertex(573, 128);
            vertex(567, 128);
            vertex(560, 128);
            vertex(551, 130);
            vertex(542, 136);
            vertex(532, 142);
            vertex(520, 144);
            vertex(500, 146);
            vertex(485, 148);
            vertex(473, 151);
            vertex(462, 155);
            vertex(460, 155);
            vertex(438, 150);
            vertex(425, 146);
            vertex(415, 145);
            vertex(405, 142);
            vertex(398, 141);
            vertex(393, 138);
            vertex(392, 134);
            vertex(392, 132);
            vertex(396, 130);
            vertex(399, 130);
            vertex(401, 130);
            vertex(404, 130);
            vertex(404, 130);
            vertex(403, 124);
            vertex(399, 118);
            vertex(395, 112);
            vertex(391, 106);
            vertex(387, 102);
            vertex(382, 102);
            vertex(376, 102);
            vertex(370, 102);
            vertex(358, 105);
            vertex(354, 106);
            vertex(335, 109);
            vertex(324, 115);
            vertex(316, 118);
            vertex(305, 119);
            vertex(297, 117);
            vertex(293, 116);
            vertex(297, 113);
            vertex(299, 112);
            vertex(293, 112);
            vertex(291, 112);
            vertex(288, 112);
            vertex(286, 110);
            vertex(287, 109);
            vertex(288, 106);
            vertex(291, 105);
            vertex(291, 104);
            vertex(292, 101);
            vertex(287, 102);
            vertex(285, 104);
            vertex(284, 105);
            vertex(281, 105);
            vertex(279, 105);
            vertex(281, 98);
            vertex(281, 98);
            vertex(284, 97);
            vertex(284, 94);
            vertex(280, 90);
            vertex(279, 93);
            vertex(276, 95);
            vertex(271, 96);
            vertex(269, 89);
            vertex(272, 86);
            vertex(276, 86);
            vertex(276, 82);
            vertex(269, 85);
            vertex(266, 87);
            vertex(262, 87);
            vertex(259, 87);
            vertex(263, 80);
            vertex(263, 78);
            vertex(264, 77);
            vertex(264, 76);
            vertex(259, 76);
            vertex(253, 79);
            vertex(251, 82);
            vertex(251, 82);
            vertex(243, 86);
            vertex(237, 90);
            vertex(233, 93);
            vertex(229, 95);
            vertex(226, 100);
            vertex(223, 104);
            vertex(219, 108);
            vertex(216, 110);
            vertex(214, 112);
            vertex(212, 115);
            endShape();
            pushMatrix();
            translate(0, -230);
            beginShape();
            vertex(212, 114);
            vertex(204, 113);
            vertex(197, 113);
            vertex(185, 112);
            vertex(171, 115);
            vertex(159, 120);
            vertex(144, 124);
            vertex(117, 130);
            vertex(100, 135);
            vertex(82, 144);
            vertex(79, 146);
            vertex(52, 153);
            vertex(44, 162);
            vertex(33, 168);
            vertex(33, 172);
            vertex(43, 180);
            vertex(44, 185);
            vertex(36, 185);
            vertex(32, 186);
            vertex(32, 191);
            vertex(36, 195);
            vertex(44, 199);
            vertex(51, 203);
            vertex(59, 204);
            vertex(67, 207);
            vertex(77, 211);
            vertex(92, 215);
            vertex(100, 217);
            vertex(111, 219);
            vertex(121, 222);
            vertex(123, 222);
            vertex(136, 224);
            vertex(148, 228);
            vertex(160, 230);
            vertex(168, 231);
            vertex(171, 233);
            vertex(177, 241);
            vertex(181, 248);
            vertex(185, 256);
            vertex(191, 264);
            vertex(201, 271);
            vertex(208, 275);
            vertex(216, 280);
            vertex(224, 282);
            vertex(223, 280);
            vertex(221, 278);
            vertex(218, 274);
            vertex(223, 274);
            vertex(225, 274);
            vertex(225, 272);
            vertex(228, 268);
            vertex(228, 266);
            vertex(224, 265);
            vertex(222, 262);
            vertex(222, 258);
            vertex(223, 258);
            vertex(228, 258);
            vertex(228, 259);
            vertex(231, 259);
            vertex(229, 257);
            vertex(226, 254);
            vertex(227, 252);
            vertex(229, 250);
            vertex(228, 248);
            vertex(224, 246);
            vertex(221, 244);
            vertex(218, 240);
            vertex(218, 238);
            vertex(219, 238);
            vertex(224, 238);
            vertex(233, 238);
            vertex(244, 238);
            vertex(253, 238);
            vertex(267, 239);
            vertex(279, 239);
            vertex(292, 239);
            vertex(305, 239);
            vertex(320, 238);
            vertex(329, 237);
            vertex(340, 234);
            vertex(349, 233);
            vertex(360, 232);
            vertex(363, 232);
            vertex(372, 237);
            vertex(384, 242);
            vertex(393, 247);
            vertex(403, 250);
            vertex(415, 254);
            vertex(424, 255);
            vertex(428, 252);
            vertex(426, 242);
            vertex(426, 236);
            vertex(426, 228);
            vertex(428, 222);
            vertex(432, 218);
            vertex(432, 217);
            vertex(436, 212);
            vertex(436, 210);
            vertex(431, 212);
            vertex(426, 213);
            vertex(425, 210);
            vertex(428, 208);
            vertex(436, 205);
            vertex(443, 205);
            vertex(451, 205);
            vertex(460, 205);
            vertex(468, 205);
            vertex(477, 205);
            vertex(488, 202);
            vertex(499, 206);
            vertex(508, 211);
            vertex(520, 214);
            vertex(533, 217);
            vertex(545, 221);
            vertex(555, 224);
            vertex(564, 226);
            vertex(573, 226);
            vertex(577, 226);
            vertex(574, 214);
            vertex(572, 206);
            vertex(569, 200);
            vertex(566, 194);
            vertex(561, 185);
            vertex(560, 178);
            vertex(560, 178);
            vertex(560, 162);
            vertex(572, 150);
            vertex(576, 144);
            vertex(577, 137);
            vertex(580, 130);
            vertex(581, 128);
            vertex(573, 128);
            vertex(567, 128);
            vertex(560, 128);
            vertex(551, 130);
            vertex(542, 136);
            vertex(532, 142);
            vertex(520, 144);
            vertex(500, 146);
            vertex(485, 148);
            vertex(473, 151);
            vertex(462, 155);
            vertex(460, 155);
            vertex(438, 150);
            vertex(425, 146);
            vertex(415, 145);
            vertex(405, 142);
            vertex(398, 141);
            vertex(393, 138);
            vertex(392, 134);
            vertex(392, 132);
            vertex(396, 130);
            vertex(399, 130);
            vertex(401, 130);
            vertex(404, 130);
            vertex(404, 130);
            vertex(403, 124);
            vertex(399, 118);
            vertex(395, 112);
            vertex(391, 106);
            vertex(387, 102);
            vertex(382, 102);
            vertex(376, 102);
            vertex(370, 102);
            vertex(358, 105);
            vertex(354, 106);
            vertex(335, 109);
            vertex(324, 115);
            vertex(316, 118);
            vertex(305, 119);
            vertex(297, 117);
            vertex(293, 116);
            vertex(297, 113);
            vertex(299, 112);
            vertex(293, 112);
            vertex(291, 112);
            vertex(288, 112);
            vertex(286, 110);
            vertex(287, 109);
            vertex(288, 106);
            vertex(291, 105);
            vertex(291, 104);
            vertex(292, 101);
            vertex(287, 102);
            vertex(285, 104);
            vertex(284, 105);
            vertex(281, 105);
            vertex(279, 105);
            vertex(281, 98);
            vertex(281, 98);
            vertex(284, 97);
            vertex(284, 94);
            vertex(280, 90);
            vertex(279, 93);
            vertex(276, 95);
            vertex(271, 96);
            vertex(269, 89);
            vertex(272, 86);
            vertex(276, 86);
            vertex(276, 82);
            vertex(269, 85);
            vertex(266, 87);
            vertex(262, 87);
            vertex(259, 87);
            vertex(263, 80);
            vertex(263, 78);
            vertex(264, 77);
            vertex(264, 76);
            vertex(259, 76);
            vertex(253, 79);
            vertex(251, 82);
            vertex(251, 82);
            vertex(243, 86);
            vertex(237, 90);
            vertex(233, 93);
            vertex(229, 95);
            vertex(226, 100);
            vertex(223, 104);
            vertex(219, 108);
            vertex(216, 110);
            vertex(214, 112);
            vertex(212, 115);
            endShape();
            popMatrix();
            popMatrix();
        },
        function(){
            stroke(0);
            strokeWeight(3);
            noFill();
            
            beginShape();
            vertex(166, 130);
            vertex(194, 130);
            vertex(200, 140);
            vertex(180, 170);
            vertex(160, 140);
            endShape(CLOSE);
            
            line(200, 140, 160, 140);
            
            strokeWeight(2);
            line(180, 170, 187, 140);
            line(180, 170, 173, 140);
            line(187, 140, 193, 130);
            line(173, 140, 179, 130);
            line(187, 140, 179, 130);
            line(173, 140, 166, 130);
        },
        function(){
            noFill();
            strokeWeight(3);
            stroke(0);
            
            var bone = function(x, y)
            {
                pushMatrix();
                translate(x, y);
                beginShape();
                vertex(63, 68);
                bezierVertex(64, 52, 51, 39, 58, 41);
                bezierVertex(70, 52, 68, 63, 70, 68);
                endShape();
                popMatrix();
            };
            
            pushMatrix();
            
            translate(260, 117);
            scale(0.4);
            
            beginShape();
            vertex(5, 68);
            bezierVertex(4, 68, 2, 72, 5, 75);
            bezierVertex(28, 103, 38, 103, 41, 100);
            bezierVertex(49, 91, 54, 77, 52, 75);
            vertex(160, 75);
            bezierVertex(174, 91, 186, 106, 189, 103);
            bezierVertex(179, 83, 179, 62, 188, 42);
            bezierVertex(189, 32, 164, 67, 160, 68);
            vertex(52, 68);
            bezierVertex(52, 61, 50, 51, 39, 42);
            bezierVertex(37, 38, 17, 52, 5, 68);
            endShape();
            
            bone(0, 0);
            pushMatrix();
            translate(8, -9);
            scale(1.13);
            bone(0, 0);
            popMatrix();
            pushMatrix();
            translate(17, -17);
            scale(1.25);
            bone(0, 0);
            popMatrix();
            pushMatrix();
            translate(38, -14);
            scale(1.19);
            bone(0, 0);
            popMatrix();
            pushMatrix();
            translate(68, -1);
            scale(1.01);
            bone(0, 0);
            popMatrix();
            pushMatrix();
            translate(112, 25);
            scale(0.62);
            bone(0, 0);
            popMatrix();
            
            pushMatrix();
            translate(0, 143);
            scale(1, -1);
            bone(0, 0);
            pushMatrix();
            translate(8, -9);
            scale(1.13);
            bone(0, 0);
            popMatrix();
            pushMatrix();
            translate(17, -17);
            scale(1.25);
            bone(0, 0);
            popMatrix();
            pushMatrix();
            translate(38, -14);
            scale(1.19);
            bone(0, 0);
            popMatrix();
            pushMatrix();
            translate(68, -1);
            scale(1.01);
            bone(0, 0);
            popMatrix();
            pushMatrix();
            translate(112, 25);
            scale(0.62);
            bone(0, 0);
            popMatrix();
            popMatrix();
            popMatrix();
        },
        function(){
            noFill();
            strokeWeight(3);
            stroke(0);
            pushMatrix();
            translate(0, -13);
            
            ellipse(420, 136, 45, 10);
            bezier(407, 141, 320, 200, 520, 200, 433, 141);
            arc(420, 145, 35, 10, 0, 180);
            
            strokeWeight(2);
            bezier(438, 145, 441, 136, 450, 136, 443, 146);
            bezier(438, 145, 441, 142, 461, 147, 443, 146);
            
            fill(0);
            textSize(26);
            text('$', 420, 164);
            
            popMatrix();
        },
        function(){
            strokeWeight(3);
            stroke(0);
            noFill();
            arc(557, 156, 24, 24, 270, 503);
            arc(521, 156, 24, 24, 34, 270);
            line(557, 144, 521, 144);
            line(546, 162, 531, 162);
            
            strokeWeight(1);
            ellipse(557, 152, 3, 3);
            ellipse(557, 160, 3, 3);
            ellipse(561, 156, 3, 3);
            ellipse(553, 156, 3, 3);
            
            ellipse(521, 152, 4, 4);
            ellipse(521, 160, 4, 4);
            ellipse(525, 156, 4, 4);
            ellipse(517, 156, 4, 4);
            
            strokeWeight(2);
            bezier(539, 144, 535, 131, 559, 130, 550, 113);
        },
        function(){
            noFill();
            strokeWeight(3);
            stroke(0);
            ellipse(60, 238, 65, 65);
            
            strokeWeight(2);
            pushMatrix();
            translate(60, 238);
            
            for(var i = 0; i < 12; i++)
            {
                rotate(i * 30);
                line(25, 0, 28, 0);
            }
            for(var i = 0; i > -12; i--)
            {
                rotate(i * 30);
                line(25, 0, 28, 0);
            }
            popMatrix();
            
            pushMatrix();
            translate(60, 238);
            line(0, 0, 0, -18);
            line(0, 0, 12, 0);
            popMatrix();
        },
        function(){
            pushMatrix();
            translate(123, 180);
            scale(0.29);
            noFill();
            strokeWeight(6);
            stroke(0);
            beginShape();
            vertex(111, 188);
            bezierVertex(73, 221, 98, 305, 198, 303);
            bezierVertex(301, 305, 326, 221, 286, 188);
            bezierVertex(287, 169, 281, 155, 277, 145);
            bezierVertex(308, 126, 273, 64, 242, 105);
            bezierVertex(222, 89, 180, 87, 157, 105);
            bezierVertex(139, 75, 87, 103, 122, 145);
            bezierVertex(117, 152, 111, 178, 111, 188);
            endShape();
            beginShape();
            vertex(126, 136);
            bezierVertex(128, 134, 136, 118, 145, 115);
            bezierVertex(134, 92, 109, 118, 126, 136);
            endShape();
            beginShape();
            vertex(268, 136);
            bezierVertex(271, 134, 252, 118, 249, 113);
            bezierVertex(273, 85, 285, 135, 268, 136);
            endShape();
            ellipse(168, 168, 45, 45);
            ellipse(223, 168, 45, 45);
            ellipse(174, 173, 15, 15);
            ellipse(219, 173, 15, 15);
            
            pushMatrix();
            translate(152, 230);
            rotate(-18);
            ellipse(0, 0, 22, 35);
            popMatrix();
            pushMatrix();
            translate(245, 230);
            rotate(18);
            ellipse(0, 0, 22, 35);
            popMatrix();
            popMatrix();
        },
        function(){
            pushMatrix();
            translate(247, 186);
            scale(0.17);
            noFill();
            stroke(0);
            strokeWeight(7);
            beginShape();
            vertex(116, 393);
            vertex(124, 393);
            vertex(135, 387);
            vertex(151, 377);
            vertex(162, 371);
            vertex(176, 361);
            vertex(186, 353);
            vertex(195, 342);
            vertex(200, 338);
            vertex(211, 342);
            vertex(220, 349);
            vertex(228, 354);
            vertex(238, 358);
            vertex(244, 366);
            vertex(258, 370);
            vertex(268, 374);
            vertex(279, 378);
            vertex(292, 386);
            vertex(302, 389);
            vertex(307, 391);
            vertex(308, 403);
            vertex(310, 411);
            vertex(312, 418);
            vertex(318, 425);
            vertex(326, 423);
            vertex(334, 422);
            vertex(343, 419);
            vertex(350, 417);
            vertex(356, 416);
            vertex(362, 413);
            vertex(366, 408);
            vertex(371, 403);
            vertex(375, 401);
            vertex(376, 399);
            vertex(378, 396);
            vertex(384, 396);
            vertex(394, 396);
            vertex(400, 393);
            vertex(410, 388);
            vertex(420, 385);
            vertex(428, 382);
            vertex(436, 379);
            vertex(446, 374);
            vertex(456, 368);
            vertex(467, 360);
            vertex(476, 356);
            vertex(484, 347);
            vertex(490, 341);
            vertex(494, 337);
            vertex(496, 332);
            vertex(498, 327);
            vertex(498, 322);
            vertex(496, 312);
            vertex(492, 307);
            vertex(486, 302);
            vertex(480, 298);
            vertex(473, 295);
            vertex(469, 292);
            vertex(464, 288);
            vertex(458, 284);
            vertex(457, 282);
            vertex(445, 273);
            vertex(436, 267);
            vertex(428, 263);
            vertex(420, 258);
            vertex(416, 256);
            vertex(408, 252);
            vertex(402, 250);
            vertex(397, 247);
            vertex(392, 243);
            vertex(380, 230);
            vertex(374, 223);
            vertex(368, 217);
            vertex(360, 213);
            vertex(352, 208);
            vertex(348, 204);
            vertex(340, 200);
            vertex(332, 196);
            vertex(325, 193);
            vertex(316, 189);
            vertex(312, 188);
            vertex(308, 186);
            vertex(304, 186);
            vertex(304, 193);
            vertex(304, 198);
            vertex(301, 202);
            vertex(298, 206);
            vertex(294, 213);
            vertex(292, 221);
            vertex(289, 229);
            vertex(285, 237);
            vertex(280, 250);
            vertex(277, 255);
            vertex(272, 261);
            vertex(270, 262);
            vertex(266, 263);
            vertex(258, 269);
            vertex(248, 270);
            vertex(241, 273);
            vertex(236, 277);
            vertex(225, 282);
            vertex(214, 286);
            vertex(209, 289);
            vertex(204, 290);
            vertex(200, 291);
            vertex(198, 291);
            vertex(198, 291);
            vertex(192, 288);
            vertex(188, 283);
            vertex(184, 279);
            vertex(180, 275);
            vertex(176, 271);
            vertex(172, 267);
            vertex(164, 263);
            vertex(160, 259);
            vertex(156, 257);
            vertex(150, 253);
            vertex(141, 249);
            vertex(133, 244);
            vertex(129, 243);
            vertex(124, 242);
            vertex(120, 241);
            vertex(118, 241);
            vertex(116, 245);
            vertex(116, 247);
            vertex(113, 254);
            vertex(112, 259);
            vertex(112, 269);
            vertex(115, 271);
            vertex(116, 275);
            vertex(119, 282);
            vertex(120, 286);
            vertex(120, 289);
            vertex(122, 305);
            vertex(124, 314);
            vertex(124, 321);
            vertex(126, 330);
            vertex(126, 334);
            vertex(126, 343);
            vertex(124, 349);
            vertex(122, 354);
            vertex(121, 362);
            vertex(121, 369);
            vertex(118, 377);
            vertex(117, 382);
            vertex(116, 386);
            vertex(116, 390);
            vertex(116, 393);
            endShape();
            popMatrix();
        },
        function(){
            pushMatrix();
            translate(387, 203);
            scale(0.3);
            noFill();
            strokeWeight(6);
            stroke(0, 0, 0);
            arc(109, 146, 203, 115, 34, 146);
            beginShape();
            vertex(25, 178);
            vertex(25, 104);
            bezierVertex(14, -5, 193, -25, 195, 104);
            vertex(195, 178);
            endShape();
            (rect)(11, 98, 13, 36, 7, 0, 0, 7);
            (rect)(194, 98, 13, 36, 0, 7, 7, 0);
            beginShape();
            vertex(42, 99);
            vertex(42, 126);
            bezierVertex(40, 180, 181, 180, 177, 126);
            vertex(177, 99);
            bezierVertex(181, 35, 40, 35, 42, 99);
            endShape();
            bezier(178, 128, 171, 149, 139, 141, 129, 143);
            noStroke();
            fill(0);
            ellipse(129, 143, 15, 15);
            popMatrix();
        },
        function(){
            noFill();
            strokeWeight(3);
            stroke(0);
            rect(518, 207, 45, 60);
            fill(0);
            textSize(6);
            text("Become Good\nat\nThe Current", 541, 223);
            text("Written by:\nCavan P", 541, 258);
        },
        function(){
            noFill();
            strokeWeight(5);
            stroke(0);
            pushMatrix();
            translate(60, 326);
            scale(0.2);
            beginShape();
            curveVertex(-90, -46);
            curveVertex(-45, -41); 
            curveVertex(-24, -51); 
            curveVertex(10, -106); 
            curveVertex(35, -37); 
            curveVertex(81, -29); 
            curveVertex(108, -14); 
            curveVertex(70, 15); 
            curveVertex(50, 34); 
            curveVertex(51, 58); 
            curveVertex(59, 84); 
            curveVertex(49, 108); 
            curveVertex(-5, 65); 
            curveVertex(-34, 76); 
            curveVertex(-78, 92); 
            curveVertex(-65, 35); 
            curveVertex(-79, -6); 
            curveVertex(-96, -19); 
            curveVertex(-108, -36); 
            curveVertex(-90, -46); 
            curveVertex(-45, -41); 
            curveVertex(-24, -51);
            endShape();
            popMatrix();
        },
        function(){
            stroke(0);
            noFill();
            strokeWeight(2);
            
            rect(143, 314, 7, 25);
            rect(150, 310, 7, 33);
            rect(157, 306, 7, 41);
            rect(213, 314, 7, 25);
            rect(205, 310, 7, 33);
            rect(197, 306, 7, 41);
            rect(164, 323, 33, 6);
        },
        function(){
            noFill();
            strokeWeight(3);
            stroke(0);
            rect(283, 300, 35, 48, 3);
            strokeWeight(2);
            rect(283, 300, 35, 20, 3);
            rect(291, 302, 19, 12, 3);
        },
        function(){
            noFill();
            stroke(0);
            strokeWeight(2);
            
            rect(393, 351, 56, 5);
            rect(398, 345, 46, 5);
            rect(402, 310, 38, 35);
            rect(406, 310, 30, 35);
            rect(412, 323, 18, 21);
            
            triangle(421, 285, 393, 310, 451, 310);
            
            fill(0);
            textSize(8);
            text('BANK', 421, 301);
        },
        function(){
            strokeWeight(3);
            stroke(0);
            noFill();
            beginShape();
            vertex(515, 370);
            vertex(540, 329);
            vertex(561, 370);
            endShape();
            strokeWeight(1);
            line(540, 329, 540, 332);
            line(540, 334, 540, 338);
            line(540, 342, 540, 349);
            line(540, 353, 540, 363);
            line(540, 367, 540, 378);
        }
    ]
};

// bubble animation stuff
var bubbleX = [],
    bubbleY = [],
    bubbleSize = [];

// for key controls
var keys = [];

// collissions
var rectCircCol = function(rx, ry, rw, rh, cx, cy, cs){
    
    var testX = cx;
    var testY = cy;
    
    if(cx<rx){
        testX = rx;
    }
    if(cx>rx+rw){
        testX = rx+rw;
    }
    if(cy<ry){
        testY = ry;
    }
    if(cy>ry+rh){
        testY = ry+rh;
    }
    
    var distX = cx-testX;
    var distY = cy-testY;
    var distance = sqrt(sq(distX)+sq(distY));
    
    return distance<=cs/2;
    
};
var polygonCollide = function(shape1, shape2) {

    var isBetween = function(c, a, b) {
        return (a - c) * (b - c) <= 0;
    };
    
    /* Do ranges a and b overlap? */
    var overlap = function(a, b) {
        return isBetween(b.min, a.min, a.max) || isBetween(a.min, b.min, b.max);
    };
    
    /*
     * Project shape onto axis.  Simply
     * compute dot products between the
     * shape's vertices and the axis, and
     * keep track of the min and max values.
     */
    var project = function(shape, axis) {
        var mn = Infinity;
        var mx = -Infinity;
        for (var i = 0; i < shape.length; i++) {
            var dot = shape[i].x*axis.x + shape[i].y*axis.y;
            mx = max(mx, dot);
            mn = min(mn, dot);
        }
        return { min: mn, max: mx };
    };
    
    /* Compute all projections axes of shape. */
    var getAxes = function(shape) {
        var axes = [];
        for (var i = 0; i < shape.length; i++) {
            var n = (i + 1) % shape.length; 
            /*
             * The edge is simply the delta between i and n.
             * The axis is the edge's normal. And a normal 
             * of (x, y) is either of (y, -x) or (-y, x).
             */
            axes[i] = {
                y: shape[i].x - shape[n].x,
                x: -(shape[i].y - shape[n].y)
            };
        }
        return axes;
    };

    var shapes = [ shape1, shape2 ];
    for (var s = 0; s < shapes.length; s++) {
        var axes = getAxes(shapes[s]);
        for (var i = 0; i < axes.length; i++) {
            var axis = axes[i];
            /* Project both shapes onto this axis */
            var p1  = project(shape1, axis);
            var p2  = project(shape2, axis);
            if (! overlap(p1, p2)) {
                /* The two shapes cannot overlap */
                return false;
            }
        }
    }
    return true;  /* they overlap */
};
var rectCollide = function(one, two){
    return one.x + one.w > two.x &&
        one.y + one.h > two.y &&
        one.x < two.x + two.w &&
        one.y < two.y + two.h;
};

/** Key stuff **/
keyPressed = function(){
    keys[keyCode] = true;
};
keyReleased = function(){
    keys[keyCode] = false;
};

// create clicked state for buttons
var click = false, mousePressed = function() {click = true;};

var backSand = [0,-528,-528 * 2];

/** GAME IMAGES **/
var back = function(){
    
    pushMatrix();
    scale(1.5);
    var waterX = -40 + sin(frameCount * 5) * 10;
    var waterY = sin(frameCount * 7) * 7;

    background(134, 241, 247);
    
    fill(255, 255, 255, 50);
    noStroke();
    
    for(var i = 0;i < 3 * 150; i += 150)
    {
        beginShape();
        vertex(waterX + 50 + i,waterY - 10);
        vertex(waterX + 40 + i,waterY + 200);
        vertex(waterX + 70 + i,waterY + 190);
        vertex(waterX + 102 + i,waterY - 10);
        endShape();
    }
    
    for(var i = 0;i < 3 * 150; i += 150)
    {
        beginShape();
        vertex(waterX + 50 + i + 60,waterY - 10);
        vertex(waterX + 40 + i + 60,waterY + 260);
        vertex(waterX + 70 + i + 60,waterY + 250);
        vertex(waterX + 102 + i + 86,waterY - 10);
        endShape();
    }
    
    noStroke();
    for(var i =0;i<bubbleX.length;++i)
    {
        bubbleX[i]+=bubbleSize[i]/5;
        fill(0, 208, 255,60);
        ellipse(bubbleX[i],bubbleY[i],bubbleSize[i],bubbleSize[i]);
        if(bubbleX[i]>400)
        {
            bubbleX[i]=-20;
            bubbleY[i] = random(0,400);
        }
    }
    
    if(bubbleX.length <= 20)
    {
        bubbleSize.push(random(3,15));
        bubbleX.push(-20);
        bubbleY.push(random(0,400));
    }
    
    popMatrix();
    
    for(var i = 0; i < 3; i++)
    {
        image(images.sand, backSand[i], 0);
        
        backSand[i] ++;
        
        if(backSand[i] > 590)
        {
            backSand[i] = -528 * 2;
        }
    }
};

/** EATABLE FISH**/
var blueFish = function(x, y, s) {
    
    pushMatrix();
    translate(x, y);
    scale(s / 100);
    
    strokeWeight(1);
    stroke(9, 43, 168);
    fill(0, 196, 255);
    
    //Rear fin
    pushMatrix();
    translate(34, 30);
    rotate(sin(frameCount * 3) * 7);
    triangle(-19, -10, -19, 10, 0, 0);
    popMatrix();
    
    fill(0, 153, 255);
    //Main body
    beginShape();
    vertex(34, 12);
    vertex(34, 35);
    vertex(34, 45);
    vertex(70, 45);
    bezierVertex(73, 3, 72, 13, 34, 12);
    endShape();
    
    //Eye
    fill(0, 0, 0);
    ellipse(59, 24, 8, 12);
    
    //Mouth
    bezier(70, 38, 74, 39, 57, 38, 55, 36);
    
    fill(0, 196, 255);
    
    //Bubble sparkle things in the top of it
    ellipse(39, 17, 4, 4);
    ellipse(44, 20, 2, 2);
    ellipse(38, 24, 2, 2);
    
    //flipper fin thing on the side
    pushMatrix();
    translate(48, 30);
    rotate(20 + sin(frameCount * 10) * 7);
    beginShape();
    vertex(-2, 0);
    vertex(-10, 8);
    bezierVertex(-9, 11, -5, 14, -1, 11);
    vertex(2, 0);
    endShape();
    popMatrix();
    
    popMatrix();
    
};
var greenFish = function(x, y, s) {

    pushMatrix();
    translate(x, y);
    scale(s / 100);
    
    //Main body
    stroke(6, 117, 10);
    fill(32, 245, 39);
    strokeWeight(2);
    triangle(80, 100, 34, 77, 34, 123);
    
    //Rear fin
    fill(112, 255, 114);
    pushMatrix();
    translate(34, 100);
    rotate(-sin(frameCount * 12) * 7);
    triangle(-20, 7, -20, -7, -1, 0);
    popMatrix();
    
    //Eye
    fill(0);
    triangle(53, 90, 53, 97, 68, 97);
    noFill();
    
    //Mouth
    bezier(73, 103, 64, 105, 59, 108, 54, 103);
    
    fill(112, 255, 114);
    //Rear top triangle thingo (made it a triangle so it can be colored)
    triangle(34, 77, 34, 95, 47, 84);
    
    //Rear bottom triangle thingo
    triangle(34, 123, 34, 106, 47, 116);
    popMatrix();
};
var purpleFish = function(x, y, s) {
    pushMatrix();
    translate(x, y);
    scale(s / 100);
    
    stroke(75, 0, 107);
    strokeWeight(2);
    
    //Rear fin
    fill(225, 128, 245);
    pushMatrix();
    translate(27, 179);
    rotate(sin(frameCount * 7) * 24);
    bezier(0, -5, -25, -21, -25, 21, 0, 5);
    popMatrix();
    
    //Body
    fill(202, 78, 224);
    ellipse(56, 179, 60, 60);
    
    //Eye
    fill(0, 0, 0);
    ellipse(68, 166, 15, 15);
    noFill();
    
    //Mouth
    bezier(64, 180, 64, 186, 77, 189, 85, 185);
    
    //Side fin flipper thingo
    fill(225, 128, 245);
    pushMatrix();
    translate(51, 188);
    rotate(26 + sin(frameCount * 12) * 9);
    bezier(-4, -4, -16, 13, 4, 12, 4, 2);
    popMatrix();
    
    fill(202, 78, 224);
    
    //Highlights
    bezier(34, 176, 38, 162, 38, 158, 49, 156);
    bezier(39, 176, 42, 169, 41, 166, 45, 165);
    bezier(43, 175, 46, 175, 46, 166, 48, 169);
    popMatrix();

};
var yellowFish = function (x, y, s) {

    pushMatrix();
    translate(x, y);
    scale(s / 100);
    
    //Main body
    stroke(122, 89, 7);
    fill(242, 193, 67);
    strokeWeight(2);
    rect(30, 235, 53, 16);
    
    fill(250, 208, 82);
    //Rear fin
    pushMatrix();
    translate(30, 243);
    rotate(sin(frameCount * 11) * 16);
    triangle(0, 0, -15, -5, -15, 5);
    popMatrix();
    
    //Eye
    fill(0, 0, 0);
    pushMatrix();
    translate(74, 240);
    rotate(-7);
    ellipse(0, 0, 10, 4);
    popMatrix();
    noFill();
    
    //Mouth
    bezier(70, 245, 79, 251, 84, 246, 83, 247);
    
    //Side fin thing
    fill(250, 208, 82);
    pushMatrix();
    translate(57, 243);
    rotate(sin(frameCount * 7) * 27);
    beginShape();
    vertex(0, -2);
    vertex(-23, -4);
    vertex(-23, 4);
    vertex(0, 2);
    endShape();
    popMatrix();
    
    popMatrix();

};
var shark = function (x, y, s) {
    
    pushMatrix();
    translate(x, y);
    scale(s / 100);
    strokeWeight(2);
    
    stroke(61, 61, 61);
    fill(140, 140, 140);
    
    //this exists as an option...
    var rearFinSpacing = 14 + sin(frameCount * 6) * 3;
    var mouthSpacing = 6 + sin(frameCount * 12) * 4;
    
    //Whole thing, really
    beginShape();
    vertex(21, 340 - rearFinSpacing);
    vertex(46, 340);
    vertex(21, 340 + rearFinSpacing);
    bezierVertex(32, 369, 37, 364, 61, 350);
    bezierVertex(67, 357, 76, 359, 84, 363);
    vertex(122, 363);
    bezierVertex(124, 361, 127, 349, 126, 340 + mouthSpacing);
    vertex(111, 340);
    vertex(126, 340 - mouthSpacing);
    bezierVertex(120, 319, 115, 314, 109, 311);
    vertex(75, 311);
    vertex(61, 330);
    bezierVertex(37, 323, 34, 309, 21, 340 - rearFinSpacing);
    endShape();
    
    //Top fin
    fill(173, 173, 173);
    beginShape();
    vertex(109, 311);
    bezierVertex(81, 289, 75, 303, 66, 310);
    bezierVertex(74, 303, 75, 309, 75, 311);
    endShape();
    
    //Side fin flipper thing
    pushMatrix();
    translate(85, 344);
    rotate(10 + sin(frameCount * 14) * 8);
    beginShape();
    vertex(-4, -6);
    vertex(-10, 6);
    bezierVertex(-4, 6, 4, 7, 4, 0);
    endShape();
    popMatrix();
    
    //Eye
    fill(0, 0, 0);
    pushMatrix();
    translate(104, 313);
    rotate(40);
    rect(0, 0, 15, 3);
    popMatrix();
    bezier(106, 319, 92, 331, 110, 333, 112, 325);
    
    fill(173, 173, 173);
    //Triangular highlights
    strokeWeight(s / 106);
    triangle(79, 315, 77, 319, 83, 319);
    triangle(70, 327, 77, 329, 74, 323);
    triangle(117, 357, 116, 351, 108, 354);
    triangle(109, 360, 102, 360, 102, 356);
    triangle(105, 353, 113, 347, 105, 348);
    noFill();
    
    //Lantern
    stroke(0, 0, 0, 100);
    bezier(109, 311, 145, 310, 150, 320, 147, 335 + sin(frameCount * 2) * 5);
    
    noStroke();
    fill(76, 186, 255, 30);
    ellipse(147, 339 + sin(frameCount * 2) * 5, 24 + sin(frameCount * 5) * 5, 24 + sin(frameCount * 5) * 5);
    
    stroke(20, 135, 207, 100);
    fill(76, 186, 255);
    ellipse(147, 339 + sin(frameCount * 2) * 5, 8, 8);
    popMatrix();
};

/** FISH FROM STORE**/
var emeraldGemLogo = function(x, y, s) {
    
    //stroke
    stroke(255, 255, 255, 35);
    
    var transp =  150 + sin(frameCount * 6) * 70;
    
    //base
    fill(111, 252, 98, transp);
    beginShape();
    vertex(x - s, y - s / 2);
    vertex(x - s / 2, y - s);
    vertex(x + s / 2, y - s);
    vertex(x + s, y - s / 2);
    vertex(x + s, y + s);
    vertex(x + s / 2, y + s * 1.5);
    vertex(x - s / 2, y + s * 1.5);
    vertex(x - s, y + s);
    vertex(x - s, y - s / 2);
    endShape();
    
    //1
    fill(113, 245, 98, transp);
    noStroke();
    beginShape();
    vertex(x - s, y - s / 2);
    vertex(x - s / 2, y - s);
    vertex(x - s / 3, y - s / 2);
    vertex(x - s / 2, y - s / 3);
    endShape();
    
    //2
    fill(82, 235, 65, transp);
    beginShape();
    vertex(x - s / 2, y - s);
    vertex(x - s / 3, y - s / 2);
    vertex(x + s / 3, y - s / 2);
    vertex(x + s / 2, y - s);
    endShape();
    
    //3
    beginShape();
    fill(72, 227, 54, transp);
    vertex(x + s / 2, y - s);
    vertex(x + s, y - s / 2);
    vertex(x + s / 2, y - s / 3);
    vertex(x + s / 3, y - s / 2);
    endShape();
    
    //4
    fill(67, 217, 48, transp);
    beginShape();
    vertex(x + s, y - s / 2);
    vertex(x + s, y + s);
    vertex(x + s / 2, y + s / 1.2);
    vertex(x + s / 2, y - s / 3);
    endShape();
    
    //5
    fill(57, 207, 37, transp);
    beginShape();
    vertex(x + s, y + s);
    vertex(x + s / 2, y + s * 1.5);
    vertex(x + s / 3, y + s);
    vertex(x + s / 2, y + s / 1.2);
    endShape();
    
    //6
    fill(57, 196, 35, transp);
    beginShape();
    vertex(x + s / 3, y + s);
    vertex(x + s / 2, y + s * 1.5);
    vertex(x - s / 2, y + s * 1.5);
    vertex(x - s / 3, y + s);
    endShape();
    
    //7
    fill(79, 214, 55, transp);
    beginShape();
    vertex(x - s, y + s);
    vertex(x - s / 2, y + s * 1.5);
    vertex(x - s / 3, y + s);
    vertex(x - s / 2, y + s / 1.2);
    endShape();
    
    //8
    fill(96, 240, 67, transp);
    beginShape();
    vertex(x - s, y + s);
    vertex(x - s / 2, y + s / 1.2);
    vertex(x - s / 2, y - s / 3);
    vertex(x - s, y - s / 2);
    endShape();
    
    //shade
    fill(0, 0, 0, 4);
    beginShape();
    vertex(x + s / 2.3, y - s / 2.3);
    vertex(x + s / 2, y - s / 3);
    vertex(x + s / 2, y + s / 1.2);
    vertex(x + s / 3, y + s);
    vertex(x - s / 3, y + s);
    vertex(x - s / 2.3, y + s / 1.1);
    endShape();
    
    //shade 2
    fill(0, 0, 0, 5);
    beginShape();
    vertex(x + s / 6, y + s);
    vertex(x + s / 3, y + s);
    vertex(x + s / 2, y + s / 1.2);
    vertex(x + s / 2, y + s / 1.5);
    endShape();

};
var star = function(x, y, s, r) {
    pushMatrix();
    translate(x, y);
    scale(s);
    rotate(r);
    beginShape();
    vertex(307, 318);
    vertex(310, 314);
    vertex(313, 318);
    vertex(312, 313);
    vertex(316, 313);
    vertex(312, 311);
    vertex(311, 307);
    vertex(310, 311);
    vertex(304, 312);
    vertex(309, 313);
    endShape(CLOSE);
    popMatrix();
};
var FishTail = function(x,y,sx,sy,r){
    pushMatrix();
    pushStyle();
    translate(x,y);
    scale(sx,sy);
    rotate(r);
    beginShape();
    curveVertex(-28,-36); curveVertex(94,-34); curveVertex(163,27); curveVertex(85,11); curveVertex(16,34); curveVertex(77,81); curveVertex(152,87); curveVertex(66,136); curveVertex(-37,110); curveVertex(-100,30); curveVertex(-28,-36); curveVertex(94,-34); curveVertex(163,27); /**/
    endShape();
    popStyle();
    popMatrix();
};
var lightSpot=function(x,y,s){
   for(var g=10;g>0;g-=2){
       fill(255,255, 255, 20);
       ellipse(x,y,s+g,(s+g)/2);
   }
};
var player = function (x, y, s, r, fish) {
    
    switch(fish)
    {
        
    case "og":
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        strokeWeight(2);
        
        fill(255, 46, 46);
        stroke(138, 0, 0);
        //Body
        (rect)(300, 300, 50, 40, 17, 2, 9, 2);
        
        //Rear fin
        fill(242, 94, 94);
        pushMatrix();
        translate(351, 319);
        rotate(sin(frameCount * 5) * 5);
        triangle(0, 0, 15, -15, 15, 15);
        popMatrix();
        
        //Side flipper fin ting
        pushMatrix();
        translate(335, 325);
        rotate(sin(frameCount * 10) * 12);
        beginShape();
        vertex(-3, 2);
        vertex(7, 8);
        bezierVertex(17, 1, -1, 3, 2, 0);
        endShape();
        popMatrix();
        
        //Eye
        if(deadState)
        {
            line(318, 318, 308, 308);
            line(308, 318, 318, 308);
        }
        else
        {
            fill(0, 0, 0);
            ellipse(313, 315, 12, 15);
        }
        
        noFill();
        
        //Mouth
        if(deadState)
        {
            line(301, 326, 318, 330);
        } else
        {
            bezier(313, 323 + 5, 314, 321 + 5, 308, 330 + 5, 301, 328 + 5);
        }
        
        popMatrix();
        break;
        
    case "ultron":
        
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        
        strokeWeight(1);
        stroke(30, 250, 250);
        fill(81, 143, 224);
        triangle(303, 311, 315, 302, 301, 294);
        triangle(303, 311, 315, 302, 304, 299);
        triangle(303, 311, 315, 302, 307, 303);
        
        strokeWeight(2);
        for(var j = 0; j < 10; j++)
        {
            var i = sin(frameCount * 2 + (j * 35)) * 10;
            stroke(25, 209 - sin(frameCount * (j * 3)) * 40, 255, 150 - (i * 4));
            arc(354 + (i * 1.1), 320 + sin(frameCount * 100) * 0.3, 25 + i, 16 - (i * 1.72), -79, 79);
        }
        
        strokeWeight(2); // <- free to touch these
        fill(214, 112, 255);  // <- free to touch these
        stroke(232, 217, 84, 150 + sin(frameCount * 10) * 20);  // <- free to touch these
        (rect)(300, 300, 50, 40, /** YOU CAN TOUCH THESE-> **/ 11, 32, 39, 3);
        
        noStroke();
        strokeWeight(1);
        noFill();
        stroke(87, 0, 87, 150);
        arc(319, 320.5, 6, 37, -93, 93);
        arc(324, 320.5, 6, 36, -93, 93);
        arc(329, 320.5, 6, 34, -93, 93);
        arc(336, 320.5, 6, 32, -93, 93);
        line(322, 322, 349, 322);
        line(339, 322, 344, 336);
        line(339, 322, 344, 306);
        line(305, 309, 314, 303);
        ellipse(313, 315, 12, 15);
        triangle(302, 315, 304, 327, 302, 327);
        
        noStroke();
        fill(255, 255, 112, 200);
        pushMatrix();
        translate(332, 327);
        rotate(-22 + sin(frameCount * 10) * 12);
        translate(-330, -327);
        
        beginShape();
        vertex(330, 327);
        vertex(360, 338);
        vertex(360, 344);
        vertex(360, 352);
        vertex(350, 352);
        vertex(341, 352);
        vertex(330, 327);
        endShape();
        
        stroke(113, 225, 240);
        line(360, 338, 330, 327);
        stroke(76, 207, 212);
        line(360, 344, 330, 327);
        stroke(113, 225, 240);
        line(360, 352, 330, 327);
        stroke(76, 207, 212);
        line(350, 352, 330, 327);
        stroke(113, 225, 240);
        line(341, 352, 330, 327);
        popMatrix();
        
        //Rear fin
        fill(242, 94, 94);
        pushMatrix();
        
        noFill();
        
        stroke(255, 230, 0, 150 + sin(frameCount * 10) * 20); 
        strokeWeight(1);
        beginShape();
        
        vertex(368, 300);
        endShape();
        popMatrix();
        
        noStroke();
        //Eye
        if(deadState) // DEAD EYE (RECOMEND NOT TOUCHING DEAD FACE)
        {
            line(318, 318, 308, 308);
            line(308, 318, 318, 308);
        }
        else // NOT DEAD EYE
        {
            fill(232, 217, 79, 150 + sin(frameCount * 5) * 20);
            ellipse(311, 315, 12 - 6, 15 - 6);
            ellipse(311, 315, 12 - 4, 15 -4);
            ellipse(312, 315, 12 - 3, 15 - 3);
            ellipse(313, 315, 12-2, 15 -2);
            ellipse(313, 315, 12, 15);
            fill(36, 255, 240, 170);
            ellipse(309, 315, 12 - 10, 15 - 10);
            ellipse(310, 315, 12 - 8, 15 - 8);
        }
        
        noFill();
        
        //Mouth
        if(deadState) // DEAD MOUTH (RECOMEND NOT TOUCHING DEAD FACE)
        {
            line(301, 326, 318, 330);
        } else // NOT DEAD SMILE
        {
            noFill();
            strokeWeight(1);
            stroke(30, 250, 250);
            arc(303, 331 + 2, 1, 3, -9, 129);
            arc(305, 330 + 2, 2, 5, 10, 110);
            arc(307, 328 + 2, 4, 8, 19, 95);
            arc(310, 330, 3, 7, 5, 101);
            arc(312, 331, 5, 5, -109, 84);
            line(311,328.7, 302, 331);
            
            
            strokeWeight(1);
            for(var i = 0; i < 15; i++)
            {
                
            stroke(227, 232, 67);
                line(300 + 2 + i, 336 - i / 3 + 3, 300 + i, 343 - i/-4);
                
            stroke(184, 142, 37, 200);
                line(301 + 1 + i, 336 - i / 3 + 3, 301 + i, 343 - i/-4);
            }
            noFill();
        }
        
        popMatrix();
        break;
        
    case "sponge":
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        
        // clrs
        var yellowFill = color(253, 234, 99);
        var yellowStroke = color(158, 145, 63);
        var brownFill = color(163, 84, 15);
        var brownStroke = color(87, 41, 0);
        
        strokeWeight(2); // <- free to touch these
        fill(yellowFill);  // <- free to touch these
        stroke(yellowStroke);  // <- free to touch these
        (rect)(300, 300, 50, 40, /** YOU CAN TOUCH THESE-> **/ 10, 2, 2, 10);
        
        // spots
        pushStyle();
        strokeWeight(6);
        point(318, 303);
        point(322, 333);
        strokeWeight(3);
        point(326, 308);
        point(313, 336);
        point(305, 308);
        popStyle();
        
        // Legs
        for (var i = 0; i < 2; i++) {
            pushStyle();
            pushMatrix();
            translate(350, 315 + i*13);
            scale(1, i === 1 ? -1 : 1);
            rotate(sin(frameCount * 6) * 7);
            // legs
            strokeWeight(1);
            beginShape();
            vertex(0, -3);
            bezierVertex(4, -5, 5, 1, 23, -3);
            vertex(23, -2);
            bezierVertex(21, 4, 11, 0, 0, 1);
            endShape();
            // pants
            strokeWeight(2);
            fill(brownFill);
            stroke(brownStroke);
            bezier(0, -6, 9, -6, 4, 7, 0, 2);
            // socks
            strokeWeight(1);
            fill(255);
            stroke(200);
            quad(12, 2, 12, -2, 19, -2, 23, 1);
            // lines on socks
            strokeWeight(0.6);
            strokeCap(SQUARE);
            stroke(201, 0, 0);
            line(13, -2, 13, 2); // red first
            line(15, -2, 15, 2); // red third
            stroke(64, 89, 255);
            line(14, -2, 14, 2); // blue
            // shoes
            strokeWeight(1);
            strokeCap(ROUND);
            translate(27, 0);
            rotate(-16);
            if (i === 1) { 
                scale (1, -1);
                translate(0, 5);
                rotate(0);
            }
            stroke(0);
            fill(30);
            beginShape();
            vertex(-7, 0);
            vertex(-7, -5);
            vertex(-2, -5);
            vertex(0, 2);
            bezierVertex(-7, 8, -5, -3, -5, 0);
            endShape(CLOSE);
            popMatrix();
            popStyle();
        }
        
        // Square Pants
        pushMatrix();
        pushStyle();
        // brown
        stroke(brownStroke);
        fill(brownFill);
        translate(334, 300);
        rect(0, 0, 16, 40, 0, 2, 2, 0);
        // white
        stroke(199);
        fill(255);
        rect(-1, 0, 7, 40);
        // black lines
        stroke(41, 18, 0);
        for (var i = 3; i < 41; i+=10) {
            line(11, i, 11, i+5);
        }
        popStyle();
        popMatrix();
        
        // tie
        pushMatrix();
        pushStyle();
        translate(333, 340);
        scale(1.3);
        fill(255, 0, 0);
        stroke(163, 0, 0);
        strokeWeight(1);
        // top
        quad(0, 1.5, 0, -1.5, 3, -1, 3, 1);
        // main
        beginShape();
        vertex(3, -1);
        vertex(3, 1);
        vertex(6, 2);
        vertex(9, 0);
        vertex(6, -2);
        endShape(CLOSE);
        popStyle();
        popMatrix();
        
        //Side flipper fin ting
        pushMatrix();
        pushStyle();
        translate(330, 325);
        rotate(sin(frameCount * 10) * 12 - 6);
        // arm
        beginShape();
        vertex(2, -2);
        bezierVertex(32, 1, -1, 12, 1, -2);
        endShape();
        // sleeve
        fill(255);
        stroke(199, 199, 199);
        beginShape();
        vertex(0, -3);
        bezierVertex(12, -13, 0, 16, -3, 2);
        endShape();
        popStyle();
        popMatrix();
        
        // nose
        pushMatrix();
        translate(302, 322);
        rotate(sin(frameCount * 4) * 3);
        beginShape();
        vertex(0, 0);
        curveVertex(0, 2);
        curveVertex(-11, 0);
        curveVertex(-9, -3);
        curveVertex(1, -3);
        curveVertex(-5, -21);
        endShape();
        popMatrix();
        
        //Eye
        if(deadState) // DEAD EYE (RECOMEND NOT TOUCHING DEAD FACE)
        {
            pushMatrix();
            translate(-1, 3);
            line(316, 316, 310, 310);
            line(310, 316, 316, 310);
            popMatrix();
        }
        else // NOT DEAD EYE
        {
            pushMatrix();
            translate(313, 315);
            pushStyle();
            // white
            fill(255, 255, 255);
            ellipse(0, 0, 12, 15);
            // pupil
            translate(cos(frameCount*4), sin(-frameCount*4)*2);
            noStroke();
            // blue
            fill(80, 158, 217);
            ellipse(0, 0, 6, 6);
            // black center
            fill(0);
            ellipse(0, 0, 4, 4);
            // white highlight
            fill(255);
            ellipse(1, -1, 1, 1);
            popStyle();
            popMatrix();
        }
        
        noFill();
        
        //Mouth
        if(deadState) // DEAD MOUTH (RECOMEND NOT TOUCHING DEAD FACE)
        {
            line(301, 328, 313, 330);
        } else // NOT DEAD SMILE
        {
            bezier(313, 323 + 5, 314, 321 + 5, 308, 330 + 5, 301, 328 + 5);
        }
        
        noStroke();
        strokeWeight(1);
        
        popMatrix();
        
        break;
        
        case "must":
        
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
      
        strokeWeight(2); // <- free to touch these
        fill(199, 121, 18);  // <- free to touch these
        stroke(153, 66, 0);  // <- free to touch these
        (rect)(300, 300, 50, 40, /** YOU CAN TOUCH THESE-> **/ 15, 5, 5, 15);
        
        //Eye
        pushMatrix();
        translate(310, 316);
        if(deadState) // DEAD EYE (RECOMEND NOT TOUCHING DEAD FACE)
        {
            line(3, 3, -3, -3);
            line(-3, 3, 3, -3);
        }
        else // NOT DEAD EYE
        {
            fill(0);
            noStroke();
            ellipse(-1, 1, 7, 8);
            fill(50);
            ellipse(0, 0, 2, 2);
        }
        popMatrix();
        
        
        //Rear fin
        stroke(184, 184, 184);
        fill(237, 223, 235);
        pushMatrix();
        translate(353, 321);
        rotate(deadState ? 0 : sin(frameCount * 5) * 5);
        quad(-3, 5, -3, -5, 18, -15, 18, 15);
        popMatrix();
        
        // Chef hat
        pushMatrix();
        pushStyle();
        translate(306, 299);
        scale(1.0, 1.2);
        // base
        rect(0, 0, 11, 4, 0, 0, 5, 5);
        // poof
        arc(1, -3, 8, 6, 85, 295);   // left
        arc(11, -3, 8, 6, -112, 65); // right
        arc(6, -4, 8, 8, -166, -31); // middle
        // filler
        noStroke();
        rect(0, -5, 13, 5, 2, 11, 10, 2);
        popStyle();
        popMatrix();
        
        // Outfit
        pushMatrix();
        pushStyle();
        translate(334, 320);
        // main
        rect(-11, -20, 27, 40, 0, 5, 5, 0);
        // line
        stroke(173, 173, 173);
        strokeWeight(1.5);
        line(-9, 14, 15, 14);
        // buttons
        strokeWeight(2.5);
        stroke(135, 135, 135);
        for (var i = 0; i < 3; i++) {
            point(i * 4 + -4, 18);
        }
        popStyle();
        popMatrix();
        
        //Side flipper fin ting
        pushMatrix();
        translate(335, 323);
        rotate(deadState ? 0 : sin(frameCount * 10) * 12);
        beginShape();
        vertex(-3, 2);
        vertex(7, 8);
        bezierVertex(17, 1, -1, 3, 2, 0);
        endShape();
        popMatrix();
        
        //Mouth
        var offset;
        if(deadState) // DEAD MOUTH (RECOMMEND NOT TOUCHING DEAD FACE)
        {
            stroke(125, 125, 125);
            fill(194, 194, 194);
            offset = 0; // still
        } else // NOT DEAD SMILE
        {
            stroke(46, 21, 0);
            fill(92, 34, 35);
            offset = sin(frameCount*2); // moving
        }
        
        // mustache
        for (var scl = -1; scl <= 1; scl+=2) {
            pushMatrix();
            translate(302, 327);
            scale(scl, 1);
            beginShape();
            vertex(0, 0);
            bezierVertex(8, -6, 5, 4, 12+offset/3, offset+3);
            bezierVertex(9, 8, -1, 7, 0, 0);
            endShape();
            popMatrix();
        }
        popMatrix();
    
        break;
            
        
    case "bubble":
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        
        var color1 = color(139, 213, 240 + sin(frameCount)*20);
        var color2 = color(247, 168, 184 + sin(frameCount)*20);
        var color3 = color(214, 243, 252 + sin(frameCount)*20);
        
        strokeWeight(2); // <- free to touch these
        fill(color2);  // <- free to touch these
        stroke(color2);  // <- free to touch these
        (rect)(300, 300, 50, 40, 20, 0, 0, 0);
        
        //Rear fin
        fill(color3);
        stroke(235, 146, 165+ sin(frameCount)*20);
        pushMatrix();
        translate(353, 319);
        rotate(sin(frameCount * 5) * 5);
        //triangle(0, 0, 15, -15, 15, 15);
        beginShape();
        vertex(0, 0);
        vertex(15, -15);
        vertex(13,-7);
        vertex(15,0);
        vertex(13,7);
        vertex(15,15);
        vertex(0, 0);
        endShape();
        popMatrix();
        
            //Pattern
    
        pushMatrix();
        translate(325, 320);
        beginShape();
        noStroke();
        fill(214, 243, 252); 
        vertex(-25.5,21);
        vertex(-25.5,10);
        bezierVertex(-10,-0,-10,20,0,15);
        bezierVertex(15,-10,29.5,30,26,10);
        vertex(26.5,21);
        endShape();
        ellipse(20.5,6,4,4);
        ellipse(-3,11,4,4);
        ellipse(-9,8,3,3);
        ellipse(1,6.5,3,3);
        ellipse(11,3,3,3);
        ellipse(18,0.5,3,3);
        ellipse(22,-4,2,2);
        ellipse(6,4,2,2);
        ellipse(14,-1,2,2);
        popMatrix();
        
        //Side flipper fin ting
        pushMatrix();
        fill(color2);
        stroke(color1);
        translate(335, 325);
        rotate(sin(frameCount * 10) * 12);
        beginShape();
        vertex(-3, 2);
        vertex(7, 8);
        bezierVertex(17, 1, -1, 3, 2, 0);
        endShape();
        popMatrix();
        
        // Outline
        noFill();
        stroke(235, 146, 165+ sin(frameCount)*20);
        
        (rect)(300, 300, 50, 40, 20, 0, 0, 0);
        stroke(color2); 
        //Eye
        if(deadState) // DEAD EYE (RECOMEND NOT TOUCHING DEAD FACE)
        {
            stroke(color1);
            line(315, 318, 309, 312);
            line(309, 318, 315, 312);
        }
        else // NOT DEAD EYE
        {
            noStroke();
            fill(color1);
            ellipse(313, 315, 9, 12);
            fill(139, 209, 232,100);
            ellipse(313, 315, 11, 14);
        }
        
        popMatrix();
        break;
        
    case "robo":
        
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        
        strokeWeight(4);
        for(var i=0;i<8;i++){
          stroke(173-i*5, 173-i*5, 173-i*5, 150);
          line(328+i*5,286,312+i*5,301);
        }
        for(var i=0;i<8;i++){
          stroke(153-i*5, 153-i*5, 153-i*5, 150);
          line(328+i*5,640-286,312+i*5,640-301);
        }
        noStroke();
        
        strokeWeight(2);
        stroke(82, 82, 82);
        
        fill(153, 153, 153);  // <- free to touch these
        rect(300, 300, 50, 40, /** YOU CAN TOUCH THESE-> **/ 5, 5, 5, 5);
        
        //Rear fin
        fill(153);
        pushMatrix();
        translate(353, 319);
        triangle(-20,0,9.2,-19.1,10,20);
        rect(11,-20,18,40);
        fill(0, 0, 0);
        ellipse(30,0,10,40);
        noStroke();
        fill(224, 72, 33, 200);
        triangle(30,-15,30,15,50+abs(sin(frameCount*2)*20),0);
        arc(31,0,7,30,-270,-90);
        fill(222, 121, 33, 200);
        triangle(30,-12,30,12,46+abs(sin(frameCount*2)*20),0);
        arc(31,0,5,24,-270,-90);
        fill(222, 191, 33, 150);
        triangle(30,-8,30,8,42+abs(sin(frameCount*2)*20),0);
        arc(31,0,3,16,-270,-90);
        noStroke();
        popMatrix();
        
        noStroke();
        fill(153, 153, 153);
        rect(325, 307, 50, 24);
        rect(360.7, 300.3, 8, 38, 40);
        
        fill(97, 97, 97);
        ellipse(350,313,5,5);
        ellipse(350,326,5,5);
        
        
        //light things
        lightSpot(367,306,10);
        lightSpot(336,306,10);
        
        //Side flipper fin ting
        pushMatrix();
        fill(191, 191, 191);
        translate(335, 325);
        rotate(sin(frameCount * 10) * 20);
        arc(0,0,70,70,0,50);
        fill(97, 97, 97);
        ellipse(10,5,5,5);
        ellipse(30,5,5,5);
        ellipse(22,20,5,5);
        popMatrix();
        
        //Eye
        if(deadState) // DEAD EYE (RECOMEND NOT TOUCHING DEAD FACE)
        {
            stroke(82, 82, 82);
            line(318, 318, 308, 308);
            line(308, 318, 318, 308);
        }
        else // NOT DEAD EYE
        {
            fill(0, 247, 255);
            ellipse(313, 315, 12, 15);
            fill(0, 247, 255,50);
            ellipse(313, 315, 15, 18);
            fill(0, 247, 255,50);
            ellipse(313, 315, 18, 21);
        }
    
        noFill();
    
        strokeWeight(2);
        stroke(82, 82, 82);
        arc(305,330,8,6,-180,0);
        arc(313,330,8,6,0,180);
        arc(321,330,8,6,-180,0);
        noStroke();
        popMatrix();
        
        break;
        
    case "skelly":
            
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        
        strokeWeight(2);
        
        //Rear fin
        stroke(140, 138, 138);
        fill(48, 48, 48);
        pushMatrix();
            translate(353, 319);
            rotate(sin(frameCount * 5) * 5);
            triangle(-5, 0, 10, -10, 10, 8);
            noStroke();
            fill(255);
            triangle(-3, 0, 8, -5, 8, 4);
        popMatrix();
        
        fill(48, 48, 48);  // <- free to touch these
        stroke(140, 138, 138);  // <- free to touch these
        (rect)(300, 300, 50, 40, 20, 20, 20, 20);
        
        //skeleton
        pushMatrix();
            translate(129, 129);
            noStroke();
            fill(255);
            beginShape();
                vertex(188, 174);
                bezierVertex(181, 175, 176, 179, 175, 185);
                bezierVertex(173, 194, 175, 201, 179, 206);
                bezierVertex(183, 209, 186, 209, 189, 209);
                bezierVertex(192, 196, 191, 185, 188, 174);
            endShape(CLOSE);
            noFill();
            stroke(255);
            line(191, 190, 224, 190);
            
            bezier(196, 179, 198, 184, 198, 198, 196, 203);
            bezier(203, 180, 205, 184, 205, 197, 203, 201);
            bezier(209, 182, 210, 185, 210, 195, 209, 198);
            bezier(215, 185, 216, 188, 216, 191, 215, 194);
        popMatrix();
        
        //Side flipper fin ting
        noStroke();
        fill(153, 153, 153);
        pushMatrix();
            translate(330, 318);
            rotate(sin(frameCount * 10) * 12);
            beginShape();
                vertex(0, 1);
                vertex(7, 8);
                bezierVertex(17, 1, -1, 3, 0, 0);
            endShape();
        popMatrix();
        
        //Eye
        if(deadState) // DEAD EYE (RECOMEND NOT TOUCHING DEAD FACE)
        {
            line(318, 318, 308, 308);
            line(308, 318, 318, 308);
        }
        else // NOT DEAD EYE
        {
            noStroke();
            fill(220);
            ellipse(312, 315, 12, 12);
            fill(0);
            ellipse(311, 315, 6, 6);
        }
        
        //Mouth
        noFill();
        stroke(48, 48, 48);
        if(deadState) // DEAD MOUTH (RECOMEND NOT TOUCHING DEAD FACE)
        {
            line(301, 326, 318, 330);
        } else // NOT DEAD SMILE
        {
            bezier(313, 323 + 5, 312, 321 + 10, 308, 330 + 3, 306, 328 + 5);
        }
        
        popMatrix();
            
        break;
        
    case "spikes":
            
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
    
        //Rear fin
        strokeWeight(2);
        fill(255, 192, 77);
        stroke(36, 36, 36);
        pushMatrix();
        translate(353, 319);
        rotate(sin(frameCount * 5) * 5);
        triangle(-5, 0, 10, -10, 10, 8);
        popMatrix();
        
        //spikes
        noStroke();
        fill(36, 36, 36);
        pushMatrix();
            translate(133, 129.5);
            beginShape();
                vertex(174, 178);
                vertex(171, 170);
                vertex(179, 175);
                vertex(184, 174);
                vertex(187, 165);
                vertex(190, 173);
                vertex(196, 173);
                vertex(200, 164);
                vertex(202, 173);
                vertex(207, 174);
                vertex(214, 170);
                vertex(211, 177);
                vertex(214, 179);
                vertex(222, 179);
                vertex(216, 184);
                vertex(216, 198);
                vertex(220, 204);
                vertex(212, 203);
                vertex(209, 206);
                vertex(208, 215);
                vertex(202, 206);
                vertex(198, 207);
                vertex(196, 217);
                vertex(193, 208);
                vertex(187, 209);
                vertex(182, 217);
                vertex(182, 208);
                vertex(179, 207);
                vertex(172, 212);
                vertex(176, 204);
                vertex(175, 203);
                vertex(165, 203);
                vertex(172, 199);
                vertex(173, 196);
                vertex(162, 193);
                vertex(171, 191);
                vertex(171, 187);
                vertex(162, 181);
                vertex(172, 182);
            endShape(CLOSE);
        popMatrix();
    
        fill(255, 192, 77);  // <- free to touch these
        stroke(36, 36, 36);  // <- free to touch these
        (rect)(300, 300, 50, 40, /** YOU CAN TOUCH THESE-> **/ 20, 20, 20, 20);
    
        //Side flipper fin thing
        pushMatrix();
        translate(335, 325);
        rotate(sin(frameCount * 10) * 12);
        beginShape();
        vertex(-3, 2);
        vertex(7, 8);
        bezierVertex(17, 1, -1, 3, 2, 0);
        endShape();
        popMatrix();
        
        //Eye
        if(deadState) // DEAD EYE (RECOMEND NOT TOUCHING DEAD FACE)
        {
            line(318, 318, 308, 308);
            line(308, 318, 318, 308);
        }
        else // NOT DEAD EYE
        {
            noStroke();
            fill(250);
            ellipse(313, 315, 12, 14);
            fill(36, 36, 36);
            ellipse(312, 315, 6, 6);
        }
        
        //Mouth
        noFill();
        stroke(36, 36, 36);
        if(deadState) // DEAD MOUTH (RECOMEND NOT TOUCHING DEAD FACE)
        {
            line(301, 326, 318, 330);
        } else // NOT DEAD SMILE
        {
            bezier(313, 323 + 5, 313, 321 + 7, 308, 330 + 5, 304, 328 + 5);
        }
        
        popMatrix();
        
        break;
    
    case "bee":
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        
        strokeWeight(2);
        
        //Rear fin (stinger)
        fill(92, 92, 92);
        pushMatrix();
            translate(348, 319);
            rotate(sin(frameCount * 15) * 7);
            triangle(0, -7, 15, 0, 0, 7);
        popMatrix();
        
        //Top fin (wings)
        stroke(0);
        fill(111, 192, 183);
        pushMatrix();
            translate(321, 304);
            rotate(sin(frameCount * 20) * 10);
            ellipse(0, 0, 15, 25);
        popMatrix();
        pushMatrix();
            translate(330, 304);
            rotate(cos(frameCount * 20) * 10);
            ellipse(0, 0, 15, 25);
        popMatrix();
        
        fill(240, 232, 113);  // <- free to touch these
        stroke(48, 48, 48);  // <- free to touch these
        (rect)(300, 300, 50, 40, 20, 20, 20, 20);

        //black stripes on body
        pushMatrix();
            translate(132, 128);
            
            noStroke();
            fill(33, 33, 33);
            beginShape();
                vertex(187, 173);
                bezierVertex(190, 183, 190, 195, 188, 212);
                vertex(196, 212);
                bezierVertex(199, 194, 198, 181, 195, 173);
            endShape(CLOSE);
            beginShape();
                vertex(200, 173);
                bezierVertex(203, 183, 205, 195, 201, 212);
                vertex(208, 210);
                bezierVertex(212, 192, 209, 181, 207, 174);
            endShape(CLOSE);
        popMatrix();
        
        //Eye
        if(deadState) // DEAD EYE (RECOMEND NOT TOUCHING DEAD FACE)
        {
            line(318, 318, 308, 308);
            line(308, 318, 318, 308);
        }
        else // NOT DEAD EYE
        {
            noStroke();
            fill(30);
            ellipse(308, 319, 5, 5);
        }
    
        //Mouth
        stroke(0);
        noFill();
        if(deadState) // DEAD MOUTH (RECOMEND NOT TOUCHING DEAD FACE)
        {
            line(301, 326, 318, 330);
        } else // NOT DEAD SMILE
        {
            bezier(312, 325 + 5, 316, 321 + 5, 308, 330 + 5, 304, 328 + 5);
        }
        
        popMatrix();
        break;
    
    case "mush":
        
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        
        
        //Rear fin
        stroke(255, 46, 46);
        fill(245, 125, 125);
        pushMatrix();
        translate(352, 319);
        rotate(sin(frameCount * 5) * 5);
        strokeWeight(10);
        FishTail(10,0,0.13);
        noStroke();
        popMatrix();
        
        strokeWeight(2);
        stroke(189, 11, 11);
        fill(235, 80, 80);  // <- free to touch these
        rect(300, 300, 50, 40, /** YOU CAN TOUCH THESE-> **/ 5, 5, 5, 5);
        
        noStroke();
        //mushroom
        fill(255, 255, 255, 175);
        ellipse(341,314,10,10);
        ellipse(327,308,10,10);
        ellipse(331,323,10,10);
        
        
        stroke(225, 16, 16, 100);
        strokeWeight(1.5);
        for(var i=0;i<4;i++){
          line(328+i*10,286,312+i*10,301);
          for(var j=0;j<4;j++){
            line(318+j*3+i*10,300-j*3,314+j*3+i*10,296-j*3);
          }
        }
        for(var i=0;i<4;i++){
          line(328+i*10,640-286,312+i*10,640-301);
          for(var j=0;j<4;j++){
            line(318+j*3+i*10,640-(300-j*3),314+j*3+i*10,640-(296-j*3));
          }
        }
        noStroke();
        
        //Side flipper fin ting
        fill(245, 125, 125);
        pushMatrix();
        translate(335, 325);
        scale(0.60);
        rotate(sin(frameCount * 10) * 20);
        stroke(230, 49, 49);
        strokeWeight(2);
        line(-1,-1,22,27);
        line(-1,-1,35,-1);
        arc(0,0,70,70,0,50);
        noStroke();
        popMatrix();
        
        //Eye
        if(deadState) // DEAD EYE (RECOMEND NOT TOUCHING DEAD FACE)
        {
            stroke(0, 0, 0, 100);
            line(318, 318, 308, 308);
            line(308, 318, 318, 308);
        }
        else // NOT DEAD EYE
        {
            fill(247, 195, 91);
            ellipse(313, 315, 12, 15);
            fill(224, 168, 56);
            ellipse(312, 315, 8, 12);
        }
        
        noFill();
        
        stroke(189, 11, 11);
        strokeWeight(2);
        stroke(189, 11, 11);
        arc(305,330,8,6,-180,0);
        arc(313,330,8,6,0,180);
        arc(321,330,8,6,-180,0);
        noStroke();
        
        popMatrix();
            
        break;
        
    case "wolf":
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        strokeWeight(2);
        
        
        //Rear fin
        
        fill(189, 189, 189);
        stroke(71, 71, 71);
        pushMatrix();
        translate(345, 321);
        rotate(sin(frameCount * 5) * 7);
        translate(4,-15);
        triangle(0, 13, 15, -3, 15, 9);
        popMatrix();
        
        fill(156, 156, 156);
        stroke(64, 64, 64);
        triangle(316, 301, 324, 291, 331, 308);
        
        fill(156, 156, 156);
        stroke(71, 71, 71);
        //Body
        (rect)(300, 300, 50, 40, 4, 2, 16, 18);
        
        fill(189, 189, 189);
        //Side flipper fin ting
        pushMatrix();
        translate(335, 325);
        rotate(sin(frameCount * 10) * 12);
        beginShape();
        vertex(-3, 2);
        vertex(7, 8);
        bezierVertex(17, 1, -1, 3, 2, 0);
        endShape();
        
        popMatrix();
        
        //Eye
        if(deadState)
        {
            line(318, 318, 308, 308);
            line(308, 318, 318, 308);
        }
        else
        {
            stroke(255, 255, 255, 100);
            fill(255, 255, 255);
            ellipse(313, 317, 12, 16);
            fill(179, 179, 179);
            ellipse(311, 317, 8, 10);
        }
        
        strokeWeight(1);
        stroke(0, 0, 0, 100);
        line(315, 329, 326, 324);
        line(315, 331, 326, 330);
        line(315, 333, 326, 335);
        
        ellipse(310, 330, 1, 1);
        ellipse(308, 333, 1, 1);
        ellipse(312, 333, 1, 1);
        
        strokeWeight(2);
        
        fill(224, 224, 224);
        stroke(64, 64, 64);
        triangle(319, 301, 331, 288, 327, 308);
        
        stroke(31, 31, 31);
        fill(0, 0, 0);
        triangle(299, 326, 305, 326, 302, 330);
        
        noFill();
        
        popMatrix();
        break;
        
    case "chester":
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        strokeWeight(2);
        
        fill(161, 85, 194);
        stroke(109, 12, 148);
        //Body
        (rect)(300, 300, 50, 40, 20, 12, 18, 12);
        
        //Rear fin
        fill(182, 109, 219);
        pushMatrix();
        translate(351, 319);
        rotate(sin(frameCount * 5) * 5);
        triangle(0, 0, 15, -15, 15, 15);
        popMatrix();
        
        //Side flipper fin ting
        pushMatrix();
        translate(335, 325);
        rotate(sin(frameCount * 10) * 12);
        beginShape();
        vertex(-3, 2);
        vertex(7, 8);
        bezierVertex(17, 1, -1, 3, 2, 0);
        endShape();
        popMatrix();
        
        //Eye
        if(deadState)
        {
            line(318, 318, 308, 308);
            line(308, 318, 318, 308);
        }
        else
        {
            fill(61, 1, 61);
            stroke(61, 1, 61);
            ellipse(313, 315, 4, 4);
            ellipse(300, 323, 2, 2);
            line(305, 315, 317, 306);
            line(305, 315, 314, 306);
            line(305, 314, 317, 306);
        }
        
        noFill();
        
        //Hair
        pushStyle();
        fill(107, 52, 107);
        ellipse(310, 300, 7, 7);
        ellipse(315, 300, 7, 7);
        ellipse(320, 300, 7, 7);
        ellipse(306, 303, 7, 7);
        ellipse(310, 294, 7, 7);
        ellipse(317, 294, 7, 7);
        ellipse(306, 298, 7, 7);
        ellipse(310, 300, 7, 7);
        ellipse(322, 296, 4, 4);
        ellipse(326, 297, 4, 4);
        ellipse(326, 300, 4, 4);
        ellipse(330, 300, 3, 3);
        popStyle();
        
        //Mouth
        if(deadState)
        {
            line(301, 326, 318, 330);
        } else
        {
            bezier(313, 319 + 5, 314, 321 + 5, 308, 330 + 5, 301, 326 + 5);
        }
        
        popMatrix();
        break;
        
    case "willard":
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        strokeWeight(1);
        
        //Rear fin
        noStroke();
        pushMatrix();
        translate(339, 319);
        rotate(sin(frameCount * 5) * 5);
        fill(97, 160, 224);
        rect(24, -15, 9, 30);
        fill(71, 140, 209);
        rect(21, -10, 7, 20);
        fill(51, 115, 184);
        rect(0, -10, 23, 20);
        fill(36, 100, 168);
        rect(23, -15, 5, 5);
        rect(23, 10, 5, 5);
        fill(21, 84, 148);
        rect(28, -20, 5, 5);
        rect(28, 15, 5, 5);
        fill(35, 101, 166);
        rect(10, -7, 10, 14);
        popMatrix();
        
        fill(230, 197, 147);
        stroke(168, 111, 25);
        //Body
        rect(300, 300, 50, 40);
        
        noStroke();
        fill(153, 93, 2);
        rect(301, 327, 10, 5);
        rect(309, 322, 5, 10);
        fill(168, 111, 25);
        rect(301, 317, 8, 5);
        fill(255, 255, 255);
        rect(309, 312, 10, 5);
        fill(75, 124, 209);
        rect(309, 312, 5, 5);
        fill(128, 78, 3);
        rect(300, 300, 51, 6);
        rect(346, 305, 5, 5);
        
        //Side flipper fin ting
        pushMatrix();
        translate(325, 330);
        rotate(sin(frameCount * 10) * 12);
        fill(73, 141, 214);
        rect(0, -6, 23, 10);
        fill(255, 223, 158);
        rect(13, -6, 10, 10);
        popMatrix();
        
        
        popMatrix();
        break;
        
    case "student":
            pushMatrix();
            translate(x, y);
            scale(s / 100);
            rotate(r);
            translate(-300 - 25, - 300 - 20);
            strokeWeight(2);
            
            fill(163, 224, 83);
            stroke(72, 133, 21);
            //Body
            (rect)(300, 300, 50, 40, 17, 2, 0, 2);
            
            noStroke();
            fill(255);
            triangle(325, 300, 345, 328, 325, 341);
            fill(50);
            triangle(350, 300, 350, 341, 318, 300);
            triangle(350, 300, 350, 341, 315, 341);
            fill(0);
            triangle(350, 300, 337, 322, 318, 300);
            triangle(338, 321, 349, 341, 315, 341);
            
            fill(255, 0, 0);
            triangle(329, 320, 332, 325, 325, 325);
            triangle(329, 320, 332, 314, 325, 314);
            
            stroke(60, 138, 0);
            
            //Rear fin
            fill(165, 235, 73);
            pushMatrix();
            translate(351, 319);
            rotate(sin(frameCount * 5) * 5);
            triangle(0, 0, 15, -15, 15, 15);
            popMatrix();
            
            //Side flipper fin ting
            pushMatrix();
            translate(335, 325);
            rotate(sin(frameCount * 10) * 12);
            //book
            fill(214, 43, 43);
            strokeWeight(1);
            stroke(0);
            rect(-6, 2, 19, 15);
            line(-2, 3, -2, 15);
            line(1, 7, 1, 13);
            line(10, 7, 10, 13);
            
            fill(165, 235, 73);
            stroke(60, 138, 0);
            beginShape();
            vertex(-3, 2);
            vertex(7, 8);
            bezierVertex(17, 1, -1, 3, 2, 0);
            endShape();
            popMatrix();
            
            //Eye
            if(deadState)
            {
                line(318, 318, 308, 308);
                line(308, 318, 318, 308);
            }
            else
            {
                fill(255, 255, 255);
                ellipse(313, 318, 12, 12);
                fill(0);
                noStroke();
                ellipse(310, 318, 4, 4);
            }
            
            stroke(60, 138, 0);
            
            noFill();
            
            //Mouth
            if(deadState)
            {
                line(301, 326, 318, 330);
            } else
            {
                bezier(313, 331, 314, 331, 308, 335, 301, 333);
            }
            
            popMatrix();
        break;
        
    case "star":
            pushMatrix();
            translate(x, y);
            scale(s / 100);
            rotate(r);
            translate(-300 - 25, - 300 - 20);
            strokeWeight(2);
            
            fill(245, 255, 48);
            stroke(153, 138, 0);
            //Body
            (rect)(300, 300, 50, 40, 17, 2, 9, 2);
            fill(227, 204, 0);
            noStroke();
            star(76, 21, 0.9, 3);
            star(73, 73, 0.8, 3);
            star(75, -52, 1, 10);
            star(-20, -175, 1.4, 10);
            
            stroke(153, 138, 0);
            
            //Rear fin
            fill(227, 204, 0);
            pushMatrix();
            translate(351, 319);
            rotate(sin(frameCount * 5) * 5);
            triangle(0, 0, 15, -15, 15, 15);
            popMatrix();
            
            //Side flipper fin ting
            pushMatrix();
            translate(335, 325);
            rotate(sin(frameCount * 10) * 12);
            beginShape();
            vertex(-3, 2);
            vertex(7, 8);
            bezierVertex(17, 1, -1, 3, 2, 0);
            endShape();
            popMatrix();
            
            //Eye
            if(deadState)
            {
                line(318, 318, 308, 308);
                line(308, 318, 318, 308);
            }
            else
            {
                noFill();
                strokeWeight(1);
                star(0, 0, 1, 0);
            }
            
            noFill();
            strokeWeight(2);
            
            //Mouth
            if(deadState)
            {
                line(301, 326, 318, 330);
            } else
            {
                bezier(313, 323 + 5, 314, 321 + 5, 308, 330 + 5, 301, 328 + 5);
            }
            
            popMatrix();
            break;
    case "unicorn":
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        strokeWeight(4);
        
        //Rear fin
        noFill();
        pushMatrix();
        translate(352, 321.5);
        for(var j = 0; j < 7; j ++)
        {
            switch(j)
            {
                case 0:
                    stroke(222, 40, 40);
                    break;
                    
                case 1:
                    stroke(222, 150, 42);
                    break;
                    
                case 2:
                    stroke(222, 213, 42);
                    break;
                    
                case 3:
                    stroke(42, 222, 69);
                    break;
                    
                case 4:
                    stroke(42, 87, 222);
                    break;
                    
                case 5:
                    stroke(156, 42, 222);
                    break;
                    
                case 6:
                    stroke(198, 42, 222);
                    break;
            }
            
            beginShape();
            for(var i = 0; i < 7; i ++)
            {
                vertex(0 + i * 7, -16 + sin(frameCount * i * (j + 1)) * i + j * 5);
            }
            endShape();
        }
        
        popMatrix();
        
        strokeWeight(2);
        stroke(186, 147, 30);
        fill(219, 180, 64);
        triangle(303, 311, 315, 302, 301, 294);
        triangle(303, 311, 315, 302, 304, 299);
        triangle(303, 311, 315, 302, 307, 303);
        
        fill(255, 255, 255);
        stroke(191, 185, 191);
        //Body
        (rect)(300, 300, 50, 40, 22, 1, 6, 3);
        
        //Eye
        if(deadState)
        {
            line(318, 318, 308, 308);
            line(308, 318, 318, 308);
        }
        else
        {
            fill(255, 255, 255);
            ellipse(313, 315, 12, 15);
            noStroke();
            fill(0, 0, 0, 210);
            ellipse(312, 315, 7, 9);
            fill(255, 255, 255, 50);
            ellipse(311, 314, 3, 5);
            ellipse(311, 318, 2, 2);
        }
        
        stroke(191, 185, 191);
        
        
        //Mouth
        if(deadState)
        {
            line(301, 326, 318, 330);
        } else
        {
            bezier(313, 325 + 5, 314, 323 + 5, 308, 334 + 5, 301, 322 + 5);
        }
        
        noStroke();
        fill(222, 40, 40, 100);
        star(126, -21, 0.9, 12);
        fill(222, 150, 42, 100);
        star(36, 123, 0.8, -12);
        fill(222, 213, 42, 100);
        star(46, 129, 0.8, -12);
        fill(42, 222, 69, 100);
        star(117, -8, 0.9, 12);
        fill(198, 42, 222, 100);
        star(100, 219, 0.6, -20);
        fill(156, 42, 222, 100);
        star(89, 195, 0.6, -20);
        fill(42, 87, 222, 100);
        star(194, 83, 0.6, 12);
        
        stroke(217, 217, 217);
        
        //Side flipper fin ting
        fill(255);
        pushMatrix();
        translate(326, 333);
        rotate(sin(frameCount * 10) * 12);
        ellipse(11,0,25,4);
        rotate(11);
        ellipse(12,0,25,4);
        rotate(11);
        ellipse(12,0,25,4);
        rotate(11);
        ellipse(12,0,25,4);
        rotate(11);
        ellipse(12,1,25,4);
        popMatrix();
        
        popMatrix();
        break;    
        
    case "seafairy":
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        strokeWeight(2);
        
        fill(219, 135, 232, 100);
        stroke(166, 0, 191);
        //Body
        (rect)(300, 300, 50 + sin(frameCount * 4) * 2, 40, 22, 6, 6, 38);
        
        //Rear fin
        noFill();
        pushMatrix();
        translate(351 + sin(frameCount * 4) * 2, 319);
        for(var j = 0; j < 8; j ++)
        {
            beginShape();
            for(var i = 0; i < 5; i ++)
            {
                vertex(0 + i * 7, -16 + sin(frameCount * i * (j + 1)) * i + j * 5);
            }
            endShape();
        }
        
        popMatrix();
        
        pushMatrix();
        translate(-4, 5);
        //Eye
        if(deadState)
        {
            line(318, 318, 308, 308);
            line(308, 318, 318, 308);
        }
        else
        {
            fill(242, 142, 242, 150);
            ellipse(313, 315, 12, 15);
            fill(166, 0, 191);
            ellipse(310, 315, 5, 7);
        }
        popMatrix();
        
        noFill();
        
        popMatrix();
        break;
        
    case 'cavan':
            pushMatrix();
            translate(x, y);
            scale(s / 100);
            rotate(r);
            translate(-300 - 25, - 300 - 20);
            strokeWeight(2);
            
            //Rear fin
            noFill();
            pushMatrix();
            translate(351, 321.5);
            for(var j = 0; j < 7; j ++)
            {
                strokeWeight(4);
                stroke(122, 15, 15);
                
                beginShape();
                for(var i = 0; i < 7; i ++)
                {
                    vertex(0 + i * 7, -16 + sin(frameCount * i * (j + 1)) * i + j * 5);
                }
                endShape();
                
                strokeWeight(1);
                stroke(230, 74, 74);
                
                beginShape();
                for(var i = 0; i < 7; i ++)
                {
                    vertex(0 + i * 7, -16 + sin(frameCount * i * (j + 1)) * i + j * 5);
                }
                endShape();
            }
            
            popMatrix();
            
            strokeWeight(2);
            stroke(122, 15, 15);
            fill(230, 74, 74);
            //Body
            (rect)(300, 300, 50, 40, 17, 2, 9, 2);
            
            noStroke();
            fill(0, 0, 0, 100);
            ellipse(325 + 5, 316, 1, 1);
            ellipse(328 + 5, 320, 2, 2);
            ellipse(322 + 5, 320, 2, 2);
            ellipse(337 + 5, 312, 3, 3);
            ellipse(337 + 5, 318, 1, 1);
            ellipse(333 + 5, 325, 3, 3);
            ellipse(325 + 5, 326, 1, 1);
            
            ellipse(325, 330, 1, 1);
            ellipse(344, 332, 1, 1);
            ellipse(326, 310, 2, 2);
            ellipse(335, 307, 1 ,1);
            ellipse(337, 313, 1 ,1);
            
            noFill();
            pushMatrix();
            translate(345, 319);
            for(var j = 0; j < 5; j ++)
            {
                strokeWeight(4);
                stroke(79, 38, 4);
                beginShape();
                for(var i = 0; i < 5; i ++)
                {
                    vertex(-35 + i * 7, -18 + sin(frameCount * i * (j + 1)) * i + j);
                }
                endShape();
                
                strokeWeight(1);
                stroke(115, 55, 7, 100);
                beginShape();
                for(var i = 0; i < 5; i ++)
                {
                    vertex(-35 + i * 7, -18 + sin(frameCount * i * (j + 1)) * i + j);
                }
                endShape();
            }
            
            popMatrix();
        
            
            //Hat
            strokeWeight(1);
            stroke(0);
            fill(222, 222, 191);
            arc(311, 303, 29, 25, 152, 337);
            fill(77, 77, 77);
            pushMatrix();
            translate(298, 309);
            rotate(-27);
            rect(-1, 0, 30, 3, 6);
            popMatrix();
            noFill();
            arc(305, 300, 9, 20, 140, 229);
            arc(307, 301, 18, 20, 283, 359);
            arc(304, 302, 12, 20, 283, 366);
            fill(76, 161, 222);
            ellipse(303, 291, 3, 3);
            
            stroke(138, 0, 0);
            
            //Side flipper fin ting
            //Side flipper fin ting
            fill(227, 111, 111);
            stroke(122, 15, 15);
            pushMatrix();
            translate(324, 331);
            rotate(- 4 + sin(frameCount * 10) * 12);
            ellipse(12,0,25,4);
            rotate(1 + sin(frameCount * 10) * 10);
            ellipse(12,0,25,4);
            rotate(1 + sin(frameCount * 10) * 10);
            ellipse(12,0,25,4);
            rotate(1 + sin(frameCount * 10) * 10);
            ellipse(12,0,25,4);
            rotate(1 + sin(frameCount * 10) * 10);
            ellipse(12,0,25,4);
            rotate(1 + sin(frameCount * 10) * 10);
            ellipse(12,0,25,4);
            rotate(1 + sin(frameCount * 10) * 10);
            ellipse(12,0,25,4);
            popMatrix();
            
            //Eye
            if(deadState)
            {
                line(318, 318, 308, 308);
                line(308, 318, 318, 308);
            }
            else
            {
                fill(255);
                ellipse(313, 315, 10, 13);
                noStroke();
                fill(245, 76, 76, 100);
                ellipse(312, 315, 7, 12);
                ellipse(313, 315, 7, 12);
                ellipse(313, 315, 10, 12);
                fill(207, 64, 64);
                ellipse(311, 315, 5, 9);
                fill(0, 0, 0, 150);
                ellipse(311, 315, 2, 6);
            }
            
            stroke(138, 0, 0);
            noFill();
            
            //Mouth
            if(deadState)
            {
                line(301, 326, 318, 330);
            } else
            {
                strokeWeight(1);
                stroke(0, 0, 0);
                line(301, 329, 308, 331);
                
                stroke(79, 38, 4);
                
                for(var i = 0; i < 15; i++)
                {
                    line(300 + i, 336, 300 + i, 343 - i/-5);
                    line(301 + i, 336, 301 + i, 343 - i/-5);
                }
                strokeWeight(2);
                line(301, 325, 310, 326);
                line(301, 326, 314, 326);
                noFill();
                strokeWeight(2);
                arc(314, 331, 5, 10, 270, 440);
                arc(312, 331, 5, 10, 270, 440);
                arc(308, 331, 10, 10, 307, 440);
                arc(311, 331, 10, 10, 307, 440);
            }
            
            popMatrix();
        break;
        
    case "galaxy":
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        strokeWeight(3);
        
        fill(0, 0, 0);
        stroke(202, 66, 214, 150);
        //Body
        (rect)(300, 300, 50, 40, 20, 6, 6, 4);
        
        strokeWeight(1);
        
        //Rear fin
        noFill();
        pushMatrix();
        translate(351, 319);
        for(var j = 0; j < 8; j ++)
        {
            beginShape();
            for(var i = 0; i < 5; i ++)
            {
                vertex(0 + i * 7, -16 + sin(frameCount * i * (j + 1)) * i + j * 5);
            }
            endShape();
        }
        
        popMatrix();
        
        pushMatrix();
        strokeWeight(3);
        translate(351, 319);
        stroke(224, 103, 235, 150);
        for(var j = 0; j < 5; j ++)
        {
            beginShape();
            for(var i = 0; i < 4; i ++)
            {
                vertex(1 + i * 7, -12 + sin(frameCount * i * (j + 1)) * i + j * 7);
            }
            endShape();
        }
        
        popMatrix();
        
        pushMatrix();
        strokeWeight(3);
        translate(351, 319);
        stroke(224, 103, 235, 150);
        for(var j = 0; j < 5; j ++)
        {
            beginShape();
            for(var i = 0; i < 7; i ++)
            {
                vertex(1 + i * 7, -12 + sin(frameCount * i * (j + 0.5)) * i + j * 7);
            }
            endShape();
        }
        
        popMatrix();
        
        noFill();
        
        //Eye
        noStroke();
        fill(255, 255, 255, 100);
        ellipse(325 + 5, 316, 1, 1);
        ellipse(328 + 5, 320, 2, 2);
        ellipse(322 + 5, 320, 2, 2);
        ellipse(337 + 5, 312, 3, 3);
        ellipse(337 + 5, 318, 1, 1);
        ellipse(333 + 5, 325, 3, 3);
        ellipse(325 + 5, 326, 1, 1);
        
        fill(255, 255, 255, 200);
        ellipse(318, 325, 2, 2);
        ellipse(312, 328, 2, 2);
        ellipse(306, 330, 2, 2);
        ellipse(309, 329, 1, 1);
        ellipse(315, 326, 1, 1);
        ellipse(303, 331, 1, 1);
        fill(255, 255, 255, 100);
        ellipse(325, 330, 1, 1);
        ellipse(344, 332, 1, 1);
        ellipse(326, 310, 2, 2);
        ellipse(335, 307, 1 ,1);
        ellipse(337, 313, 1 ,1);
        
        fill(255, 255, 255, 150);
        ellipse(331, 310, 1 ,1);
        ellipse(345, 323, 1 ,1);
        ellipse(336, 331, 2, 2);
        ellipse(337, 318, 2, 2);
        ellipse(345, 307, 2, 2);
        ellipse(340, 306, 1 ,1);
        
        fill(240, 147, 240, 100);
        pushMatrix();
        translate(329, 327);
        rotate(-22 + sin(frameCount * 10) * 12);
        translate(-330, -327);
        
        beginShape();
        vertex(330, 327);
        vertex(360, 338);
        vertex(360, 344);
        vertex(360, 352);
        vertex(350, 352);
        vertex(341, 352);
        vertex(330, 327);
        endShape();
        
        stroke(194, 8, 194);
        line(360, 338, 330, 327);
        stroke(212, 76, 212);
        line(360, 344, 330, 327);
        stroke(194, 8, 194);
        line(360, 352, 330, 327);
        stroke(212, 76, 212);
        line(350, 352, 330, 327);
        stroke(194, 8, 194);
        line(341, 352, 330, 327);
        popMatrix();
        
        if(deadState)
        {
            line(318, 318, 308, 308);
            line(308, 318, 318, 308);
        }
        else
        {
            pushMatrix();
            translate(313, 313);
            rotate(39);
            fill(255, 163, 255, 100);
            stroke(255, 163, 255, 100);
            arc(0,0, 12, 15, -180 - 90, -90);
            arc(0,0, 7, 15, -96, 335);
            popMatrix();
            
            pushMatrix();
            translate(313, 313);
            rotate(39);
            scale(0.84);
            fill(255, 255, 255, 200);
            stroke(255, 255, 255,200);
            arc(0,0, 12, 15, -180 - 90, -90);
            arc(0,0, 6, 15, -96, 335);
            popMatrix();
        }
        
        popMatrix();
        break;
        
    case "emerald":
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        strokeWeight(2);
        
        
        noStroke();
        
        pushMatrix();
        translate(331, 321);
        scale(1.97, 1.93);
        rotate(90);
        emeraldGemLogo(0, 0, 10);
        popMatrix();
        noFill();
        stroke(7, 84, 0);
        //Body
        (rect)(300, 300, 50, 40, 21, 18, 17, 19);
        
        //Rear fin
        stroke(7, 84, 0, 150);
        fill(101, 245, 110, 150 + sin(frameCount * 6) * 70);
        pushMatrix();
        translate(351, 319);
        rotate(sin(frameCount * 5) * 5);
        triangle(0, 0, 15, -15, 15, 15);
        fill(51, 189, 58, 150 + sin(frameCount * 6) * 70);
        triangle(0, 0, 15, -15, 15, 8);
        fill(101, 245, 110, 150 + sin(frameCount * 6) * 70);
        triangle(0, 0, 15, -15, 15, 0);
        fill(51, 189, 58, 150 + sin(frameCount * 6) * 70);
        triangle(0, 0, 15, -15, 15, -7);
        popMatrix();
        fill(101, 245, 110);
        
        stroke(7, 84, 0);
        
        //Side flipper fin ting
        noFill();
        pushMatrix();
        translate(335, 325);
        rotate(sin(frameCount * 10) * 12);
        beginShape();
        vertex(-3, 2);
        vertex(7, 8);
        bezierVertex(17, 1, -1, 3, 2, 0);
        endShape();
        popMatrix();
        
        //Eye
        if(deadState)
        {
            line(318, 318, 308, 308);
            line(308, 318, 318, 308);
        }
        else
        {
            stroke(0, 140, 37, 150);
            fill(0, 97, 15);
            rect(318, 307, 5, 5, 8);
            rect(315, 304, 2, 2, 8);
            rect(306, 307, 10, 13, 8);
            noFill();
            stroke(7, 84, 0);
            
            strokeWeight(2);
            beginShape();
            vertex(303, 331);
            vertex(307, 328);
            vertex(312, 329);
            vertex(316, 325);
            endShape();
            
            strokeWeight(1);
            beginShape();
            vertex(303, 332);
            vertex(310, 331);
            vertex(313, 333);
            endShape();
            
            strokeWeight(0.5);
            beginShape();
            vertex(303, 332);
            vertex(308, 334);
            endShape();
        }
        
        noFill();
        
        popMatrix();
        break;    
    
    case "nemo":
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        strokeWeight(2);
        
        fill(255, 157, 0);
        stroke(0, 0, 0);
        //Body
        (rect)(300, 300, 50, 40, 17, 2, 9, 2);
        
        //Stripes
        noFill();
        stroke(255);
        strokeWeight(4);
        bezier(319, 339, 314, 328, 329, 322, 312, 304);
        bezier(337, 339, 323, 335, 344, 324, 335, 303);
        bezier(347, 328, 342, 313, 347, 310, 341, 303);
        
        strokeWeight(2);
        stroke(0);
        
        //Rear fin
        fill(255, 225, 127);
        pushMatrix();
        translate(351, 319);
        rotate(sin(frameCount * 5) * 5);
        triangle(0, 0, 15, -15, 15, 15);
        popMatrix();
        
        //Side flipper fin ting
        pushMatrix();
        translate(335, 325);
        rotate(sin(frameCount * 10) * 12);
        beginShape();
        vertex(-3, 2);
        vertex(7, 8);
        bezierVertex(17, 1, -1, 3, 2, 0);
        endShape();
        popMatrix();
        
        //eye
        if(deadState)
        {
            line(318, 318, 308, 308);
            line(308, 318, 318, 308);
        }
        else
        {
            strokeWeight(1);
            fill(255, 255, 255);
            ellipse(313, 315, 12, 15);
            noStroke();
            fill(0);
            ellipse(310, 315, 6, 6);
        }
        
        stroke(0);
        strokeWeight(2);
        noFill();
        
        //Mouth
        if(deadState)
        {
            line(301, 326, 318, 330);
        } else
        {
            bezier(313, 323 + 5, 314, 321 + 5, 308, 330 + 5, 301, 328 + 5);
        }
        
        popMatrix();
        break;
        
    case "dory":
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        strokeWeight(2);
        
        fill(0, 140, 255);
        stroke(0, 0, 0);
        //Body
        (rect)(300, 300, 50, 40, 17, 2, 9, 2);
        
        //Stripes
        noStroke();
        fill(0, 14, 168);
        beginShape();
        vertex(309, 302);
        bezierVertex(339, 307, 311, 321, 350, 336);
        vertex(350, 301);
        endShape(CLOSE);
        
        fill(0, 140, 255);
        ellipse(334, 318, 9, 6);
        
        strokeWeight(2);
        stroke(0);
        
        //Rear fin
        fill(238, 255, 0);
        pushMatrix();
        translate(351, 319);
        rotate(sin(frameCount * 5) * 5);
        triangle(0, 0, 15, -15, 15, 15);
        popMatrix();
        
        //Side flipper fin ting
        pushMatrix();
        translate(335, 325);
        rotate(sin(frameCount * 10) * 12);
        beginShape();
        vertex(-3, 2);
        vertex(7, 8);
        bezierVertex(17, 1, -1, 3, 2, 0);
        endShape();
        popMatrix();
        
        //eye
        if(deadState)
        {
            line(318, 318, 308, 308);
            line(308, 318, 318, 308);
        }
        else
        {
            strokeWeight(1);
            fill(255, 255, 255);
            ellipse(313, 315, 12, 15);
            noStroke();
            fill(102, 0, 27);
            ellipse(310, 315, 6, 6);
        }
        
        stroke(0);
        strokeWeight(2);
        noFill();
        
        //Mouth
        if(deadState)
        {
            line(301, 326, 318, 330);
        } else
        {
            bezier(313, 323 + 5, 314, 321 + 5, 308, 330 + 5, 301, 328 + 5);
        }
        
        popMatrix();
        break;
        
    case 'rainbow':
        var Scale = function(x, y, c)
        {
            pushMatrix();
            translate(x, y);
            noStroke();
            strokeWeight(1);
            fill(c);
            bezier(0, -2, 5, -5, 5, 5, 0, 2);
            popMatrix();
        };
        pushMatrix();
        translate(x, y);
        scale(s / 100);
        rotate(r);
        translate(-300 - 25, - 300 - 20);
        strokeWeight(2);
        
        fill(0, 0, 0);
        stroke(0, 0, 0);
        //Body
        (rect)(300, 300, 50, 40, 17, 2, 9, 2);
        
        //Scales
        pushStyle();
        colorMode(HSB);
        for(var i = 0; i < 20; i++)
        {
            Scale(300 + i * 3.5 / 1.86 * 1.26, 337, color(i * 14, 255, 255));
            Scale(300 + i * 4 / 2.04 * 1.25, 333, color(i * 14, 255, 255));
            Scale(300 + i * 3.5 / 1.83 * 1.28, 329, color(i * 14, 255, 255));
            Scale(300 + i * 4 / 2.05 * 1.28, 325, color(i * 14, 255, 255));
            Scale(300 + i * 3.6 / 1.87 * 1.28, 321, color(i * 14, 255, 255));
            Scale(300 + i * 4 / 2.00 * 1.25, 317, color(i * 14, 255, 255));
            Scale(300 + i * 3.6 / 1.88 * 1.28, 313, color(i * 14, 255, 255));
            Scale(302 + i * 3.6 / 1.95 * 1.28, 309, color(i * 14, 255, 255));
            Scale(305 + i * 3.5 / 1.96 * 1.25, 306 - 1, color(i * 14, 255, 255));
        }
        popStyle();
        
        strokeWeight(2);
        stroke(0);
        
        //Rear fin
        fill(85, 78, 212);
        pushMatrix();
        translate(351, 319);
        rotate(sin(frameCount * 5) * 5);
        triangle(0, 0, 15, -15, 15, 15);
        popMatrix();
        
        //Side flipper fin ting
        pushMatrix();
        translate(335, 325);
        rotate(sin(frameCount * 10) * 12);
        beginShape();
        vertex(-3, 2);
        vertex(7, 8);
        bezierVertex(17, 1, -1, 3, 2, 0);
        endShape();
        popMatrix();
        
        //eye
        if(deadState)
        {
            line(318, 318, 308, 308);
            line(308, 318, 318, 308);
        }
        else
        {
            noStroke();
            fill(0, 0, 0);
            arc(313, 309, 12, 28, 0, 180);
            rect(301, 309, 8, 3, 10);
        }
        
        stroke(0);
        strokeWeight(2);
        noFill();
        
        //Mouth
        if(deadState)
        {
            line(301, 326, 318, 330);
        } else
        {
            bezier(313, 323 + 5, 314, 321 + 5, 308, 330 + 5, 301, 328 + 5);
        }
        
        noFill();
        stroke(0, 0, 0);
        //Body
        (rect)(300, 300, 50, 40, 17, 2, 9, 2);
        popMatrix();
        break;
        case 'afro':
            pushMatrix();
            translate(x, y);
            scale(s / 100);
            rotate(r);
            translate(-300 - 25, - 300 - 20);
            strokeWeight(2);
            
            fill(255, 255, 255);
            stroke(0, 0, 0);
            //Body
            (rect)(300, 300, 50, 40, 17, 2, 9, 2);
            noStroke();
            fill(255, 0, 0, 30);
            ellipse(329, 310, 5, 5);
            ellipse(322, 335, 7, 7);
            ellipse(343, 316, 5, 5);
            ellipse(338, 307, 5, 5);
            ellipse(335, 332, 6, 6);
            ellipse(329, 323, 5, 5);
            
            //Hair
            noStroke();
            pushStyle();
            colorMode(HSB);
            fill(12, 255, 255);
            ellipse(310, 300, 7, 7);
            fill(112, 255, 255);
            ellipse(315, 300, 7, 7);
            fill(212, 255, 255);
            ellipse(320, 300, 7, 7);
            fill(64, 255, 255);
            ellipse(306, 303, 7, 7);
            fill(32, 255, 255);
            ellipse(310, 294, 7, 7);
            fill(249, 255, 255);
            ellipse(317, 294, 7, 7);
            fill(200, 255, 255);
            ellipse(306, 298, 7, 7);
            fill(150, 255, 255);
            ellipse(310, 300, 7, 7);
            fill(0, 255, 255);
            ellipse(322, 296, 4, 4);
            popStyle();
            
            //nose
            strokeWeight(1);
            stroke(0);
            fill(227, 48, 48);
            ellipse(300, 323, 8, 8);

            strokeWeight(2);
            
            //Rear fin
            fill(212, 78, 78);
            pushMatrix();
            translate(351, 319);
            rotate(sin(frameCount * 5) * 5);
            triangle(0, 0, 15, -15, 15, 15);
            popMatrix();
            
            //Side flipper fin ting
            pushMatrix();
            translate(335, 325);
            rotate(sin(frameCount * 10) * 12);
            beginShape();
            vertex(-3, 2);
            vertex(7, 8);
            bezierVertex(17, 1, -1, 3, 2, 0);
            endShape();
            popMatrix();
            
            //eye
            if(deadState)
            {
                line(318, 318, 308, 308);
                line(308, 318, 318, 308);
            }
            else
            {
                strokeWeight(1);
                fill(255, 255, 255);
                ellipse(313, 315, 12, 15);
                noStroke();
                fill(0);
                ellipse(310, 315, 6, 6);
            }
            
            stroke(0);
            strokeWeight(2);
            noFill();
            
            //Mouth
            if(deadState)
            {
                line(301, 326, 318, 330);
            } else
            {
                bezier(313, 323 + 5, 314, 321 + 5, 308, 330 + 5, 301, 328 + 5);
            }
            popMatrix();
        break;
    }

};

/** TITLE ANIMATION **/
var title = function(){
    image(images.title, 0, 0);
    blueFish(347, 242, 189);
};

/** BUBBLE AND COIND BOX **/
var eatBubble = function(x, y, s, popStage, a) {
    switch(popStage)
    {
        case 0:
            strokeWeight(4);
            stroke(242, 161, 48, 150);
            pushMatrix();
            translate(x, y);
            scale(s);
            for(var i = 0; i < 360; i+=45)
            {
                rotate(i);
                line(10, 0, 30, 0);
            }
            popMatrix();
        break;
        case 1:
            strokeWeight(4);
            stroke(242, 161, 48, 150);
            pushMatrix();
            translate(x, y);
            scale(s);
            for(var i = 0; i < 360; i+=45)
            {
                rotate(i);
                line(15, 0, 30, 0);
            }
            popMatrix();
        break;
        case 2:
            strokeWeight(4);
            stroke(242, 161, 48, 150);
            pushMatrix();
            translate(x, y);
            scale(s);
            for(var i = 0; i < 360; i+=45)
            {
                rotate(i);
                line(20, 0, 30, 0);
            }
            popMatrix();
        break;
        case 3:
            strokeWeight(4);
            stroke(242, 161, 48, 150);
            pushMatrix();
            translate(x, y);
            scale(s);
            for(var i = 0; i < 360; i+=45)
            {
                rotate(i);
                line(25, 0, 30, 0);
            }
            popMatrix();
        break;
        case 4:
            strokeWeight(4);
            stroke(242, 161, 48, 150);
            pushMatrix();
            translate(x, y);
            scale(s);
            for(var i = 0; i < 360; i+=45)
            {
                rotate(i);
                line(30, 0, 30, 0);
            }
            popMatrix();
        break;
    }
    
    if(a >= 1 && popStage <= 5)
    {
        pushMatrix();
        fill(242, 161, 48, 150);
        textSize(17);
        translate(x, y);
        scale(s);
        if(powMode === 2)
        {
            text("+$" + a * 2, 0, 0);
        } else
        {
            text("+$" + a, 0, 0);
        }
        popMatrix();
    }
};
var bubble = null;
var eatBubbleQ = function(x, y, s) {
    if (!bubble) {
        canvas.background(0, 0, 0, 0);
        canvas.fill(255, 230, 0, 100);
        canvas.strokeWeight(2);
        canvas.stroke(242, 161, 48, 150);
        canvas.ellipse(27, 27, 50, 50);
        canvas.strokeWeight(5);
        canvas.noFill();
        canvas.stroke(255, 255, 255, 55);
        canvas.arc(27, 27, 40, 40, 180, 270);
        bubble = canvas.get(0, 0, 54, 54);
    }
    image(bubble, x - 27 * s, y - 27 * s, 54 * s, 54 * s);
};
var coinBox = function(x, y, s, a){
    
    pushMatrix();
    translate(x, y);
    scale(s);
    noStroke();
    
    fill(194, 109, 24);
    ellipse(54, 102, 56, 56);
    fill(224, 150, 76);
    ellipse(52, 100, 56, 56);
    fill(247, 218, 91);
    ellipse(52, 100, 50, 50);
    fill(212, 126, 40, 200);
    ellipse(52, 100, 38, 38);
    fill(247, 218, 91, 100);
    ellipse(52.7, 100.7, 35, 35);
    textSize(30);
    fill(224, 150, 76);
    text("$", 54, 99);
    fill(247, 218, 91);
    text("$", 52, 98);
    
    textSize(38);
    textAlign(LEFT, CENTER);
    fill(194, 109, 24);
    text(a, 83, 103);
    text(a, 80, 103);
    text(a, 79, 100);
    text(a, 83, 100);
    text(a, 81, 95);
    text(a, 81, 95);
    fill(224, 150, 76);
    text(a, 81, 100);
    fill(240, 214, 110);
    text(a, 81, 97);
    textAlign(CENTER, CENTER);
    popMatrix();
};

/** BUTTONS **/
function Button(t, x, y, s, c, disabled) {
    this.t = t;
    this.x = x;
    this.y = y;
    this.as = s;
    this.s = s;
    this.r = 0;
    
    this.animate = false;
    this.am = 0;
    this.shimmerWidth = 60;
    
    this.disabled = disabled || function() {return true;};
    
    this.onclick = c || function() {
        println('no click action provided');
    };
}
Button.prototype.update = function(offset) {
    offset = offset || 0;
    if (dist(mouseX, mouseY + offset, this.x, this.y) <= this.s) {
        this.animate = true;
        this.s += ((this.as + 5) - this.s) / 10;
        cursor('pointer');
        if (click) {
            this.onclick(this.t);
            click = false;
            mouseIsPressed = false;
        }
    } else {
        this.s += (this.as - this.s) / 12;
    }
    if (this.animate) {
        this.am += dist(this.am, 0, -20, 0) / 20;
        this.r += (360 - this.r) / 10;
        if (this.am >= 250) {
            this.animate = false;
        }
    } else {
        this.am = 0;
        this.r = 0;
    }
};
Button.prototype.icon = function() {
    pushMatrix();
    translate(this.x, this.y);
    scale((this.s / 85) + (this.s - this.as) / 52);
    noStroke();
    fill(98, 225, 227);
    stroke(255, 255, 255);
    switch(this.t) {
        case 'home': {
            stroke(30, 166, 15);
            fill(95, 245, 90);
            strokeWeight(7);
            strokeJoin(ROUND);
            beginShape();
            vertex(-35, -17);
            vertex(0, -47);
            vertex(35, -17);
            vertex(35, 30);
            vertex(14, 30);
            vertex(14, 7);
            vertex(-14, 7);
            vertex(-14, 30);
            vertex(-35, 30);
            endShape(CLOSE);
            break;
        }
        case '<': {
            stroke(214, 214, 214);
            fill(255, 255, 255);
            strokeWeight(7);
            strokeJoin(ROUND);
            beginShape();
            vertex(-35, 0);
            vertex(22, -30);
            vertex(22, 30);
            endShape(CLOSE);
            break;
        }
        case '>': {
            stroke(214, 214, 214);
            fill(255, 255, 255);
            strokeWeight(7);
            strokeJoin(ROUND);
            beginShape();
            vertex(35, 0);
            vertex(-22, -30);
            vertex(-22, 30);
            endShape(CLOSE);
            break;
        }
        case 'achievements': {
            stroke(224, 137, 49);
            fill(247, 218, 91);
            strokeWeight(7);
            strokeJoin(ROUND);
            beginShape();
            vertex(0, -30);
            vertex(12, -10);
            vertex(38, -7);
            vertex(16, 7);
            vertex(25, 31);
            vertex(0, 18);
            vertex(-25, 31);
            vertex(-16, 7);
            vertex(-38, -7);
            vertex(-12, -10);
            endShape(CLOSE);
            break;
        }
        case 'store': {
            stroke(222, 49, 49);
            fill(245, 90, 90);
            strokeWeight(7);
            strokeJoin(ROUND);
            beginShape();
            vertex(-15, -23);
            vertex(36, -23);
            vertex(36, 25);
            vertex(-15, 25);
            endShape(CLOSE);
            beginShape();
            vertex(-44, -15);
            vertex(-24, 3);
            vertex(-44, 21);
            endShape(CLOSE);
            break;
        }
        case 'restart': {
            rotate(this.r);
            stroke(255);
            strokeWeight(8);
            noFill();
            arc(0, 0, 75, 75, 118, 391);
            
            fill(255);
            strokeWeight(3);
            strokeJoin(ROUND);
            beginShape();
            vertex(18, 12);
            vertex(18, 38);
            vertex(43, 28);
            endShape(CLOSE);
            break;
        }
        case 'play': {
            stroke(159, 51, 222);
            fill(204, 90, 245);
            strokeWeight(6);
            strokeJoin(ROUND);
            beginShape();
            vertex(-19, -28);
            vertex(32, 0);
            vertex(-19, 28);
            endShape(CLOSE);
            break;
        }
        case 'editor': {
            pushMatrix();
            translate(-3, 5);
            scale(0.8);
            rotate(10);
            stroke(255);
            fill(255);
            strokeWeight(8);
            strokeJoin(ROUND);
            beginShape();
            vertex(12, -45);
            vertex(29, -34);
            vertex(-3, 28);
            vertex(-21, 17);
            endShape(CLOSE);
            beginShape();
            vertex(21, -64);
            vertex(42, -51);
            vertex(33, -44);
            vertex(19, -53);
            endShape(CLOSE);
            beginShape();
            vertex(-26, 48);
            vertex(-7, 38);
            vertex(-26, 26);
            endShape(CLOSE);
            popMatrix();
            break;
        }
        default: {
            fill(51);
            textSize(62);
            for(var i = 0; i < 360; i+= 30) {
                fill(30);
                text(this.t, sin(i) * 2, cos(i) * 2);
            }
            fill(150);
            if (this.disabled(this.t)) {
                fill(255);
            }
            text(this.t, 0, 0);
            break;
        }
    }
    popMatrix();
};
Button.prototype.display = function(offset) {
    if (this.disabled(this.t)) {this.update(offset);}
    
    fill(98, 190, 252);
    stroke(200);
    if (this.disabled(this.t)) {
        stroke(21, 112, 173);
    }
    
    strokeWeight(this.s / 15);
    ellipse(this.x, this.y, this.s * 2, this.s * 2);
    
    fill(255, 255, 255, 50);
    pushMatrix();
    translate(this.x, this.y);
    rotate(-140);
    noStroke();
    if (this.am > 0) {
    beginShape();
    vertex(sin(constrain(this.am, 0, 180)) * this.s, cos(constrain(this.am, 0, 180)) * this.s);
    for(var i = 0; i < this.shimmerWidth; i+=10) {
        vertex(sin(constrain(this.am - i, 0, 180)) * this.s, cos(constrain(this.am - i, 0, 180)) * this.s);
    }
    
    for(var i = this.shimmerWidth-5; i >= 0; i-=10) {
        vertex(- sin(constrain(this.am - i, 0, 180)) * this.s,cos(constrain(this.am - i, 0, 180)) * this.s);
    }
    vertex(sin(constrain(this.am, 0, 180)) * this.s, cos(constrain(this.am, 0, 180)) * this.s);
    endShape(CLOSE);
    }
    popMatrix();
    
    fill(255, 255, 255, 70);
    noStroke();
    pushMatrix();
    translate(this.x - this.s / 3, this.y - this.s / 1.5);
    rotate(-24);
    ellipse(0, 0, this.s / 1.5, this.s / 3);
    popMatrix();
    
    pushMatrix();
    translate(this.x - this.s / 1.3, this.y - this.s / 3.2);
    rotate(-61);
    ellipse(0, 0, this.s / 3.0, this.s / 7);
    popMatrix();
    
    this.icon();
};
var achieveButton = function(x, y, achieve) {
    pushMatrix();
    translate(x,y);
    scale(1 + (sin(frameCount * 2) * 5) / 100, 1 + (sin(frameCount * 5) * 3) / 100);
    scale(0.77);
    translate(-x,-y);
    fill(106, 224, 245, 100);
    strokeWeight(4);
    stroke(255, 255, 255, 50);
    ellipse(x, y, 100, 100);
    
    if(!achievements.earned[achieve])
    {
        fill(97, 153, 250);
        noStroke();
        rect(x - 19, y - 9, 38, 38, 6);
        noFill();
        stroke(97, 153, 250);
        arc(x, y - 4, 26, 42, 180, 360);
        fill(159, 212, 252);
        noStroke();
        ellipse(x, y + 5, 15, 15);
        triangle(x, y, x - 6, y + 23, x + 6, y + 23);
    }
    else
    {
        achievements.icons[achieve]();
    }
    popMatrix();
    
    if(dist(mouseX, mouseY, x, y) < 40)
    {
        cursor('help');
        fill(97, 153, 250);
        textSize(29);
        text(achievements.names[achieve], 300, 402 + (sin(frameCount * 3) * 5));
        fill(70, 125, 219);
        textSize(25);
        text(achievements.descriptions[achieve], 300, 456 + (sin(frameCount * 5) * 5));
    }
};

/** PLAYER STUFF **/
var Player = function(x, y, s){
    this.x = x;
    this.y = y;
    this.yvel = 0;
    this.s = s;
    this.speed = 3;
    this.r = 0;
};
Player.prototype.draw = function(){
    
    this.w = this.s / 1.03;
    this.h = this.s / 1.3;
    this.y = this.y;

    player(this.x + this.w / 2, this.y + this.h / 2, this.s * 2.0, this.r + deadRotate, wheelTypeFishState ? randType : curType);
    
    //fill(0);
    //rect(this.x, this.y, this.w, this.h);
    
};
Player.prototype.update = function(){
    
    this.yvel /= 1.2;
    
    if((keys[UP] || keys[87]) && !deadState)
    {
        this.yvel -= 2;
        this.r += 1;
    }
    if((keys[DOWN] || keys[83]) && !deadState)
    {
        this.yvel += 2;
        this.r -= 1;
    }
    
    if((keys[LEFT]||keys[65]) && !growState && powMode === 4)
    {
        zoom = min(1.7, zoom + 0.05);
    } else
    {
        zoom = max(1, zoom - 0.05);
    }
    
    
    this.yvel = constrain(this.yvel, -this.speed, this.speed);
    
    this.y += this.yvel;
    this.r /= 1.1;
    
    this.r = constrain(this.r, -6, 6);
    this.y = constrain(this.y, 3, 570 - this.h);
};
var p = Player.new(469, 305, 25);

/** ENEMY FISH **/
var FishesArr = [];
var Fish = function(x, y, color) {
    this.x = x;
    this.y = y;
    this.w = 0;
    this.h = 0;
    this.xB = x;
    this.yB = y;
    this.color = color;
    this.speed = 0;
    this.popStage = 0;
    this.popDelay = 0;
    this.deadAnimState = false;
};
Fish.prototype.draw = function() {
    
    switch(this.color)
    {
        case "purple":
    
            if(this.x >= -31)
            {
                if(p.s >= 71)
                {
                    eatBubbleQ(this.x, this.y, 1.68, 0);
                }
                
                purpleFish(this.x - 53, this.y - 169, 59 * 1.6);
            }
            
            if(this.deadAnimState)
            {
                eatBubble(this.xB, this.yB, 1.68, this.popStage, 3);
            }
            break;
            
        case "green":
            
            if(this.x >= -45)
            {
                if(p.s >= 56)
                {
                    eatBubbleQ(this.x + 16, this.y + 22, 1.24, 0);
                }
                
                greenFish(this.x - 32, this.y - 73, 43 * 2.2);
            }
            
            if(this.deadAnimState)
            {
                eatBubble(this.xB + 16, this.yB + 22, 1.24, this.popStage, 2);
            }
    
            break;
            
        case "yellow":
            
            if(this.x >= -38)
            {
                eatBubbleQ(this.x + 17, this.y + 6, 1, 0);
            
                yellowFish(this.x - 21, this.y - 164, 70);
            }
            
            if(this.deadAnimState)
            {
                eatBubble(this.xB + 17, this.yB + 6, 1, this.popStage, 1);
            }

            break;
            
        case "blue":
            
            if(this.x >= -81)
            {
                if(p.s >= 87)
                {
                    eatBubbleQ(this.x + 38, this.y + 35, 2.21, 0);
                }
            
                blueFish(this.x - 71, this.y - 27, 210);
            }
            
            if(this.deadAnimState)
            {
                eatBubble(this.xB + 38, this.yB + 35, 2.21, this.popStage, 4);
            }
            
            break;
            
        case "shark":

            if(this.deadAnimState)
            {
                eatBubble(this.xB + 24, this.yB + 32, 2.36, this.popStage);
            }
            
            if(this.x >= -99)
            {
                shark(this.x - 87, this.y - 380, 122);
            }
            break;
    }
};
Fish.prototype.update = function() {
    
    switch(this.color)
    {
        case "purple":
            
            if(rectCircCol(p.x, p.y, p.w, p.h, this.x, this.y, 59))
            {
                
                if(p.s < 71 && !growState)
                {
                    deadState = true;
                } else
                {
                    yandg = false;
                    globalFishCount ++;
                    fishCount ++;
                    pF ++;
                    eatenSomething = true;
                    this.deadAnimState = true;
                    this.speed = random(1, 4);
                    p.s += 2;
                    this.x = random(-600, -31);
                    this.y = random(30, 533);
                    score += 5;
                    coins += 3;
                    earned += 3;
                    if(powMode === 2)
                    {
                        earned += 3;
                        coins += 3;
                    }
                }
            }
            
            if(this.x >= 648)
            {
                this.speed = random(1, 4);
                this.x = random(-600, -31);
                this.y = random(30, 533);
            }
            
            break;
            
        case "green":
            
            if(polygonCollide([
            {x:p.x,y:p.y},
            {x:p.x+p.w,y:p.y},
            {x:p.x+p.w,y:p.y+p.h},
            {x:p.x,y:p.y+p.h}],//the player
            [{x:this.x,y:this.y},
            {x:this.x + 43,y:this.y + 43 / 2},
            {x:this.x,y:this.y + 43}]))
            {
                if(p.s < 56 && !growState)
                {
                    deadState = true;
                } else
                {
                    globalFishCount ++;
                    fishCount ++;
                    gF ++;
                    eatenSomething = true;
                    coins += 2;
                    earned += 2;
                    if(powMode === 2)
                    {
                        earned += 2;
                        coins += 2;
                    }
                    this.deadAnimState = true;
                    this.speed = random(1, 4);
                    p.s += 2;
                    this.x = random(-600, -45);
                    this.y = random(2, 521);
                    score += 5;
                }
                
            }
            
            if(this.x >= 623)
            {
                this.speed = random(1, 4);
                this.x = random(-600, -45);
                this.y = random(2, 521);
            }
            
            break;
            
        case "yellow":
            
            this.w = 38;
            this.h = 13;
            
            if(rectCollide(p, this) && !growState)
            {
                globalFishCount ++;
                fishCount ++;
                yF ++;
                eatenSomething = true;
                coins ++;
                earned ++;
                if(powMode === 2)
                {
                    earned ++;
                    coins ++;
                }
                this.deadAnimState = true;
                this.speed = random(1, 4);
                p.s += 2;
                this.x = random(-600, -38);
                this.y = random(1, 552);
                score += 5;
            }
            
            if(this.x > 615)
            {
                this.speed = random(1, 4);
                this.x = random(-600, -38);
                this.y = random(1, 552);
            }
            
            break;
            
        case "blue":
            
            this.w = 75;
            this.h = 67;
            
            if(rectCollide(p, this))
            {
                if(p.s < 87 && !growState)
                {
                    deadState = true;
                } else
                {
                    yandg = false;
                    globalFishCount ++;
                    fishCount ++;
                    bF ++;
                    eatenSomething = true;
                    this.deadAnimState = true;
                    this.speed = random(1, 4);
                    p.s += 2;
                    this.x = random(-600, -81);
                    this.y = random(5, 502);
                    score += 5;
                    coins += 4;
                    earned += 4;
                    if(powMode === 2)
                    {
                        earned += 4;
                        coins += 4;
                    }
                }

            }
            if(this.x >= 647)
            {
                this.speed = random(1, 4);
                this.x = random(-600, -81);
                this.y = random(5, 502);
            }
            break;
            
        case "shark":
            
            this.w = 48;
            this.h = 63;
       
            if((rectCollide(p, this) || rectCircCol(p.x, p.y, p.w, p.h, this.x + 35, this.y + 31, 65)) && !growState)
            {
                if(!deadState)
                {
                    sharkEatCount ++;
                }
                deadState = true;
            }
            if(this.x >= 665 && p.s < 87)
            {
                this.speed = random(1, 4);
                this.x = random(-600, -99);
                this.y = random(17, 509);
            }
            
            if(feedingFrenzy || powMode === 3)
            {
                this.deadAnimState = true;
                this.x = 700;
            }
            
            break;
    }
    
    this.x += (this.speed * zoom) + gameSpeed;
    
    if(growState)
    {
        this.x -= 10;
    }
    
    if(powMode === 1)
    {
        zoom = 2;
        
        if(this.x >= 100 && this.x <= 500)
        {
            stroke(118, 201, 237, 100);
            line(this.x, this.y + 10, p.x + p.w / 2, p.y + p.h / 2);
            if(this.y < p.y + p.h / 2)
            {
                this.y += 5;
            }
            if(this.y > p.y + p.h / 2)
            {
                this.y -= 5;
            }
        }
    }
    
    if(!this.deadAnimState)
    {
        this.xB = this.x;
        this.yB = this.y;
    }
    
    if(this.deadAnimState)
    {
        this.popDelay ++;
        
        if(this.popDelay >= 4)
        {
            this.popStage ++;
            this.popDelay = 0;
        }
        
        if(this.popStage >= 5)
        {
            this.popDelay = 0;
            this.popStage = 0;
            this.deadAnimState = false;
            
            if(this.color === "shark")
            {
                this.xB = 700;
            }
        }
    }
    
};

/** MENU BUTTONS **/
var powSpec = 110;
var playButton = Button.new('play', 300, 400, 80, function() {
    powerState = false;
    scene = 'game';
    gamesCount ++;
    milli = 0;
    sec = 0;
    eatenSomething = false;
    yF = 0;
    bF = 0;
    gF = 0;
    pF = 0;
    earned = 0;
    fishCount = 0;
    yandg = true;
    powSpec = 110;
    FishesArr = [Fish.new(700, 0, "shark"), Fish.new(700, 0, "blue"), Fish.new(700, 0, "blue"), Fish.new(700, 0, "purple"), Fish.new(700, 0, "purple"), Fish.new(700, 0, "green"), Fish.new(700, 0, "green"), Fish.new(700, 0, "yellow"), Fish.new(700, 0, "yellow"), Fish.new(700, 0, "yellow"), Fish.new(700, 0, "yellow")];
    
    if(curType === 'galaxy')
    {
        galaxyPlays ++;
    }
    
    if(powMode === 1)
    {
        p.s = 87;
    } else
    {
        p.s = 25;
    }
    
    p.y = 305;
    gameSpeed = 0;
    score = 0;
    gameState = true;
    newBest = false;
});
var storeButton = Button.new('store', 425, 455, 49, function() {scene = 'store';});
var achievementsButton = Button.new('achievements', 175, 455, 49, function() {
    scene = 'achievements';});
var homeButton = Button.new('home', 59, 544, 44, function() {scene = 'menu';});
var homeButton2 = Button.new('home', 300, 544, 38, function() {scene = 'menu'; powSpec = 110;});
var storeLeft = Button.new('<', 153, 300, 25, function() {
    storeSwipe --;
});
var storeRight = Button.new('>', 447, 300, 25, function() {
    storeSwipe ++;
});
var saveB = Button.new('save', 565, 35, 25, function() {
    println("var saveCode = [" + bestScore + ", " + coins + ", " + achievements.earned[0] + ", " + achievements.earned[1] + ", " + achievements.earned[2] + ", " + achievements.earned[3] + ", " + achievements.earned[4] + ", " + achievements.earned[5] + ", " + achievements.earned[6] + ", " + achievements.earned[7] + ", " + achievements.earned[8] + ", " + achievements.earned[9] + ", " + achievements.earned[10] + ", " + achievements.earned[11] + ", " + achievements.earned[12] + ", " + achievements.earned[13] + ", " + achievements.earned[14] + ", " + achievements.earned[15] + ", " + achievements.earned[16] + ", " + achievements.earned[17] + ", " + achievements.earned[18] + ", " + achievements.earned[19] + ", " + store.bought[0] + ", " + store.bought[1] + ", " + store.bought[2] + ", " + store.bought[3] + ", " + store.bought[4] + ", " + store.bought[5] + ", " + store.bought[6] + ", " + store.bought[7] + ", " + store.bought[8] + ", " + store.bought[9] + ", " + store.bought[10] + ", " + store.bought[11] + ", " + store.bought[12] + ", " + store.bought[13] + ", " + store.bought[14] + ", " + store.bought[15] + ", " + store.bought[16] + ", " + store.bought[17] + ", " + store.bought[18] + ", " + store.bought[19] + ", " + store.bought[20] + ", " + store.bought[21] + ", " + store.bought[22] + ", " + store.bought[23] + ", " + sharkEatCount + ", " + gamesCount + ", " + globalFishCount + ", " + galaxyPlays + ", " + true + "];");
});
var wheelSale = Button.new('$10', 447, 265, 25, function() {
    coins += 10;
    powMode = 0;
});

/** WHEEL **/
var Wheel = function(x, y, s) {
    this.x = x;
    this.y = y;
    this.s = s;
    
    this.rotation = 0;
    this.anim = 300;
    
    this.maxRotSpeed = 20;
    this.maxRotTime = random(50, 70);
    this.rotAccel = 0.25;
    this.rotDeaccel = 0.05;
    this.rotVel = 0;
    this.timeRotating = 0;
    this.spinning = false;
    
    this.wheelState = true;
    
    this.selected = 0;
    
    this.upAnim = false;
    
    this.restartFishAv = function()
    {
        var randoM = floor(random(1, store.type.length - 1));
            randType = store.type[randoM];
            randName = store.name[randoM];
            
        this.names = [["OOPS", "YOU DIDN'T GET ANYTHING!"], ["TEN PLUS", "YOU JUST GOT 10 COINS!"], ["BAD SHARK", "YOUR NEXT MATCH WILL HAVE NO SHARKS!"], ["TWO TIMES", "YOUR NEXT MATCH WILL HAVE 2 X $$$!"], ["OOPS", "YOU DIDN'T GET ANYTHING!"], ["FIFTY PLUS", "YOU JUST GOT 50 COINS!"], ["CATS HAVE 9, FISH HAVE 2", "YOU GET TWO LIVES IN YOUR NEXT MATCH!"], ["ZOOM", "CLICK [<] OR [A] TO SPEED NEXT MATCH!"], ["OOPS", "YOU DIDN'T GET ANYTHING!"], ["ONE HUNDRED PLUS", "YOU JUST GOT 100 COINS!"], ["SANTA CLAUS IN SUMMER", "YOU GET TO PLAY WITH " + randName + " FOR 1 ROUND"], ["FREE FRENZY", "YOU GET A FREE FRENZY NEXT ROUND!"]];
    };
    
};
Wheel.prototype.update = function() {
    if(click && !this.spinning && this.wheelState)
    {
        this.restartFishAv();
        powMode = 0;
        this.spinning = true;
        this.wheelState = false;
    }
    
    if(this.spinning)
    {
        this.timeRotating++;
        if(this.timeRotating < this.maxRotTime)
        {
            this.rotVel += this.rotAccel;
        }
        else
        {
            this.rotVel -= this.rotDeaccel;
        }
        
        if(this.rotVel > this.maxRotSpeed)
        {
            this.rotVel = this.maxRotSpeed;
        }
        if(this.rotVel < 0)
        {
            this.rotVel = 0;
            this.spinning = false;
            this.timeRotating = 0;
            this.maxRotTime = random(50, 70);
        }
        
        this.rotation += this.rotVel;
    }
    
    this.selected = 12.5 - ( this.rotation / 360 % 1 ) * 12 | 0;
    
    if(this.selected >= 12)
    {
        this.selected = 0;
    }
};
Wheel.prototype.display = function() {
    
    homeButton2.display();
    
    homeButton2.y = 544 + this.anim;
    
    if(powMode !== 0 && !this.wheelState)
    {
        powSpec /= 1.1;
    }
    
    textSize(20);
    fill(81, 94, 237);
    text("Some achievements disqualify\nPOWERUPS\nWould you like to sell it?", 500 - 15 + powSpec * 3, 300 - 100);
    
    if(powMode !== 0)
    {
        wheelSale.display();
    } else
    {
        text("SOLD", 500 - 15 + powSpec * 3, 354 - 100);
    }
    wheelSale.x = 486 + powSpec * 3;
    
    
    pushMatrix();
    translate(this.x + powSpec - 110, this.y - 66);
    scale(0.88);
    
    if(this.wheelState)
    {
        textSize(22);
        fill(0, 84, 230);
        text("> CLICK TO SPIN WHEEL < ", 0, -232 + sin(frameCount * 3) * 5);
    }
    noStroke();
    for(var i = 0; i < 12; i++)
    {
        pushMatrix();
        rotate(i * 30 + this.rotation);
        if(i%2){
            fill(0, 187, 255);
        }
        else
        {
            fill(0, 217, 255);
        }
        
        if(this.selected === i)
        {
            fill(184, 247, 252);
            
            if(this.upAnim)
            {
                triangle(0, 0, this.s/2.15, this.s/9, this.s/2.15, -this.s/8);
                arc(185, 0, this.s/21.81, this.s/4.00, 270, 450);
        
                fill(255, 230 - sin(frameCount * 10) * 50, 87, 100);
                
                this.anim /= 1.1;
            }
        }
        
        triangle(0, 0, this.s/2.15, this.s/9, this.s/2.15, -this.s/8);
        arc(185, 0, this.s/21.81, this.s/4.00, 270, 450);
        
        textSize(26);
        fill(0);
        //text(i, 224, 0);
        
        switch(i)
        {
            case 1:
                coinBox(43, -100, 1.00, 10);
                break;
                
            case 11:
                eatBubbleQ(124, 0, 1.31, 0, 0);
                blueFish(62, -34, 116);
                noStroke();
                break;
                
            case 2:
                shark(70, -238, 70);
                stroke(201, 43, 43);
                noFill();
                strokeWeight(3);
                ellipse(130, -2, 68, 67);
                line(149, 25, 115, -32);
                noStroke();
                break;
                
            case 7:
                textSize(39);
                fill(6, 27, 110);
                text(">>>", 117 - 15, -4);
                fill(43, 94, 166);
                text(">>>", 123 - 15, -4);
                fill(91, 216, 247);
                text(">>>", 109 - 15, -4);
                fill(47, 132, 222);
                text(">>>", 131 - 15, -4);
                break;
                
            case 4:
                textSize(61);
                fill(6, 27, 110);
                text(":(", 129, -8);
                break;
                
            case 8:
                textSize(61);
                fill(6, 27, 110);
                text(":(", 129, -8);
                break;
                
            case 0:
                textSize(61);
                fill(6, 27, 110);
                text(":(", 129, -8);
                break;
                
            case 3:
                textSize(49);
                fill(6, 110, 17);
                text("2X", 127 - 10, -2);
                fill(40, 161, 52);
                text("2X", 131 - 10, -2);
                fill(88, 209, 98);
                text("2X", 134 - 10, -2);
                break;
                
            case 6:
                fill(125, 0, 0);
                arc(140, 9, 44, 30, -90, 90);
                arc(140, -13, 44, 30, -90, 90);
                triangle(141, 24, 104, -3, 140, -28);
                fill(230, 104, 104);
                triangle(141, 22, 107, -3, 140, -25);
                arc(140, 7, 38, 24, -90, 90);
                arc(140, -11, 38, 24, -90, 90);
                fill(191, 44, 44);
                arc(140, 9, 38, 24, -90, 90);
                arc(140, -13, 38, 24, -90, 90);
                triangle(141, 22, 112, -3, 140, -25);
                break;
                
            case 10:
                
                fill(100, 0, 125);
                rect(108, -24, 45, 45);
                fill(157, 43, 186);
                rect(113, -19, 35, 35);
                fill(100, 0, 125);
                rect(112, -3, 38, 2);
                rect(129, -19, 2, 38);
                arc(151, -1, 50, 36, -72, -29);
                arc(151, -1, 50, 36, 28, 71);
                
                break;
                
            case 5:
                coinBox(43, -100, 1.00, 50);
                break;

            case 9:
                coinBox(43, -100, 1.00, 100);
                break;
        }
        
        popMatrix();
        
    }
    for(var i = 0; i < 12; i++)
    {
        pushMatrix();
        rotate(i * 30 + this.rotation);
        stroke(0, 0, 150);
        strokeWeight(5);
        line(0, 0, this.s/2.12, this.s/-7.50);
        popMatrix();
    }
    
    noFill();
    strokeWeight(5);
    stroke(0, 0, 150);
    ellipse(0, 0, this.s/1.02, this.s/1.02);
    
    fill(255);
    strokeWeight(1);
    pushMatrix();
    translate(this.s / 2.37, 0);
    rotate(90);
    triangle(0, -5, -10, -25, 10, -25);
    popMatrix();
    popMatrix();
    
    if(!this.wheelState && this.rotVel < 0.1)
    {
        this.upAnim = true;
    }
    
    if(!this.wheelState)
    {
        textSize(25);
        fill(70, 125, 219);
        text(this.names[this.selected][1], 300, 472);
        fill(25, 79, 166);
        text(this.names[this.selected][0], 300, 445);
        
        
        if(this.upAnim && this.anim === 300)
        {
            switch(this.selected)
            {
                case 1:
                    coins += 10;
                    break;
                    
                case 5:
                    coins += 50;
                    break;
                    
                case 9:
                    coins += 100;
                    break;
                    
                case 2:
                    powMode = 3;
                    break;
                    
                case 11:
                    powMode = 1;
                    break;
                    
                case 3:
                    powMode = 2;
                    break;
                    
                case 7:
                    powMode = 4;
                    break;
                    
                case 6:
                    powMode = 5;
                    break;
                    
                case 10:
                    wheelTypeFishState = true;
                    break;
            }
        }
    }
};
Wheel.prototype.pack = function() {
    this.update();
    this.display();
};
var wheel = Wheel.new(300, 300, 400);

var progressBar = function(){
    
    noFill();
    
    // progress bar
    pushMatrix();
    translate(-20, 0);
    stroke(186, 113, 44, 150);
    fill(237, 247, 102, 170);
    (rect)(34, 12, 313, 33, 17, 2, 9, 2);
    fill(237, 245, 120);
    
    for(var i = 0; i < fishState; i++)
    {
        ellipse(64 + i * 46, 28, 43, 43);
    }
    
    fishState = 1;
    
    if(p.s <= 25)
    {
        p.s = 25;
        growState = false;
        growDelay = true;
    }
    
    if(p.s >= 56)
    {
        fishState = 2;
    }
    if(p.s >= 71)
    {
        fishState = 3;
    }
    if(p.s >= 87)
    {
        fishState = 4;
    }
    
    if(p.s >= 87)
    {
        p.s = 87;
        
        if(!feedingFrenzy)
        {
            yF = gF = pF = bF = 0;
        }
        feedingFrenzy = true;
    }
    
    yellowFish(36, -103, 54);
    greenFish(85, -26, 54);
    purpleFish(133, -54, 46);
    blueFish(177, 12, 58);
    
    textAlign(RIGHT, 0);
    textSize(30);
    fill(217, 150, 95);
    text(score, 344, 40);
    if(feedingFrenzy)
    {
        frenzyDelay ++;
        
        if(frenzyDelay >= 60)
        {
            frenzyTime --;
            frenzyDelay = 0;
        }
        
        if(frenzyTime <= 0)
        {
            frenzyDelay = 0;
            frenzyTime = 15;
            feedingFrenzy = false;
            growState = true;
            growDelay = false;
            
            if(powMode === 1)
            {
                powMode = 0;
                zoom = 0;
            } else
            {
                gameSpeed ++;
            }
        }
        
        textSize(29);
        textAlign(LEFT, 0);
        fill(230, 157, 89, 200 + sin(frameCount * 5) * 40);
        text("FEEDING FRENZY: " + frenzyTime, 33, 75);
    }
    textAlign(CENTER, CENTER);
    popMatrix();
    
    if(gameSpeed >= 4)
    {
        gameSpeed = 4;
    }
    
    if(deadState)
    {
        deadRotate += 5;
    }
    
    if(growState)
    {
        p.s -= 1;
    }
};

/** ACHIEVE ANIMATION VARIABLES**/
var achieveI = 0;
var achieveUp = 70;
var achieveDown = 0;
var delayAchieve = 0;

draw = function()
{
    back();
    cursor(ARROW);
    textSize(20);
    textAlign(CENTER, CENTER);
    textFont(font_tahoma);
    
    loadImages();
    
    switch (scene)
    {
    
    case "menu":
        
        if(sharkEatCount >= 30)
        {
            achievements.earned[3] = true;
        }
        
        if(!gameState)
        {
            title();
        } else
        {
            textSize(141);
            fill(21, 112, 173);
            text(score, 300, 88 + sin(frameCount * 3) * 6);
            fill(98, 190, 252);
            text(score, 300, 83 + sin(frameCount * 3) * 6);
            
            saveB.display();
            
            textSize(48);
            
            if(newBest)
            {
                fill(171, 22, 22);
                text("NEW " + "TOP " + bestScore + " NEW", 300, 188 + sin(frameCount * 5) * 5);
                fill(250, 97, 97);
                text("NEW " + "TOP " + bestScore + " NEW", 300, 184 + sin(frameCount * 5) * 5);
                
                fill(21, 112, 173);
                text("TOP " + bestScore, 300, 188 + sin(frameCount * 5) * 5);
                fill(98, 190, 252);
                text("TOP " + bestScore, 300, 184 + sin(frameCount * 5) * 5);
            } else
            {
                fill(21, 112, 173);
                text("TOP " + bestScore, 300, 188 + sin(frameCount * 5) * 5);
                fill(98, 190, 252);
                text("TOP " + bestScore, 300, 184 + sin(frameCount * 5) * 5);
            }

            if(bestScore < score)
            {
                bestScore = score;
                newBest = true;
            }
            
            if(coins >= 10000)
            {
                coinBox(181, 155 + sin(frameCount * 4) * 4, 1, coins);
            }
            else if(coins >= 1000)
            {
                coinBox(194, 155 + sin(frameCount * 4) * 4, 1, coins);
            }
            else if(coins >= 100)
            {
                coinBox(208, 155 + sin(frameCount * 4) * 4, 1, coins);
            }
            else if(coins >= 10)
            {
                coinBox(224, 155 + sin(frameCount * 4) * 4, 1, coins);
            }
            else
            {
                coinBox(237, 155 + sin(frameCount * 4) * 4, 1, coins);
            }
        }
        
        wheel = Wheel.new(300, 300, 400);
        playButton.display();
        storeButton.display();
        achievementsButton.display();
        
        break;
        
    case "store":
        
        achievements.earned[0] = true;
        
        achievements.earned[1] = true;
        
        for(var i = 0; i < store.type.length; i++)
        {
            if(storeSwipe < i + 2 && storeSwipe > i - 2)
            {
                pushMatrix();
                translate(300 + i * 300 - storeSwipe * 300, 300);
                stroke(255, 255, 255, 50);
                scale(0.7 + (sin(frameCount * 2) * 5) / 100, 0.7 + (sin(frameCount * 5) * 3) / 100);
                
                if(!store.bought[i])
                {
                    achievements.earned[1] = false;
                }
                
                if(store.type[i] === 'cavan' && store.bought[i])
                {
                    achievements.earned[2] = true;
                }
                
                if(store.type[i] === 'student' && store.bought[i])
                {
                    achievements.earned[14] = true;
                }
                
                if(store.type[i] === 'sponge' && store.bought[i])
                {
                    achievements.earned[15] = true;
                }
                
                if(storeSwipe !== i)
                {
                    if(i > storeSwipe)
                    {
                        translate(-85, 0);
                    }
                    if(i < storeSwipe)
                    {
                        translate(85, 0);
                    }
                    scale(0.5, 0.5);
                }
                
                fill(106, 224, 245, 100);
                ellipse(0, 0, 320, 320);
                noStroke();
                
                textSize(32);
                
                if(!store.bought[i])
                {
                    fill(214, 148, 86);
                    text("BUY FOR " + store.prices[i], 0, 88);
                    fill(212, 181, 87);
                    text("BUY FOR " + store.prices[i], 0, 85);
                }
                else
                {
                    if(curType !== store.type[i])
                    {
                        fill(214, 148, 86);
                        text("PURCHASED", 0, 88);
                        fill(212, 181, 87);
                        text("PURCHASED", 0, 85);
                    } else
                    {
                        fill(214, 148, 86);
                        text("SELECTED", 0, 88);
                        fill(212, 181, 87);
                        text("SELECTED", 0, 85);
                    }
                }
                
                textSize(28);
                fill(23, 91, 209);
                text(store.name[i], 0, -78);
                
                fill(255, 255, 255, 30);
                rotate(52);
                ellipse(-118, 8, 51, 102);
                ellipse(-103, 78, 30, 30);
                player(295 - 300, 303 - 300, 179, -52, store.type[i]);
                popMatrix();
            }
        }
        
        if(dist(mouseX, mouseY, 300, 300) < 110)
        {
            if(store.prices[storeSwipe] > coins && !store.bought[storeSwipe])
            {
                cursor("not-allowed");
            }
            
            if(store.prices[storeSwipe] <= coins && !store.bought[storeSwipe])
            {
                cursor(HAND);
                
                if(click)
                {
                    coins -= store.prices[storeSwipe];
                    store.bought[storeSwipe] = true;
                }
            }
            if(store.bought[storeSwipe])
            {
                if(curType !== store.type[storeSwipe])
                {
                    cursor(HAND);
                }
                
                if(click)
                {
                    curType = store.type[storeSwipe];
                }
            }
        }
        
        
        coinBox(-13, -52, 0.79, coins);
        
        if(storeSwipe > 0)
        {
            storeLeft.display();
        }
        
        if(storeSwipe < store.type.length - 1)
        {
            storeRight.display();
        }
        
        homeButton.display();
        
        break;
        
    case "achievements":
        
        homeButton.display();
        
        homeButton.display();
        
        achievements.earned[19] = true;
        
        for(var i = 0; i < 20; i++)
        {
            if(!achievements.earned[i] && i < 19)
            {
                achievements.earned[19] = false;
            }
            
            achieveButton(60 + (i % 5) * 120, 58 + i * 18 - (i % 5) * 18, i);
        }
        
        break;
    
    case "game":
        
        if(powMode > 0)
        {
             powerState = true;
        }
        
        for(var i = 0; i < FishesArr.length; i++)
        {
            FishesArr[i].update();
            FishesArr[i].draw();
        }
        
        milli ++;
        
        if(milli >= 60)
        {
            milli = 0;
            sec++;
        }
        
        if(sec >= 100 && !eatenSomething)
        {
            achievements.earned[4] = true;
        }
        
        if(!eatenSomething && deadState === true)
        {
            achievements.earned[7] = true;
        }
        
        noStroke();
        strokeWeight(2);
        
        progressBar();
        coinBox(315, -37, 0.64, coins);

        p.draw();
        p.update();
        
        if(powMode === 5)
        {
            noStroke();
            pushMatrix();
            translate(562, 32);
            scale(17 / (100 + sin(frameCount * 5)*10));
            fill(143, 14, 14);
            arc(90, 0, 183, 300, -180, 0);
            arc(-90, 0, 183, 300, -179, 0);
            triangle(0, 200, -182, 0, 182, 0);
            fill(212, 57, 57);
            arc(90, 0, 174, 288, -180, 0);
            arc(-90, 0, 174, 288, -179, 0);
            triangle(0, 200 - 5, -182 + 5, 0, 182 - 5, 0);
            popMatrix();
        }
        
        break;
        
    case "wheel":
        wheel.pack();
        break;
        
    case "test":
        
        player(300, 300, 315, 10, "ultron");
        
        break;
    }
    
    if(deadRotate >= 150)
    {
        trans += 10;
    } else
    {
        trans /= 1.1;
    }
    
    if(powMode === 5 && trans >= 300)
    {
        FishesArr = [Fish.new(700, 0, "shark"), Fish.new(700, 0, "blue"), Fish.new(700, 0, "blue"), Fish.new(700, 0, "purple"), Fish.new(700, 0, "purple"), Fish.new(700, 0, "green"), Fish.new(700, 0, "green"), Fish.new(700, 0, "yellow"), Fish.new(700, 0, "yellow"), Fish.new(700, 0, "yellow"), Fish.new(700, 0, "yellow")];
        deadState = false;
        deadRotate = 0;
        powMode = 0;
    }
    
    if(trans >= 320)
    {
        deadState = false;
        deadRotate = 0;
        scene = "wheel";
        wheelTypeFishState = false;
    }
    
    for(var i = 0; i < achievements.earned.length; i++)
    {
        if(achievements.earned[i] && !achievements.anim[i])
        {
            if(achieveUp >= 70)
            {
                achieveI = i;
            }
            achieveUp /= 1.1;
            
            if(achieveUp <= 1)
            {
                delayAchieve ++;
            }
            
            if(delayAchieve >= 100)
            {
                achieveDown += 2;
            }
            
            if(achieveDown >= 70)
            {
                delayAchieve = 0;
                achieveDown = 0;
                achieveUp = 70;
                achievements.anim[i] = true;
            }
        }
    }
    
    pushMatrix();
    translate(0, achieveUp + achieveDown);
    stroke(59, 150, 199);
    fill(0, 75, 125);
    (rect)(100, 540, 400, 50, 17, 2, 9, 2);
    noStroke();
    fill(15, 101, 158, 70);
    (rect)(100, 540, 400, 27, 17, 2, 9, 2);
    textSize(21);
    fill(123, 196, 235);
    text("-- ACHIEVEMENT EARNED --", 300, 555);
    textSize(17);
    text(achievements.names[achieveI], 300, 575);
    popMatrix();
    
    if(yF === 2 && gF === 2 && pF === 2 && bF === 2 && !feedingFrenzy && !powerState)
    {
        achievements.earned[5] = true;
    }
    
    if(yF === 1 && gF === 1 && pF === 1 && bF === 1 && !feedingFrenzy && !powerState)
    {
        achievements.earned[6] = true;
    }
    
    if(earned >= 200 && !powerState)
    {
        achievements.earned[8] = true;
    }
    
    if(gamesCount >= 100)
    {
        achievements.earned[9] = true;
    }
    
    if(sec <= 60 && !powerState && feedingFrenzy)
    {
        achievements.earned[10] = true;
    }
    
    if(sec <= 15 && fishCount >= 10 && !powerState)
    {
        achievements.earned[11] = true;
    }
    
    if(globalFishCount >= 500)
    {
        achievements.earned[12] = true;
    }
    
    if(galaxyPlays >= 10)
    {
        achievements.earned[13] = true;
    }
    
    if(yandg && feedingFrenzy && !powerState)
    {
        achievements.earned[16] = true;
    }
    
    if(sec >= (60 * 5) && !powerState)
    {
        achievements.earned[17] = true;
    }
    
    if(coins >= 3000)
    {
        achievements.earned[18] = true;
    }
    
    noStroke();
    fill(134, 241, 247, trans);
    rect(0, 0, 600, 600);
    click = false;
    
    // fps
    //fill(0);
    //textSize(16);
    //text(this.__frameRate|0, 15, 10);

};

// stop oh noes
(function() {return this;})().LoopProtector.prototype.leave = function() {};
