
/**
@Author: Isaac Emerald Â©2016. Emerald Games Production!

@FlyBird: Make the little bird fly! Don't touch the spikes! Collect precious gems on your way to unlock fantastic new birds, backgrounds, and gadgets! And finish the challanges to unlock amazing achievements! How far can you make it?

@Includes: 15 Birds to unlock!   12 Backgrounds to unlock!   3 Gadgets to unlock!   
10 Achievements to unlock

@CREDITS: Inspired by - "Bird Climb", and - "Don't touch the spikes".
**/

/**

@TopEmeraldGames:
    THE CURRENT:
    https://www.khanacademy.org/computer-programming/-/6413308542713856
        
    BURGER MASTER:
    https://www.khanacademy.org/computer-programming/-/3637104266

@Subscribe:
    https://www.khanacademy.org/computer-programming/-/6018029635043328
    
@BonusCommentary:
    This game took me over (2 1/2 months)! :O
    My awesome family gave me some great ideas for this game! Thank you Family! :)
    This game is over 6000 lines of code! :O
    
**/// <<< Subscriber, Bonus Commentary, and more!

var
    /**   @SaveCode: Replace the code below with your save code!   **/
                /**         >> FROM HERE <<         **/
boughtBirds=0,birdBoughtState=[true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],birdFlap2=0,gem=0,start=false,backgroundsBoughtState=[true,false,false,false,false,false,false,false,false,false,false,false,false],filterGemState=0,powerupsBoughtState=[false,false,false,true],achievements=[0,0,0,0,0,0,0,0,0,0],logButtons=[true,false,false,false,false,false,false,false,false,false,false,false,false],achievementShade=[0,0,0,0,0,0,0,0,0,0],inventoryFilter=[false,false,false,true],imageLog=[0,0,0,0,0,0,0,0,0,0],imageFilter=3,achievementFilter=0,achievementState=[false,false,false,false,false,false,false,false,false,false],FlyBirdCheck=0,birdFilter="blue",f=0,AccesClicking=[true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],styles="blue",powerUp=3,boughtBackgrounds=0;
                /**         >> TO HERE <<         **/


var oldCanvas = {
    w: 400,
    h: 400
};

var mouse = {
    X: 0,
    Y: 0
};

var updateMouse = function(){
    
    mouse.X = mouseX / width * oldCanvas.w;
    mouse.Y = mouseY / height * oldCanvas.h;
    
};


//background vars
var 
    backgroundButtonX = [],
    backgroundButtonY = [],
    moreBackgrounds = 0;

//power up vars
var 
    boughtPowerups = 0,
    powerupsButtonX = [],
    powerupsButtonY = [],
    powerupsNames = ["Hold Down", "Magnet Coins", "Protective Ball", "X"],
    powerupsEnscryption = ["Instead of tapping.\nHold down to fly!", "Pulls the coins towards you.", "Gives you an extra life.", "No Gadget."],
    protetiveBallLife = 100,
    protetiveBallLifeState = false;

//player vars
var 
    playerX = 188,
    playerY = 190,
    playerSize = 25;

//move side to side vars
var
    move_sideToSide = playerX - (playerSize / 2),
    moveSpeed = 1;

//gravity vars
var
    gravity = 0,
    gravitySpeed = 0.2;

//score graphic var
var scoreGraphic = 50;

//deathState
var death = false;

var
    birdFlap = 0,
    birdFlap3 = false;

//player particle stuff vars
var
    particleX = [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
    numberColor1=255,numberColor2=0,
    particleY = [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
    filterButtonImages = [22, 33, 12, 30],
    particleSize = [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
    particleCount = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];

//if clicked
var 
    clicked = 0;

//bird gravity and bird left and right image vars
var 
    bird_leftOrRight = 25,
    birdGravity_leftOrRight = -gravity;

//spike count
var
    spikeCountLeft = 5,
    spikeCountRight = 5;

//scene
var scene = "home";
var backgroundStyles = "original";

//gem vars
var 
    emeraldCoinSize = 20,
    emeraldCoinX = 200 - emeraldCoinSize / 2,
    emeraldCoinY = 300,
    emeraldState = true,
    emeraldCoinFilter = 1;

var
    emeraldParticleX = 0,
    emeraldParticleY = 0,
    emeraldParticleSize = 30;

var gemBackColor = color(4, 224, 15, 100);
    
var bird_move = -300, bird_move2 = -300, bird_move3 = -300, bird_move4 = -300, bird_move5 = -300;

var emeraldGem = function(x, y, s, c){
    
    //stroke
    stroke(255, 255, 255, 35);
    strokeWeight(s / 25);
    
    //base
    fill(c);
    beginShape();
    vertex(x - s, y - s / 2);
    vertex(x - s / 2, y - s);
    vertex(x + s / 2, y - s);
    vertex(x + s, y - s / 2);
    vertex(x + s, y + s);
    vertex(x + s / 2, y + s * 1.5);
    vertex(x - s / 2, y + s * 1.5);
    vertex(x - s, y + s);
    vertex(x - s, y - s / 2);
    endShape();
    
    //1
    fill(255, 255, 255, 75);
    noStroke();
    beginShape();
    vertex(x - s, y - s / 2);
    vertex(x - s / 2, y - s);
    vertex(x - s / 3, y - s / 2);
    vertex(x - s / 2, y - s / 3);
    endShape();
    
    //2
    fill(0, 0, 0, 30);
    beginShape();
    vertex(x - s / 2, y - s);
    vertex(x - s / 3, y - s / 2);
    vertex(x + s / 3, y - s / 2);
    vertex(x + s / 2, y - s);
    endShape();
    
    //3
    beginShape();
    fill(0, 0, 0, 50);
    vertex(x + s / 2, y - s);
    vertex(x + s, y - s / 2);
    vertex(x + s / 2, y - s / 3);
    vertex(x + s / 3, y - s / 2);
    endShape();
    
    //4
    fill(0, 0, 0, 60);
    beginShape();
    vertex(x + s, y - s / 2);
    vertex(x + s, y + s);
    vertex(x + s / 2, y + s / 1.1);
    vertex(x + s / 2, y - s / 3);
    endShape();
    
    //5
    fill(0, 0, 0, 70);
    beginShape();
    vertex(x + s, y + s);
    vertex(x + s / 2, y + s * 1.5);
    vertex(x + s / 3, y + s);
    vertex(x + s / 2, y + s / 1.2);
    endShape();
    
    //6
    fill(0, 0, 0, 40);
    beginShape();
    vertex(x + s / 3, y + s);
    vertex(x + s / 2, y + s * 1.5);
    vertex(x - s / 2, y + s * 1.5);
    vertex(x - s / 3, y + s);
    endShape();
    
    //7
    fill(0, 0, 0, 25);
    beginShape();
    vertex(x - s, y + s);
    vertex(x - s / 2, y + s * 1.5);
    vertex(x - s / 3, y + s);
    vertex(x - s / 2, y + s / 1.2);
    endShape();
    
    //8
    fill(255, 255, 255, 20);
    beginShape();
    vertex(x - s, y + s);
    vertex(x - s / 2, y + s / 1.2);
    vertex(x - s / 2, y - s / 3);
    vertex(x - s, y - s / 2);
    endShape();
    
    //shade
    fill(0, 0, 0, 4);
    beginShape();
    vertex(x + s / 2.3, y - s / 2.3);
    vertex(x + s / 2, y - s / 3);
    vertex(x + s / 2, y + s / 1.2);
    vertex(x + s / 3, y + s);
    vertex(x - s / 3, y + s);
    vertex(x - s / 2.3, y + s / 1.1);
    endShape();
    
    //shade 2
    fill(0, 0, 0, 5);
    beginShape();
    vertex(x + s / 6, y + s);
    vertex(x + s / 3, y + s);
    vertex(x + s / 2, y + s / 1.2);
    vertex(x + s / 2, y + s / 1.5);
    endShape();

};

var applyGems = function(){
    
    if(powerUp >= 1 && powerUp < 2 && emeraldState === true)
    {
        if(playerY > emeraldCoinY)
        {
            emeraldCoinY += 5;
        }
        
        if(playerY < emeraldCoinY)
        {
            emeraldCoinY -= 5;
        }
        
        if(playerX > emeraldCoinX)
        {
            emeraldCoinX += 5;
        }
        
        if(playerX < emeraldCoinX)
        {
            emeraldCoinX -= 5;
        }
        
    }
    
    if(emeraldState === false)
    {
        fill(gemBackColor);
        pushMatrix();
        rectMode(CENTER);
        translate(emeraldParticleX + emeraldParticleSize / 2, emeraldParticleY + emeraldParticleSize / 2);
        rotate(frameCount * 2 % 380);
        rect(0, 0, emeraldParticleSize, emeraldParticleSize);
        rect(-3, 0, emeraldParticleSize / 2, emeraldParticleSize / 2);
        rect(3, 0, emeraldParticleSize / 2, emeraldParticleSize / 2);
        rect(0, -3, emeraldParticleSize / 2, emeraldParticleSize / 2);
        rect(0, 3, emeraldParticleSize / 2, emeraldParticleSize / 2);
        rectMode(0);
        popMatrix();
        
        textSize(18);
        text("+" + emeraldCoinFilter, playerX + playerSize / 2, playerY - emeraldParticleSize * 2 + playerSize / 2);
        
        emeraldParticleSize -= 1;
    }
    
    if(emeraldParticleSize <= 0)
    {
        emeraldParticleSize = 0;
    }
    
    if(emeraldState === true)
    {
        emeraldParticleX = emeraldCoinX;
        emeraldParticleY = emeraldCoinY;
        
        switch(emeraldCoinFilter)
        {
            case 1:
            gemBackColor = color(4, 224, 15, 100);
            emeraldGem(emeraldCoinX + 0.5 + emeraldCoinSize / 2, emeraldCoinY + emeraldCoinSize / 2 - 2.5, emeraldCoinSize / 2, color(43, 255, 0));
                break;
                
            case 2:
            gemBackColor = color(0, 115, 255, 100);
            emeraldGem(emeraldCoinX + 0.5 + emeraldCoinSize / 2, emeraldCoinY + emeraldCoinSize / 2 - 2.5, emeraldCoinSize / 2, color(0, 115, 255));
                break;
                
            case 3:
            gemBackColor = color(208, 0, 255, 100);
            emeraldGem(emeraldCoinX + 0.5 + emeraldCoinSize / 2, emeraldCoinY + emeraldCoinSize / 2 - 2.5, emeraldCoinSize / 2, color(208, 0, 255));
                break;
                
            case 4:
            gemBackColor = color(255, 247, 0, 100);
            emeraldGem(emeraldCoinX + 0.5 + emeraldCoinSize / 2, emeraldCoinY + emeraldCoinSize / 2 - 2.5, emeraldCoinSize / 2, color(255, 247, 0));
                break;
                
            case 5:
            gemBackColor = color(255, 0, 0, 100);
            emeraldGem(emeraldCoinX + 0.5 + emeraldCoinSize / 2, emeraldCoinY + emeraldCoinSize / 2 - 2.5, emeraldCoinSize / 2, color(255, 0, 0));
                break;
                
            case 6:
            gemBackColor = color(0, 238, 255, 100);
            emeraldGem(emeraldCoinX + 0.5 + emeraldCoinSize / 2, emeraldCoinY + emeraldCoinSize / 2 - 2.5, emeraldCoinSize / 2, color(0, 238, 255));
                break;
                
            case 7:
            gemBackColor = color(255, 128, 0, 100);
            emeraldGem(emeraldCoinX + 0.5 + emeraldCoinSize / 2, emeraldCoinY + emeraldCoinSize / 2 - 2.5, emeraldCoinSize / 2, color(255, 128, 0));
                break;
                
            case 8:
            gemBackColor = color(171, 171, 171, 100);
            emeraldGem(emeraldCoinX + 0.5 + emeraldCoinSize / 2, emeraldCoinY + emeraldCoinSize / 2 - 2.5, emeraldCoinSize / 2, color(171, 171, 171));
                break;
                
            case 9:
            gemBackColor = color(247, 198, 0, 100);
            emeraldGem(emeraldCoinX + 0.5 + emeraldCoinSize / 2, emeraldCoinY + emeraldCoinSize / 2 - 2.5, emeraldCoinSize / 2, color(247, 198, 0));
                break;
                
            case 10:
            gemBackColor = color(0, 0, 0, 100);
            emeraldGem(emeraldCoinX + 0.5 + emeraldCoinSize / 2, emeraldCoinY + emeraldCoinSize / 2 - 2.5, emeraldCoinSize / 2, color(0, 0, 0));
                break;
        }
        
        if(playerY > emeraldCoinY - playerSize && playerY < emeraldCoinY + emeraldCoinSize && playerX > emeraldCoinX - playerSize && playerX < emeraldCoinX + emeraldCoinSize)
        {
            emeraldCoinX = (200 - emeraldCoinSize / 2) + random(-20, 20);
            emeraldCoinY = random(10, 400 - emeraldCoinSize - 10);
            emeraldState = false;
            gem += emeraldCoinFilter;
            emeraldParticleSize = 30;
        }
    }
    
    fill(51, 181, 7);
    
    if(gem >= 1)
    {
        rect(10, 18, 30, 20);
    }
    if(gem >= 10)
    {
        rect(10, 18, 40, 20);
    }
    if(gem >= 100)
    {
        rect(10, 18, 50, 20);
    }
    if(gem >= 1000)
    {
        rect(10, 18, 60, 20);
    }
    if(gem >= 10000)
    {
        rect(10, 18, 70, 20);
    }
    if(gem >= 100000)
    {
        rect(10, 18, 80, 20);
    }
    if(gem >= 1000000)
    {
        rect(10, 18, 90, 20);
    }
    
    textAlign(0, 0);
    emeraldGem(25 - 10, 25, 10, color(43, 255, 0));
    fill(255, 255, 255);
    textSize(15);
    if(gem >= 1)
    {
        text(gem, 40 - 15, 36 - 2.5);
    }
    textAlign(CENTER, CENTER);
};

//death vars
var
    deathTran = 0,
    deathTranSpeed = 0;

//bird arrays
var 
    birdNames = ["Blue Bird", "Long Beak", "Green Feather", "Red Ronald", "Ninja Bird", "Robot Bird", "Unicorn Bird", "Alien Bird", "Wizard Bird", "Reaper Bird", "Carissa Bird", "Fairy Bird", "Vampire Bird", "Dragon Bird", "Blackhole Bird", "Phoenix"],
    birdButtonX = [],
    birdButtonY = [],
    currentBirdSyle = "",
    birdType_store = [],
    moreBirds = 0;

var flap = 0;

//achievement arrays
var
    achievementNames = ["First Flight!", "Buy That Bird!", "Delicious Gems!", "More Score!", "Late Night!", "Bird Spree!", "Gadget Packet!", "Fire Phoenix!", "Gadget Spree!", "Sold Out!"],
    lateNightAchieveCount = 0,
    birdSpreeCount = 0,
    GadgetSpreeCount = 0,
    BuyEverythingCount = 0;

var 
    achievementsX = [],
    achievementsY = [];

var cursorLoad = 0;

//allows you to use click or arrow key
var pressed_or_upAroowkey = false;

//particle styles
var particleSpecial = function(x, y, s, style){
    
    switch(style)
    {
        
        case "ninja":
        fill(150, 150, 150);
        arc(x + s * 1.05, y - s / 2, s * 2, s * 2, 103, 134);
        arc(x, y + s * 1.5, s * 2, s * 2, 103 + 180, 134 + 180);
        arc(x - s / 2, y - s / 50, s * 2, s * 2, 103 + 180 + 90, 134 + 180 + 90);
        arc(x + s * 1.5, y + s * 1.1, s * 2, s * 2, 103 + 180 + 90 + 180, 134 + 180 + 90 + 180);
            break;
        
        case "robot":
        
        if(scene === "game")
        {
            noFill();
            stroke(0, 100 + random(0, 200), 255);
            strokeWeight(2);
            
            beginShape();
            vertex(x - s * 2, y);
            vertex(x - s, y + random(-s, s));
            vertex(x - s / 6, y + random(-s, s));
            vertex(x + s / 6, y + random(-s, s));
            vertex(x + s, y + random(-s, s));
            vertex(x + s * 2, y);
            endShape();
            
            noStroke();
        }
        
        if(scene === "store_bird")
        {
            noFill();
            stroke(0, 118, 235);
            strokeWeight(2);
            
            beginShape();
            vertex(x - s * 2, y);
            vertex(x - s, y + s / 2);
            vertex(x - s / 6, y  - s / 3);
            vertex(x + s / 6, y + s);
            vertex(x + s, y - s);
            vertex(x + s * 2, y);
            endShape();
            
            noStroke();
        }
        
            break;
            
        case "unicorn":
        fill(255, 0, 0);
        rect(x, y - s / 1.7, s, s / 6);
        fill(255, 149, 0);
        rect(x, y - s / 2, s, s / 6);
        fill(255, 208, 0);
        rect(x, y - s / 3, s, s / 6);
        fill(102, 255, 0);
        rect(x, y - s / 5, s, s / 6);
        fill(0, 187, 255);
        rect(x, y - s / 30, s, s / 6);
        fill(255, 0, 230);
        rect(x, y + s / 10, s, s / 6);
            break;
            
        case "alien":
        
        fill(34, 255, 0);
        ellipse(x, y, s, s);
        
        fill(183, 0, 255, 200);
        ellipse(x, y, s * 1.5, s / 2);
        
        fill(34, 255, 0);
        ellipse(x, y - s / 10, s, s / 2);
            break;
            
        case "wizard":
            
            fill(255, 204, 0, 150);
    beginShape();vertex(x, y - s / 1.5);vertex(x + s / 3, y + s / 2.5);vertex(x, y + s / 5);vertex(x - s / 3, y + s / 2.5);endShape();beginShape();vertex(x - s / 2, y - s / 3);vertex(x, y + s / 7);vertex(x + s / 2, y - s / 3);endShape();
    noStroke();
            
            break;
            
        case "reaper":
            
            
            fill(0, 0, 0, 200);
            ellipse(x, y - s / 5, s, s);
            ellipse(x - s / 3, y + s / 5, s, s);
            ellipse(x + s / 3, y + s / 5, s, s);
            
            break;
            
        case "carissa":
            
            fill(133, 130, 133);
            ellipse(x, y, s * 1.2, s * 1.2);
            
            fill(173, 173, 173);
            ellipse(x, y, s, s);
            
            image(getImage("space/5"), x - s / 4, y - s / 3, s / 1.5, s / 1.5);
            
            break;
            
        case "vampire":
            
            fill(0, 0, 0);
            
            beginShape();
            vertex(x, y - s / 3.0);
            vertex(x + s / 7.7, y - s / 3.3);
            vertex(x + s / 4.8, y - s / 2.2);
            vertex(x + s / 4.0, y - s / 5.3);
            vertex(x + s / 2.1, y - s / 3.9 + sin(frameCount * 20) * s / 3);
            vertex(x + s / 1.5, y - s / 2.7 + sin(frameCount * 20) * s / 3);
            vertex(x + s / 1.3, y - s / 1.7 + sin(frameCount * 20) * s / 3);
            vertex(x + s / 0.9, y - s / 2.3 + sin(frameCount * 20) * s / 3);
            vertex(x + s / 1.1, y - s / 3.3 + sin(frameCount * 20) * s / 3);
            vertex(x + s / 1.2, y - s / 12.4 + sin(frameCount * 20) * s / 3);
            vertex(x + s / 1.7, y - s / 12.4 + sin(frameCount * 20) * s / 3);
            vertex(x + s / 3.2, y + s / 11.7);
            vertex(x, y + s / 2.1);
            vertex(x - s / 3.2, y + s / 11.7);
            vertex(x - s / 1.7, y - s / 12.4 + sin(frameCount * 20) * s / 3);
            vertex(x - s / 1.2, y - s / 12.4 + sin(frameCount * 20) * s / 3);
            vertex(x - s / 1.1, y - s / 3.3 + sin(frameCount * 20) * s / 3);
            vertex(x - s / 0.9, y - s / 2.3 + sin(frameCount * 20) * s / 3);
            vertex(x - s / 1.3, y - s / 1.7 + sin(frameCount * 20) * s / 3);
            vertex(x - s / 1.5, y - s / 2.7 + sin(frameCount * 20) * s / 3);
            vertex(x - s / 2.1, y - s / 3.9 + sin(frameCount * 20) * s / 3);
            vertex(x - s / 4.0, y - s / 5.3);
            vertex(x - s / 4.8, y - s / 2.2);
            vertex(x - s / 7.7, y - s / 3.3);
            vertex(x, y - s / 3.0);
            endShape();
            
            noStroke();
            
            break;
            
        case "fairy":
            
        fill(252, 138, 252);
        beginShape();vertex(x, y - s / 1.5);vertex(x + s / 3, y + s / 2.5);vertex(x, y + s / 5);vertex(x - s / 3, y + s / 2.5);endShape();beginShape();vertex(x - s / 2, y - s / 3);vertex(x, y + s / 7);vertex(x + s / 2, y - s / 3);endShape();
        
        beginShape();
        vertex(x - s / 3.5, y - s / 2.0);
        vertex(x, y - s / 3.0);
        vertex(x + s / 3.5, y - s / 2.0);
        vertex(x + s / 5.0, y - s / 4.0);
        vertex(x + s / 2.3, y + s / 5.5);
        vertex(x, y - s / 18.2);
        vertex(x - s / 2.3, y + s / 5.5);
        vertex(x - s / 5.0, y - s / 4.0);
        endShape();
        noStroke();
            
            break;
            
        case "dragon":
            
        fill(s * 3, 0, 0, 22);
        ellipse(x, y - s / 5, s, s);
        ellipse(x - s / 2, y + s / 5, s, s);
        ellipse(x + s / 2, y + s / 5, s, s);
        ellipse(x, y + s / 2, s, s);
        ellipse(x - s / 1.5, y + s / 2, s, s);
        ellipse(x - s / 1.5, y - s / 4, s, s);
        ellipse(x - s / 0.9, y - s / 129, s, s);
        
            break;
            
        case "blackhole":
            
        fill(0, 0, 0, 100);
        ellipse(x, y, s, s);
        ellipse(x, y, s / 1.5, s / 1.5);
        ellipse(x, y, s / 3, s / 3);
        
        fill(255, 255, 255);
        pushMatrix();
        translate(x, y);
        rotate(frameCount % 380 * 3);
        ellipse(0, s / 3, s / 9, s / 9);
        rotate(frameCount % 380 * 3);
        ellipse(0, s / 3, s / 9, s / 9);
        popMatrix();
        pushMatrix();
        translate(x, y);
        rotate(frameCount % 380 * 9);
        ellipse(0, s / 5, s / 9, s / 9);
        popMatrix();
        pushMatrix();
        translate(x, y);
        rotate(frameCount % 380 * 15);
        ellipse(0, s / 15, s / 9, s / 9);
        popMatrix();
        
            break;
            
        case "pheonix":
            
            fill(255, 135, 0, random(50, 75));
            ellipse(x, y - s / 5, s, s);
            fill(255, 135, 0, random(50, 75));
            ellipse(x - s / 3, y + s / 5, s, s);
            fill(255, 135, 0, random(50, 75));
            ellipse(x + s / 3, y + s / 5, s, s);
            
            break;
    }
    
};

//background vars
var
    darkForestCloudsX = [400, 400],
    darkForestCloudsY = [random(0, 375), random(0, 375)],
    darkForestCloudsS = [random(1, 2), random(1, 2)];
    
//bubble positioins and sizes
var bubbleX = [88,54,161,196,127,115,92,246,106,59,148,49,34,23,29,262,227,228,288,334,282,301,93,81,20,132,269,210];
var bubbleSpeed = [0, 10, 10, 10, 35, 50, 120, 150, 200, 225, 230, 250, 300];
var bubbleY = [89,229,134,296,297,234,279,297,342,130,50,331,355,266,35,82,222,352,351,218,200,96,50,165,107,53,162,51];
var bubbleSize = [10,6,19,7,10,6,19,6,16,7,8,13,13,16,7,9,6,9,15,9,11,11,6,18,10,8,15,18];

//for fire background
var fireGravity = 0.08;

var fireSpeed = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],fireFilter=[5, 30, 55, 80, 255, 355, 405, 505, 705, 905, 930, 1005, 1205, 1305, 1405, 1505],fireGoBackOnTop = [1000, 7000, 10000],fireSpeed_gravity = [fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity, fireGravity];

var sceneTimerState = false;

var deadContinuePopUp = true, deadContinuePopUpAnim = -300, deadContinuePopUpPrice = 30, deadContinuePopUpTimerOffset = 0, deadContinuePopUpTimer = 0, deadContinuePopUpArcTimer = 360;

var menuFluidMotionSpeed = 1.2;

//background assets
var backgroundSpecialAssets = function(x, y, w, h, style, c, c2, r){
    
    switch(style)
    {
        case "dark_forest":
        fill(10, 10, 10);
        ellipse(x, y - h / 5, w, h);
        ellipse(x - w / 3, y + h / 5, w, h);
        ellipse(x + w / 3, y + h / 5, w, h);
            break;
            
        case "wizard":
            fill(255, 204, 0);
    beginShape();vertex(x, y - h / 1.5);vertex(x + w / 3, y + h / 2.5);vertex(x, y + h / 5);vertex(x - w / 3, y + h / 2.5);endShape();beginShape();vertex(x - w / 2, y - h / 3);vertex(x, y + h / 7);vertex(x + w / 2, y - h / 3);endShape();
    noStroke();
            break;
        
        case "wizard 2":
            fill(173, 159, 173);
            ellipse(x, y - h / 5, w, h);
            ellipse(x - w / 3, y + h / 5, w, h);
            ellipse(x + w / 3, y + h / 5, w, h);
            break;
            
        case "wizard 3":
            fill(255, 255, 255, 40);
            ellipse(x, y, w * 1.3, h * 1.3);
            fill(255, 255, 255, 150);
            ellipse(x, y, w, h);
            break;
            
        case "alien":
            pushMatrix();
            translate(x, y);
            rotate(r);
            fill(c);
            ellipse(0, 0, w, h);
            
            fill(c2);
            ellipse(0, 0, w * 1.5, h / 2);
            
            fill(c);
            ellipse(0, 0 - h / 10, w, h / 2);
            popMatrix();
            noFill();
            break;
            
        case "robot":
            noStroke();
            pushMatrix();
            translate(x, y);
            rotate(r);
            ellipse(0, 0, w, h);
            fill(43, 43, 43);
            ellipse(0, 0, w, h);
            noFill();
            
            fill(255, 0, 0, 50);
            ellipse(0 + w / 6.65, 0 + h / 5.43, w / 3.02, h / 3.02);
            fill(255, 0, 0, 30);
            ellipse(0 + w / 6.65, 0 + h / 5.43, w / 2.62, h / 2.62);
            
            fill(0, 0, 0);
            ellipse(0 - w * 0.17, 0 - h * 0.00, w / 41.7, h / 1.03);
            ellipse(0 - w * -0.37, 0 - h * 0.00, w / 63.3, h / 1.49);
            ellipse(0 - w * 0.01, 0 - h * -0.01, w / 1.01, h / 41.7);
            
            ellipse(0 - w * 0.00, 0 - h * -0.15, w / 1.03, h / 41.7);
            fill(255, 0, 0, 250);
            ellipse(0 + w / 6.65, 0 + h / 5.43, w / 3.90, h / 3.90);
            ellipse(0 + w / 5.95, 0 + h / 4.87, w / 10, h / 10);
            popMatrix();
            noStroke();
            break;
            
        case "fairy":
            pushMatrix();
            translate(x, y);
            rotate(r);
            fill(c2);
            ellipse(0, 0, w * 1.3, h * 1.3);
            fill(c);
            ellipse(0, 0, w, h);
            popMatrix();
            break;
            
        case "enterprize":
            strokeWeight(w / 400);
            fill(150, 150, 150);
            rect(x - w / 17.0 - 1.2 , y + h / 2.96, w / 2.3 - 1.2, h / 7.4 - 1.2, 789);
            fill(204, 63, 63);
            ellipse(x + w / 2.8 - 1.2, y + h / 2.41 - 1.2, w / 21.7 - 1.2, h / 7.2 - 1.2);
            
            fill(150, 150, 150);
            
            beginShape();
            vertex(x + w / 5.35, y + h / 1.30);
            vertex(x + w / 4.52, y + h / 2.16);
            vertex(x + w / 3.54, y + h / 2.16);
            vertex(x + w / 4.08, y + h / 1.30);
            endShape();
            
            
            fill(150, 150, 150);
            ellipse(x + w / 1.8, y + h / 1.21, w / 9.0, h / 4.4);
            rect(x, y + h / 1.45, w / 1.7, h / 3.7, 789);
            
            beginShape();
            vertex(x + w / 2.59, y + h / 1.42);
            vertex(x + w / 1.99, y + h / 2.32);
            vertex(x + w / 1.65, y + h / 2.32);
            vertex(x + w / 2.08, y + h / 1.42);
            endShape();
            
            
            beginShape();
            vertex(x + w / 5.85, y + h / 1.30);
            vertex(x + w / 9.52, y + h / 2.16);
            vertex(x + w / 6.29, y + h / 2.16);
            vertex(x + w / 4.35, y + h / 1.30);
            endShape();
            
            fill(150, 150, 150);
            rect(x - w / 6.3, y + h / 3.16, w / 2.3, h / 7.4, 789);
            fill(204, 63, 63);
            ellipse(x + w / 3.7, y + h / 2.51, w / 21.7, h / 7.2);
            
            textSize(w / 22);
            fill(0, 0, 0);
            text("ncc-1701", x - w / 31.8, y + h / 2.3);
            
            fill(196, 58, 58);
            noStroke();
            rect(x + w / 2.67, y + h / 1.21, w / 7, h / 18.1);
            rect(x + w / 3.12, y + h / 1.19, w / 7, h / 30.1);
            rect(x - w / 11.40, y + h / 2.60, w / 20, h / 20.6);
            rect(x + w / 6.05, y + h / 2.60, w / 20, h / 20.6);
            stroke(0);
            
            noFill();
            arc(x + w / 4.17, y + h / 1.73, w / 22, h / 2, 221, 284);
            arc(x + w / 3.10, y + h / 1.67, w / 22, h / 2, 225, 272);
            
            arc(x - w / 10.12, y + h / 2.56, w / 22, h / 7, 116, 226);
            
            pushMatrix();
            translate(x + w / w / 10, 0);
            fill(255, 255, 255);
            ellipse(0 + w / 1.57, y + h / 4.71, w / 22.1, h / 20.5);
            fill(255, 255, 255);
            ellipse(0 + w / 1.54, y + h / 2.04, w / 19.3, h / 19.8);
            
            fill(150, 150, 150);
            ellipse(0 + w / 1.57, y + h / 4.02, w / 14.6, h / 15.2);
            ellipse(0 + w / 1.58, y + h / 3.14, w / 7.0, h / 7.6);
            ellipse(0 + w / 1.52, y + h / 2.73, w / 3.3, h / 8.3);
            ellipse(0 + w / 1.50, y + h / 2.38, w / 4.6, h / 7.6);
            
            beginShape();
            vertex(0 + w / 2.32, y + h / 2.31);
            vertex(0 + w / 2.40, y + h / 2.86);
            vertex(0 + w / 1.10, y + h / 2.86);
            vertex(0 + w / 1.13, y + h / 2.41);
            vertex(0 + w / 2.32, y + h / 2.30);
            endShape();
            
            
            popMatrix();
            fill(232, 221, 7);
            rect(x + w / 3.47,  y + h / 1.20, w / 100, h / 20);
            rect(x + w / 3.76,  y + h / 1.20, w / 100, h / 20);
            rect(x + w / 4.07,  y + h / 1.20, w / 100, h / 20);
            noStroke();
            break;
            
        case "tartis":
                pushMatrix();
                translate(0, 0);
                rotate(r);
                rect(x + w / 2.309, y - h / 5.58, w / 115.8, h / 10.5);
                rect(x + w / 2.1079, y - h / 5.68, w / 115.8, h / 10.5);
                rect(x + w / 1.911, y - h / 5.58, w / 115.8, h / 10.5);
                rect(x + w / 2.552, y - h / 8.69, w / 5.7, h / 29.9);
                noStroke();
                fill(12, 63, 204);
                rect(x - w / 10.22, y - h / h, w * 1.2, h / 10.43);
                rect(x - w / 25.44, y - h / h * 4.7 , w * 1.085, h / 15.94);
                rect(x + w / 34.49, y - h / h * 11.8 , w * 0.937, h / 15.94);
                rect(x + w / 7.79, y - h / h * 18.9 , w * 0.719, h / 15.94);
                
                rect(x, y, w, h);
                
                beginShape();
                vertex(x - w / 16.05, y + h / 0.945);
                vertex(x - w / w * 0.28, y + h / 1.09);
                vertex(x + w * 0.975, y + h / 1.09);
                vertex(x + w / 0.94, y + h / 0.945);
                endShape();
                stroke(0, 0, 0);
                rect(x + w / 13.22, y + h / 8.93, w / 1.2, h / 1.2);
                rect(x + w / 2.1454, y + h / 8.93, w / 48.4, h / 1.2);
                
                rect(x + w / 6.22, y + h / 2.50, w / 3.5, h / 7);
                rect(x + w / 6.22, y + h / 1.80, w / 3.5, h / 7);
                rect(x + w / 6.22, y + h / 1.40, w / 3.5, h / 7);
                rect(x + w / 1.99, y + h / 2.50, w / 3.5, h / 7);
                rect(x + w / 1.99, y + h / 1.80, w / 3.5, h / 7);
                rect(x + w / 1.99, y + h / 1.40, w / 3.5, h / 7);
                
                fill(0, 0, 0);
                stroke(0, 119, 255);
                rect(x + w / 13.22, y - h / 10000000.08, w / 1.2, h / 10.5);
                
                fill(255, 255, 255, 150);
                rect(x + w / 1.37, y + h / 7.08, w / 11.0, h / 10.5);
                rect(x + w / 1.37, y + h / 4.12, w / 11.0, h / 10.5);
                rect(x + w / 1.60, y + h / 7.08, w / 11.0, h / 10.5);
                rect(x + w / 1.60, y + h / 4.12, w / 11.0, h / 10.5);
                rect(x + w / 1.88, y + h / 7.08, w / 11.0, h / 10.5);
                rect(x + w / 1.88, y + h / 4.12, w / 11.0, h / 10.5);
                
                rect(x + w / 2.96, y + h / 7.08, w / 11.0, h / 10.5);
                rect(x + w / 2.96, y + h / 4.12, w / 11.0, h / 10.5);
                rect(x + w / 4.20, y + h / 7.08, w / 11.0, h / 10.5);
                rect(x + w / 4.20, y + h / 4.12, w / 11.0, h / 10.5);
                rect(x + w / 7.06, y + h / 7.08, w / 11.0, h / 10.5);
                rect(x + w / 7.06, y + h / 4.12, w / 11.0, h / 10.5);
                
                fill(255, 255, 255);
                rect(x + w / 1.84, y + h / 2.38, w / 5.8, h / 7.3);
            
                noStroke();
                popMatrix();
                break;
    }
};

var colorGem = color(6, 186, 36);
var colorGem2 = color(255, 136, 0);
var colorGem3 = color(255, 0, 0);
var emeraldBackgroundGem = function(x, y, s, r, c){
    
    pushMatrix();
    
    translate(x, y);
    
    rotate(r);
    
    emeraldGem(0, 0, s, c);
    
    popMatrix();
};

//different particle styles
var particleStyle = function(x, y, w, h, style){
    
    rectMode(CENTER);
    
    switch(style)
    {
        case "blue":
            
            fill(0, 153, 255, 150);
            rect(x, y, w, h);
            
            break;
        
        case "black":
            
            fill(0, 0, 0, 150);
            rect(x, y, w, h);
            
            break;
            
        case "green":
            
            fill(33, 179, 0, 200);
            ellipse(x, y, w, h);
            
            break;
            
        case "red":
            
            fill(255, 0, 0);
            rect(x, y, w, h, w / 3);
            
            break;
            
        case "ninja":
            
            particleSpecial(x, y, w, "ninja");
            
            break;
            
        case "robot":
            
            particleSpecial(x, y, w, "robot");
            
            break;
        
        case "unicorn":
            
            particleSpecial(x, y, w * 2, "unicorn");
            
            break;
            
        case "alien":
            
            particleSpecial(x, y, w * 2, "alien");
            
            break;
            
        case "wizard":
            
            particleSpecial(x, y, w * 3.5, "wizard");
            
            break;
            
        case "reaper":
            
            particleSpecial(x, y, w * 2, "reaper");
            
            break;
            
        case "carissa":
            
            particleSpecial(x, y, w * 2, "carissa");
            
            break;
            
        case "vampire":
            
            particleSpecial(x, y, w * 1.5, "vampire");
            
            break;
            
        case "fairy":
            
            particleSpecial(x, y, w * 2.5, "fairy");
            
            break;
            
        case "dragon":
            
            particleSpecial(x, y, w * 1.7, "dragon");
            
            break;
            
        case "blackhole":
            
            particleSpecial(x, y, w * 3.5, "blackhole");
            
            break;
            
        case "pheonix":
            
            particleSpecial(x, y, w * 2.4, "pheonix");
            
            break;
    }
    rectMode(0);
};

//special bird graphics
var specialBirdAsset = function(x, y, s, style){
    
    rectMode(CENTER);
    
    switch(style)
    {
        case "wizard":
            
            fill(255, 204, 0, 100);
    beginShape();vertex(x, y - s / 1.5);vertex(x + s / 3, y + s / 2.5);vertex(x, y + s / 5);vertex(x - s / 3, y + s / 2.5);endShape();beginShape();vertex(x - s / 2, y - s / 3);vertex(x, y + s / 7);vertex(x + s / 2, y - s / 3);endShape();
    noStroke();
            
            break;
            
        case "fairy":
            
        fill(250, 110, 250);
        beginShape();vertex(x, y - s / 1.5);vertex(x + s / 3, y + s / 2.5);vertex(x, y + s / 5);vertex(x - s / 3, y + s / 2.5);endShape();beginShape();vertex(x - s / 2, y - s / 3);vertex(x, y + s / 7);vertex(x + s / 2, y - s / 3);endShape();
        
        beginShape();
        vertex(x - s / 3.5, y - s / 2.0);
        vertex(x, y - s / 3.0);
        vertex(x + s / 3.5, y - s / 2.0);
        vertex(x + s / 5.0, y - s / 4.0);
        vertex(x + s / 2.3, y + s / 5.5);
        vertex(x, y - s / 18.2);
        vertex(x - s / 2.3, y + s / 5.5);
        vertex(x - s / 5.0, y - s / 4.0);
        endShape();
        noStroke();
            
            break;
            
        case "fairy 2":
            
        stroke(0, 0, 0);
        strokeWeight(s / 30);
        noFill();
        line(x, y, x + s / 7.0, y - s / 1.5);
        ellipse(x + s / 3.2, y - s / 1.6, s / 3, s / 3);
        ellipse(x + s / 3.2, y - s / 1.75, s / 5, s / 5);
        noStroke();
            
            break;
            
        case "fairy 3":
            
        stroke(0, 0, 0);
        strokeWeight(s / 30);
        noFill();
        line(x, y, x + s / 7.0, y - s / 1.5);
        ellipse(x - s / 44.1, y - s / 1.4, s / 3, s / 3);
        ellipse(x - s / 23.2, y - s / 1.50, s / 5, s / 5);
        noStroke();
            
            break;
            
        case "dragon":
            
        fill(0, 0, 0, 80);
        ellipse(x, y, s, s);
            
            break;
    }
    
    rectMode(0);
};

//bird styles
var birdStyle = function(x, y, w, h, r, style){
    
    rectMode(CENTER);
    
    switch(style)
    {
        case "blue":
            
            styles = "blue";
            
            pushMatrix();
            translate(x, y);
            rotate(r);
            
            fill(60, 0, 255);
            arc(-w / 4, -h / 1.4, w, h / 1.5, 90, 109);
            arc(-w / 11, -h / 1.3, w, h, 90, 119);
            
            fill(0, 170, 255);
            rect(0, 0, w, h);
            
            fill(255, 255, 255);
            ellipse(w / 5, h / 5, w / 3, h / 3);
            
            fill(0, 0, 0);
            ellipse(w / 5.0, h / 4.5, w / 6, h / 6);
            
            
            fill(255, 183, 0);
            arc(0, h / 2, w / 1.5, h / 2, 0, 90);
            fill(255, 119, 0);
            arc(0, h / 2, w / 2, h / 3, 90, 180);
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap);
            }
            
            fill(0, 123, 255);
            arc(0, 0, w / 1.5, h / 1.3, 180, 180 + 90);
            
            popMatrix();
            
            break;
            
        case "white":
            
            pushMatrix();
            translate(x, y);
            rotate(r);
            
            fill(255, 255, 255);
            arc(-w / 4, -h / 1.4, w, h / 1.5, 90, 109);
            arc(-w / 11, -h / 1.3, w, h, 90, 119);
            rect(0, 0, w, h);
            ellipse(w / 5, h / 5, w / 3, h / 3);
            arc(0, h / 2, w / 1.5, h / 2, 0, 90);
            arc(0, h / 2, w / 2, h / 3, 90, 180);
            
            fill(0, 179, 255);
            arc(0, 0, w / 1.5, h / 1.3, 180, 180 + 90);
            ellipse(w / 5.0, h / 4.5, w / 6, h / 6);
            
            
            popMatrix();
            
            break;
            
        case "blackToucan":
            
            styles = "black";
            
            pushMatrix();
            translate(x, y);
            rotate(r);
            
            fill(0, 0, 0);
            arc(-w / 4.3, -h / 2.5, w / 2, h / 1.5, 180, 180 + 90);
            
            fill(0, 0, 0);
            rect(0, 0, w, h);
            
            fill(214, 214, 214);
            rect(w / 4.0, h / 4, w / 2, h / 2);
            
            fill(0, 0, 0);
            ellipse(w / 4, h / 4, w / 4, h / 4);
            
            fill(255, 255, 255);
            ellipse(w / 4.0, h / 3.3, w / 10, h / 10);
            
            
            fill(255, 119, 0);
            arc(w / 15, h / 2, w / 3, h / 1.2, 90, 180);
            fill(255, 183, 0);
            arc(0, h / 2, w / 1.0, h, 0, 90);
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap);
            }
            
            fill(214, 214, 214);
            arc(0, 0, w / 2, h / 1.3, 180, 180 + 90);
            
            popMatrix();
            
            break;
            
        case "green":
            
            styles = "green";
            
            pushMatrix();
            translate(x, y);
            rotate(r);
            
            fill(255, 64, 0);
            arc(w / 15, h / 2, w / 3, h / 1.2, 90, 180);
            fill(255, 123, 0);
            arc(0, h / 2, w / 1.0, h, -90, 63);
            
            fill(7, 199, 0);
            arc(-w / 4.3, -h / 2.5, w / 2, h / 1.5, 0, 180 + 75);
            ellipse(0, 0, w * 1.2, h * 1.2);
            
            fill(0, 0, 0);
            ellipse(w / 4, h / 4, w / 4, h / 4);
            
            fill(255, 255, 255);
            ellipse(w / 4.0, h / 3.3, w / 10, h / 10);
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap);
            }
            
            fill(251, 255, 0);
            arc(0, 0, w / 1.5, h / 1.2, 168, 165 + 90);
            
            popMatrix();
            
            break;
            
        case "boombitbird":
            
            styles = "red";
            
            pushMatrix();
            translate(x, y);
            rotate(r);
            
            fill(255, 0, 0);
            arc(-w / 1.2, -h / 2.1, w / 1, h / 1, 360, 180 + 224);
            arc(w / 2.0, -h / 1.15, w / 1, h / 1, 360 + 90, 180 + 303);
            arc(w / 3.3, -h / 1.35, w / 1, h / 1, 360 + 90, 180 + 303);
            rect(0, 0, w, h);
            
            fill(0, 0, 0);
            ellipse(w / 4, h / 4, w / 4, h / 4);
            
            fill(255, 255, 255);
            ellipse(w / 4.0, h / 3.3, w / 10, h / 10);
            
            
            fill(255, 119, 0);
            arc(w / 15, h / 2, w / 1.9, h / 1.7, 90, 180);
            fill(255, 183, 0);
            arc(0, h / 2, w / 1.0, h, 0, 90);
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap);
            }
            
            fill(0, 170, 255);
            arc(0, 0, w / 1.5, h / 1.2, 180, 180 + 69);
            
            popMatrix();
            
            break;
            
        case "ninjabird":
            
            styles = "ninja";
            
            pushMatrix();
            translate(x, y);
            rotate(r);
            
            fill(255, 119, 0);
            arc(w / 15, h / 2, w / 3, h / 1.2, 90, 180);
            fill(255, 183, 0);
            arc(0, h / 2, w * 1.2, h, 0, 90);
            
            fill(0, 0, 0);
            arc(-w / 2, h / 2, w * 2.2, h * 2.2, -90, 0);
            
            fill(255, 0, 0);
            rect(w / 4, h / 5.5, w / 3.4, h / 1.5);
            arc(w / 10, -h / 7, w / 1.7, h / 1.8, -90, 0);
            arc(w / 8, -h / 4, w / 1.7, h / 1.8, -99, -73);
            arc(w / 4, -h / 5, w / 1.7, h / 1.8, -94, -67);
            
            fill(0, 0, 0);
            ellipse(w / 4, h / 3, w / 5, h / 5);
            
            fill(255, 255, 255);
            ellipse(w / 4.0, h / 2.7, w / 10, h / 10);
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap);
            }
            
            fill(69, 69, 69);
            arc(0, 0, w / 2, h / 1.2, 180, 180 + 90);
            
            popMatrix();
            
            
            break;
            
        case "robot":
            
            styles = "robot";
            
            pushMatrix();
            translate(x, y);
            rotate(r);
            
            fill(64, 64, 64);
            rect(w / 4, 0, w, h / 10);
            
            fill(64, 64, 64);
            arc(-w / 4, -h / 1.4, w, h / 1.5, 90, 109);
            arc(-w / 11, -h / 1.3, w, h, 90, 119);
            
            fill(99, 99, 99);
            rect(0, 0, w, h);
            
            fill(0, 0, 0);
            rect(w / 5, h / 5, w / 3, h / 3);
            ellipse(w / 1.2, 0, w / 4, h / 4);
            
            fill(255, 0, 0);
            rect(w / 5.0, h / 3.6, w / 6, h / 6);
            
            
            fill(0, 0, 0);
            arc(0, h / 2, w, h / 1.5, 0, 90);
            fill(51, 51, 51);
            arc(0, h / 2, w / 2, h / 2, 90, 180);
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap);
            }
            
            fill(61, 61, 61);
            arc(-w / 10, h / 15, w / 2.1, h / 1.1, 180, 180 + 90);
            
            popMatrix();
            
            
            break;
            
        case "unicorn":
            
            styles = "unicorn";
            
            pushMatrix();
            translate(x, y);
            rotate(r);
            
            
            fill(255, 0, 251);
            arc(w, h / 2, w * 2, h * 2, 215 - 25, 224);
            fill(0, 170, 255);
            arc(w, h / 2, w * 2, h * 2, 215 - 20, 224);
            fill(4, 255, 0);
            arc(w, h / 2, w * 2, h * 2, 215 - 15, 224);
            fill(255, 230, 0);
            arc(w, h / 2, w * 2, h * 2, 215 - 10, 224);
            fill(255, 166, 0);
            arc(w, h / 2, w * 2, h * 2, 215 - 5, 224);
            fill(255, 0, 0);
            arc(w, h / 2, w * 2, h * 2, 215, 224);
            
            fill(224, 0, 0);
            arc(w / 15, h / 2, w / 3, h / 2, 119, 180);
            fill(255, 0, 0);
            arc(0, h / 2, w / 1.5, h / 2, -90, 77);
            
            fill(255, 0, 0);
            arc(-w / 4.3, -h / 2.5, w, h, 234, 177 + 75 + 30);
            fill(255, 128, 0);
            arc(-w / 4.3, -h / 2.5, w, h, 234 - 15, 177 + 75 - 15 + 30);
            fill(255, 238, 0);
            arc(-w / 4.3, -h / 2.5, w, h, 234 - 30, 177 + 75 - 30 + 30);
            fill(3, 255, 3);
            arc(-w / 4.3, -h / 2.5, w, h, 234 - 45, 177 + 75 - 45 + 30);
            fill(5, 188, 255);
            arc(-w / 4.3, -h / 2.5, w, h, 246 - 45 - 15, 177 + 75 - 45 - 15 + 30);
            fill(255, 5, 230);
            arc(-w / 4.3, -h / 2.5, w, h, 258 - 45 - 30, 177 + 75 - 45 - 30 + 30);
            
            fill(205, 245, 252);
            ellipse(0, 0, w * 1.2, h * 1.2);
            
            fill(0, 0, 0);
            ellipse(w / 4, h / 4, w / 4, h / 4);
            
            fill(255, 255, 255);
            ellipse(w / 4.0, h / 3.3, w / 10, h / 10);
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap);
            }
            
            fill(255, 0, 0);
            arc(0, 0, w / 1.5, h / 1.5, 208, 149 + 90);
            fill(255, 111, 0);
            arc(0, 0, w / 1.5, h / 1.5, 208, 137 + 90);
            fill(255, 242, 0);
            arc(0, 0, w / 1.2, h / 1.2, 186, 125 + 90);
            fill(0, 255, 34);
            arc(0, 0, w / 1.2, h / 1.2, 186, 113 + 90);
            fill(0, 132, 255);
            arc(0, 0, w, h, 162, 107 + 83);
            fill(221, 0, 255);
            arc(0, 0, w, h, 162, 92 + 83);
            
            popMatrix();
            
            
            break;
            
        case "alien":
            
            styles = "alien";
            
            pushMatrix();
            translate(x, y);
            rotate(r);
            
            fill(221, 0, 255);
            arc(w / 15, h / 2, w / 3, h / 2.3, 90, 180);
            fill(161, 2, 186);
            arc(0, h / 2, w / 1.2, h / 2, -90, 63);
            
            
            fill(13, 255, 0);
            arc(-w / 4.3, -h / 2.5, w / 2, h / 1.5, 0, 261 + 75);
            arc(w / 3.8, h / 23, w * 1.5, h * 1.5, -20 + 45 / 2 - 10, -10 + 45 / 2 - 10);
            arc(w / 3.8, h / 23, w * 1.5, h * 1.5, 4 + 45 / 2 - 8, 12 + 45 / 2 - 8);
            ellipse(w, h / 22, w / 3, h / 3);
            ellipse(w, h / 2.6, w / 3, h / 3);
            ellipse(0, 0, w * 1.2, h * 1.2);
            arc(w / 3.8, h / 23, w * 1.5, h * 1.5, -20 - 10, -10 - 10);
            ellipse(w, -h / 3, w / 3, h / 3);
            
            fill(255, 255, 255);
            ellipse(w, -h / 3, w / 4, h / 4);
            ellipse(w, h / 22, w / 4, h / 4);
            ellipse(w, h / 2.6, w / 4, h / 4);
            
            fill(0, 0, 0);
            ellipse(w, -h / 3.3, w / 6, h / 6);
            ellipse(w, h / 11.9, w / 6, h / 6);
            ellipse(w, h / 2.40, w / 6, h / 6);
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap);
            }
            
            fill(0, 181, 18);
            arc(w / 13, h / 25, w / 2.1, h / 1.2, 180, 180 + 90);
            popMatrix();
            
            break;
            
        case "wizard":
            
            styles = "wizard";
            
            pushMatrix();
            translate(x, y);
            rotate(r);
            
            fill(0, 49, 74);
            rect(0, 0, w, h);
            
            beginShape();
            vertex(-w / 2.0, -h / 2.0);
            vertex(-w / 2.3, -h / 1.5);
            vertex(-w / 3.1, -h / 1.2);
            vertex(-w / 3.2, -h / 1.5);
            vertex(-w / 5.3, -h / 2.0);
            endShape();
            
            noStroke();
            
            fill(255, 255, 255);
            ellipse(w / 5, h / 5, w / 2.9, h / 2.9);
            
            fill(0, 0, 0);
            ellipse(w / 5.0, h / 4.5, w / 5, h / 5);
            
            
            fill(255, 183, 0);
            arc(0, h / 2, w / 1.5, h / 1.5, 0, 90);
            fill(255, 119, 0);
            arc(0, h / 2, w / 2, h / 2, 90, 180);
            
            fill(189, 189, 189);
            
            beginShape();
            vertex(-w / 5.1, h / 1.7);vertex(-w / 2.7, h / 1.5);vertex(-w / 1.7, h / 1.6);vertex(-w / 1.3, h / 2.0);vertex(-w / 1.1, h / 1.7);vertex(-w / 1.2, h / 2.6);vertex(-w / 1.5, h / 3.4);vertex(-w / 2.1, h / 3.4);vertex(-w / 3.0, h / 3.9);vertex(-w / 4.3, h / 6.1);vertex(w / 25.7, -h / 58.4);vertex(w / 7.6, -h / 12.8);vertex(w / 3.8, -h / 10.9);vertex(w / 2.7, -h / 12.1);vertex(w / 2, -h / 12.1);vertex(w / 2.0, h / 24.0);vertex(w / 2.7, h / 37.3);vertex(w / 5.0, -h / 34.4);vertex(w / 16.9, h / 33.2);vertex(-w / 17.7, h / 4.4);vertex(-w / 9.9, h / 2.7);
            endShape();
            
            fill(99, 99, 99);
            beginShape();
            vertex(w / 15.8, h / 1.6);vertex(w / 34.2, h / 1.9);vertex(-w / 37.1, h / 2.3);vertex(w / 50, h / 3.1);vertex(w / 14.0, h / 2.3);vertex(w / 6.0, h / 1.9);vertex(w / 4.9, h / 1.7);vertex(w / 6.0, h / 1.5);vertex(w / 10.4, h / 1.4);
            endShape();
            
            
            fill(145, 145, 145);
            beginShape();
            vertex(w / 3.1, h / 16.9);vertex(w / 3.8, h / 2.8);vertex(w / 2.6, h / 2.8);vertex(w / 2.6, h / 4.0);vertex(w / 2.4, h / 4.9);vertex(w / 2.4, h / 8.1);vertex(w / 2.5, h / 21.9);
            endShape();
            
            //hat
            fill(0, 47, 255);
            ellipse(w / 2, 0, w / 7, h * 1.3);
            
            beginShape();
            vertex(w / 2.0, h / 2.7);vertex(w / 1.6, h / 3.1);vertex(w / 1.4, h / 3.8);vertex(w / 1.0, -h / 7.7);vertex(w / 1.0, -h / 4.7);vertex(w / 1.4, -h / 2.2);vertex(w / 1.2, -h / 4.6);vertex(w / 1.3, -h / 6.6);vertex(w / 1.6, -h / 3.9);vertex(w / 2.0, -h / 3.0);
            endShape();
            
            noStroke();
            
            specialBirdAsset(w / 3.2, -h / 3.3, w / 6, "wizard");
            specialBirdAsset(w / 6.2, -h / 4.7, w / 7, "wizard");
            specialBirdAsset(w / 8.2, -h / 2.7, w / 7, "wizard");
            specialBirdAsset(-w / 4.8, -h / 2.7, w / 7, "wizard");
            specialBirdAsset(-w / 3.5, h / 19.6, w / 7, "wizard");
            specialBirdAsset(-w / 3.8, -h / 6.0, w / 8, "wizard");
            specialBirdAsset(-w / 2.5, -h / 3.0, w / 8, "wizard");
            specialBirdAsset(-w / 2.8, -h / 1.8, w / 8, "wizard");
            specialBirdAsset(-w / 2.6, -h / 8.6, w / 8, "wizard");
            specialBirdAsset(-w / 2.4, h / 8.4, w / 8, "wizard");
            specialBirdAsset(-w / 8.4, -h / 17.1, w / 8, "wizard");
            specialBirdAsset(-w / 9.7, -h / 4.7, w / 8, "wizard");
            specialBirdAsset(-w / 29.2, -h / 2.8, w / 8, "wizard");
            specialBirdAsset(w / 39.7, -h / 7.9, w / 8, "wizard");
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap * 1.5);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap * 1.5);
            }
            
            fill(217, 217, 217);
            arc(0, 0, w / 4, h / 1.2, 180, 180 + 90);
            arc(-w / 10.4, 0, w / 4, h * 1.2, 180, 180 + 90);
            arc(-w / 4.8, 0, w / 4, h / 1.2, 180, 180 + 90 - 10);
            
            popMatrix();
            
            break;
            
        case "reaper":
            
            styles = "reaper";
            
            pushMatrix();
            translate(x, y);
            rotate(r);
            
            
            //beak
            fill(0, 0, 0);
            beginShape();
            vertex(w / 7, h / 2);vertex(w / 4.8, h / 1.5);vertex(w / 9.1, h / 1.2);vertex(-w / 9.4, h / 1.0);vertex(-w / 17.2, h / 1.2);vertex(-w / 63.9, h / 1.55);vertex(-w / 25.6, h / 1.71);endShape();
            
            beginShape();
            vertex(w / 48.0, h / 1.8);vertex(-w / 9.8, h / 1.4);vertex(-w / 10.1, h / 1.08);vertex(-w / 4.3, h / 1.4);vertex(-w / 4.2, h / 2.0);
            endShape();
            
            fill(23, 23, 23);
            ellipse(0, 0, w * 1.2, h * 1.2);
            
            noStroke();
            
            //eye
            fill(222, 4, 4);
            beginShape();vertex(w / 2.5, h / 11.3);vertex(w / 3.6, h / 2.8);vertex(w / 9.0, h / 2.8);vertex(w / 9.0, h / 9.6);endShape();
            
            fill(255, 0, 0);
            beginShape();vertex(w / 2.5, h / 11.3);vertex(w / 3.1, h / 5.2);vertex(w / 9.0, h / 4.2);vertex(w / 9.0, h / 9.6);endShape();
            noStroke();
            
            //hat & cloak
            fill(0, 0, 0);
            beginShape();vertex(w / 2.9, h / 1.6);vertex(w / 1.6, h / 3.1);vertex(w / 1.4, h / 3.8);vertex(w / 1.1, -h / 22.8);vertex(w / 1.0, -h / 4.6);vertex(w / 0.9, -h / 8.0);vertex(w / 0.8, -h / 2.2);vertex(w / 0.9, -h / 2.8);vertex(w / 1.1, -h / 2.1);vertex(w / 2.1, -h / 2.6);vertex(w / 18.4 + sin(frameCount * 4) * random(- w / 7, w / 7), -h / 1.1);vertex(w / 15.6, -h / 1.6);vertex(-w / 2.6 + sin(frameCount * 4) * random(- w / 7, w / 7), -h / 0.9);vertex(-w / 4.6, -h / 1.6);vertex(-w / 1.2 + sin(frameCount * 4) * random(- w / 7, w / 7), -h / 0.8);vertex(-w / 2.0, -h / 2.3);vertex(-w / 1.6, -h / 22.7);vertex(-w / 2.0, h / 2.4);vertex(-w / 3.5, h / 1.8);vertex(w / 32.4, h / 3.4);vertex(w / 12.6, h / 23.1);vertex(w / 2.5, h / 23.1);
            endShape();
            
            if(bird_leftOrRight >= 5)
            {
                rotate(30);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-30);
            }
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap * 1.5);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap * 1.5);
            }
            
            fill(176, 176, 176);
            arc(0, 0, w * 1.4, h * 1.4, 209, 129 + 90);
            arc(-w / 3.6, -h / 0.95, w * 1.6, h * 1.6, 474, 397 + 86);
            arc(-w / 4.8, -h / 1.3, w * 1.1, h * 1.1, 471, 389 + 90);
            arc(-w / 6.1, -h / 1.9, w / 1.5, h / 1.5, 471, 389 + 90);
            
            
            popMatrix();
            
            break;
            
        case "carissa":
            
            styles = "carissa";
            
            pushMatrix();
            translate(x, y);
            rotate(r);
            
            fill(217, 134, 9);
            arc(-w / 4, -h / 1.4, w, h / 1.5, 90, 109);
            arc(-w / 11, -h / 1.3, w, h, 90, 119);
            
            stroke(214, 214, 214);
            strokeWeight(w / 20);
            
            if(h > 1)
            {
                fill(255, 255, 255);
                rect(0, 0, w, h, w / 4);
            }
            
            if(h < 1)
            {
                fill(255, 255, 255);
                rect(0, 0, w, -h, w / 4);
            }
            
            stroke(84, 51, 1);
            fill(122, 62, 2);
            beginShape();
            vertex(w / 2.7, h / 2.0);
            vertex(w / 2.2, h / 3.8);
            vertex(w / 3.1, h / 26.7);
            vertex(w / 3.0, -h / 14.1);
            vertex(w / 5.0, -h / 4.9);
            vertex(w / 4.3, -h / 2.6);
            vertex(w / 9.2, -h / 2.0);
            vertex(w / 21.5, -h / 2.3);
            vertex(-w / 8.9, -h / 2.3);
            vertex(-w / 4.2, -h / 1.1);
            vertex(-w / 14.4, -h / 1.3);
            vertex(-w / 25.8, -h / 1.1);
            vertex(w / 11.2, -h / 1.2);
            vertex(w / 4.9, -h / 1.2);
            vertex(w / 3.2, -h / 1.4);
            vertex(w / 2.6, -h / 1.7);
            vertex(w / 1.9, -h / 2.1);
            vertex(w / 1.7, -h / 3.5);
            vertex(w / 1.9, -h / 8.8);
            vertex(w / 1.7, h / 8.8);
            vertex(w / 1.8, h / 3.1);
            vertex(w / 2.5, h / 2.0);
            endShape();
            
            noStroke();
            
            fill(0, 0, 0);
            ellipse(w / 5, h / 5, w / 5, h / 5);
            
            fill(255, 255, 255);
            ellipse(w / 5.1, h / 4.2, w / 10, h / 10);
            
            fill(166, 79, 3);
            arc(0, h / 2, w / 2, h / 3, 90, 180);
            fill(214, 111, 8);
            arc(0, h / 2, w / 1.5, h / 2, 0, 100);
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap);
            }
            
            fill(224, 122, 4);
            rect(-w / 5, -h / 8, w / 3.5, h / 2.0);
            fill(117, 52, 2, 100);
            ellipse(-w / 7.0, h / 25.0, w / 17, h / 17);
            ellipse(-w / 4.1, h / 25.0, w / 17, h / 17);
            ellipse(-w / 5.0, -h / 18.6, w / 17, h / 17);
            ellipse(-w / 7.0, -h / 7.6, w / 17, h / 17);
            ellipse(-w / 4.1, -h / 7.6, w / 17, h / 17);
            ellipse(-w / 5.0, -h / 4.6, w / 17, h / 17);
            ellipse(-w / 7.0, -h / 3.4, w / 17, h / 17);
            ellipse(-w / 4.1, -h / 3.4, w / 17, h / 17);
            ellipse(-w / 7.0, h / 25.0, w / 20, h / 20);
            ellipse(-w / 4.1, h / 25.0, w / 20, h / 20);
            ellipse(-w / 5.0, -h / 18.6, w / 20, h / 20);
            ellipse(-w / 7.0, -h / 7.6, w / 20, h / 20);
            ellipse(-w / 4.1, -h / 7.6, w / 20, h / 20);
            ellipse(-w / 5.0, -h / 4.6, w / 20, h / 20);
            ellipse(-w / 7.0, -h / 3.4, w / 20, h / 20);
            ellipse(-w / 4.1, -h / 3.4, w / 20, h / 20);
            
            popMatrix();
            
            
            break;
            
        case "vampire":
            
            styles = "vampire";
            
            pushMatrix();
            translate(x, y);
            rotate(r);
            strokeWeight(w / 25);
            
            //tooth
            fill(140, 140, 140);
            arc(-w / 22.0, h / 1.4, w / 2.5, h / 2.5, -6, 19);
            
            //beak
            fill(255, 64, 0);
            arc(w / 6.0, h / 3, w / 2, h / 1.2, 129, 180);
            fill(255, 119, 0);
            arc(w / 9.1, h / 3.5, w / 1.7, h, 0, 90);
            
            //body
            fill(66, 1, 66);
            if(h > 1)
            {
                rect(0, 0, w, h, w / 2);
            }
            
            if(h < 1)
            {
                rect(0, 0, w, -h, w / 2);
            }
            
            //cloak
            fill(0, 0, 0);
            beginShape();
            vertex(-w / 5.9, h / 2.0);vertex(-w / 3.5, h / 2.1);vertex(-w / 2.6, h / 2.5);vertex(-w / 2.1, h / 3.6);vertex(-w / 1.9, h / 9.6);vertex(-w / 1.9, -h / 9.6);vertex(-w / 1.6 + sin(frameCount * 3) * w / 15, -h / 2.9);vertex(-w / 1.4 - sin(frameCount * 3.5) * w / 25, -h / 1.6);vertex(-w / 1.4 + sin(frameCount * 5) * w / 15, -h / 1.1);vertex(-w / 1.8 + sin(frameCount * 4) * w / 20, -h / 1.4);vertex(-w / 2.5 + sin(frameCount * 3.5) * w / 15, -h / 1.6);vertex(-w / 3.9, -h / 1.7);vertex(w / 15.5, -h / 1.9);vertex(w / 3.4, -h / 2.2);vertex(w / 2.3, -h / 3.4);vertex(w / 1.9, -h / 13.8);vertex(w / 3.2, -h / 21.6);vertex(w / 5.5, h / 30.6);vertex(w / 23.3, h / 7.5);vertex(-w / 9.5, h / 3.5);vertex(-w / 6.8, h / 2.5);vertex(-w / 5.9, h / 2.0);
            endShape();
            
            
            fill(255, 0, 0);
            beginShape();
            vertex(-w / 5.8, h / 2.0);vertex(-w / 15.1, h / 4.2);vertex(w / 32.0, h / 10.1);vertex(w / 5.8, -h / 18.3);vertex(w / 3.3, -h / 4.5);vertex(w / 3.3, -h / 3.3);vertex(w / 4.8, -h / 2.7);vertex(w / 2.8, -h / 2.7);vertex(w / 2.1, -h / 4.6);vertex(w / 1.9, -h / 14.1);vertex(w / 3.1, -h / 37.3);vertex(w / 5.6, h / 17.8);vertex(w / 29.2, h / 5.2);
            endShape();
            
            //eye
            fill(255, 0, 0);
            ellipse(w / 4, h / 3, w / 5, h / 5);
            
            //eyebrow
            stroke(145, 145, 145);
            fill(66, 66, 66);
            beginShape();
            vertex(w / 3.6, h / 2.4);vertex(w / 2.8, h / 3.0);vertex(w / 2.8, h / 4.2);vertex(w / 2.5, h / 6.0);vertex(w / 2.5, h / 13.1);vertex(w / 2.3, h / 5.0);vertex(w / 2.5, h / 3.0);vertex(w / 2.8, h / 2.5);vertex(w / 3.6, h / 2.4);
            endShape();
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap);
            }
            
            //wing
            fill(112, 112, 112);
            stroke(112, 112, 112);
            beginShape();
            vertex(0, 0);vertex(-w / 11.0, -h / 5.7);vertex(-w / 2.8, -h / 2.5);vertex(w / 18.8, -h / 1.0);vertex(-w / 8.1, -h / 2.3);vertex(w / 12.7, -h / 1.7);vertex(-w / 18.3, -h / 3.4);vertex(w / 10.8, -h / 3.3);vertex(w / 38.0, -h / 6.2);
            vertex(0, 0);
            endShape();
            
            noStroke();
            
            popMatrix();
            
            break;
            
        case "fairy":
            
            styles = "fairy";
            
            pushMatrix();
            translate(x, y);
            rotate(r);
            
            fill(255, 64, 0);
            arc(w / 15, h / 2, w / 2.5, h / 1.9, 90, 180);
            fill(255, 123, 0);
            arc(0, h / 2.5, w / 1.5, h / 1.2, -90, 90);
            
            if(h >= 1)
            {
                rotate(131);
                specialBirdAsset(-w / 5.6, -h / 2, w / 1.5, "fairy 2");
                rotate(-131);
            }
            if(h <= -1)
            {
                rotate(37);
                specialBirdAsset(w / 6.4, h / 2, w / 1.5, "fairy 3");
                rotate(-37);
            }
            
            //body
            fill(211, 79, 255, 40);
            ellipse(0, 0, w * 1.5, h * 1.5);
            ellipse(0, 0, w * 1.7, h * 1.7);
            fill(202, 65, 252);
            ellipse(0, 0, w * 1.2, h * 1.2);
            
            //tail
            beginShape();
            vertex(-w  / 1.8, -h / 7.2);vertex(-w  / 1.7, -h / 3.3);vertex(-w  / 1.8, -h / 2.0);vertex(-w  / 2.1, -h / 1.3);vertex(-w  / 2.3, -h / 1.9);vertex(-w  / 2.8, -h / 2.2);vertex(-w  / 2.5, -h / 1.6);vertex(-w  / 2.6, -h / 1.3);vertex(-w  / 3.4, -h / 1.6);vertex(-w  / 5.4, -h / 1.8);vertex(-w  / 3.9, -h / 1.4);vertex(w  / 32.2, -h / 2.0);
            endShape();
            
            specialBirdAsset(w / 3.8, -h / 3.7, w / 5.0, "fairy");
            specialBirdAsset(w / 12.7, -h / 2.2, w / 7.0, "fairy");
            specialBirdAsset(w / 42.7, h / 3.5, w / 8.0, "fairy");
            specialBirdAsset(-w / 7.6, h / 2.6, w / 8.0, "fairy");
            specialBirdAsset(-w / 7.6, h / 5.4, w / 8.0, "fairy");
            
            stroke(0, 0, 0);
            noFill();
            strokeWeight(w / 20);
            arc(w / 4, h / 4.8, w / 4, h / 3, -60, 90);
            strokeWeight(w / 200);
            arc(w / 2.3, h / 23.1, w / 4, h / 3, -180, -130);
            arc(w / 2.6, -h / 37.3, w / 4, h / 3, -215, -125);
            arc(w / 3.2, -h / 19.7, w / 4, h / 3, -292, -150);
            
            noStroke();
            
            fill(255, 255, 255);
            ellipse(w / 4, h / 4, w / 4, h / 3);
            
            fill(0, 0, 0);
            ellipse(w / 4.0, h / 3.3, w / 5, h / 4.5);
            
            if(h >= 1)
            {
                rotate(105);
                specialBirdAsset(-w / 7.4, -h / 2, w / 1.5, "fairy 2");
                rotate(-105);
            }
            
            if(h <= -1)
            {
                rotate(57);
                specialBirdAsset(w / 5.8, h / 2, w / 1.5, "fairy 3");
                rotate(-57);
            }
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap);
            }
            
            if(h >= 1)
            {
                fill(252, 128, 248);
                rotate(72);
                ellipse(-w / 2.6, h / 24, w / 1.5, h / 2.7);
                fill(250, 145, 247);
                rotate(-42);
                ellipse(-w / 2.4, 0, w / 1.2, h / 2.2);
            }
            
            if(h <= 1)
            {
                fill(252, 128, 248);
                rotate(-72);
                ellipse(-w / 2.6, h / 24, w / 1.5, h / 2.7);
                fill(250, 145, 247);
                rotate(42);
                ellipse(-w / 2.4, 0, w / 1.2, h / 2.2);
            }
            
            popMatrix();
            noStroke();
            
            break;
            
        case "dragon":
            
            styles = "dragon";
            
            pushMatrix();
            translate(x, y);
            rotate(r);
            
            fill(252, 201, 81);
            beginShape();
            vertex(w / 2.0, -h / 2.3);
            vertex(w / 2.2, -h / 1.4);
            vertex(w / 3.1, -h / 1.1);
            vertex(w / 5.6, -h / 1.0);
            vertex(w / 3.9, -h / 1.3);
            vertex(w / 4.0, -h / 1.6);
            vertex(w / 6.0, -h / 2.3);
            endShape();
            
            noStroke();
            fill(8, 166, 45);
            if(h > 1)
            {
                rect(0, 0, w, h, w / 8);
            }
            
            if(h < 1)
            {
                rect(0, 0, w, -h, w / 8);
            }
            
            beginShape();
            vertex(-w / 2.0, -h / 2.3);
            vertex(-w / 2.2 + sin(frameCount * 3) * w / 15, -h / 1.4);
            vertex(-w / 2.0 - sin(frameCount * 5) * w / 20, -h / 1.0);
            vertex(-w / 2.5 + sin(frameCount * 5) * w / 20, -h / 0.8);
            vertex(-w / 2.6 - sin(frameCount * 5) * w / 20, -h / 1.0);
            vertex(-w / 3.8 + sin(frameCount * 3) * w / 15, -h / 1.4);
            vertex(-w / 7.3, -h / 2.3);
            endShape();
            
            fill(255, 170, 0);
            arc(-w / 2, h / 2, w / 1.9, h / 1.1, -89, 0);
            
            fill(214, 143, 0);
            rect(-w / 2.3, h / 3.6, w / 40, h / 2.3);
            rect(-w / 2.9, h / 3.2, w / 40, h / 2.7);
            
            fill(255, 251, 0, 70);
            arc(-w / 2, h / 2, w / 1.5, h / 0.9, -89, 0);
            arc(-w / 2, h / 2, w / 1.7, h / 1, -89, 0);
            
            specialBirdAsset(-w / 47.6, h / 3.6, w / 12, "dragon");
            specialBirdAsset(-w / 8.0, h / 2.5, w / 12, "dragon");
            specialBirdAsset(-w / 6.0, h / 5.4, w / 12, "dragon");
            
            stroke(250, 193, 50);
            strokeWeight(w / 46);
            fill(250, 193, 50);
            beginShape();
            vertex(w / 5.8, h / 3.2);
            vertex(w / 2.8, h / 3.8);
            vertex(w / 3.9, h / 4.3);
            vertex(w / 2.4, h / 9.4);
            vertex(w / 3.5, h / 7.0);
            vertex(w / 2.3, -h / 19.5);
            vertex(w / 3.5, h / 19.5);
            endShape();
            noStroke();
            
            fill(0, 0, 0);
            rotate(h / 2);
            ellipse(w / 3.4, h / 17.0, w / 7, h / 3);
            rotate(-h / 2);
            
            fill(255, 119, 0);
            beginShape();
            vertex(-w / 13.0, h / 2.0);
            vertex(-w / 36.0, h / 1.5);
            vertex(-w / 8.9, h / 1.4);
            vertex(-w / 3.7, h / 2.0);
            endShape();
            
            fill(255, 183, 0);
            beginShape();
            vertex(w / 3.6, h / 2.0);
            vertex(w / 12.1, h / 1.2);
            vertex(-w / 8.5, h / 1.2);
            vertex(-w / 3.4, h / 1.5);
            vertex(-w / 8.9, h / 1.4);
            vertex(-w / 36.0, h / 1.5);
            vertex(-w / 13.0, h / 2.0);
            endShape();
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap);
            }
            
            //wing
            stroke(224, 0, 0);
            strokeWeight(w / 15);
            fill(255, 0, 0);
            
            beginShape();
            vertex(-w / 9.7, -h / 24.1);
            vertex(-w / 2.4, -h / 2.4);
            vertex(-w / 4.0, -h / 1.0);
            vertex(-w / 3.9, -h / 1.2);
            vertex(-w / 3.8, -h / 1.4);
            vertex(-w / 5.2, -h / 1.6);
            vertex(-w / 4.3, -h / 1.9);
            vertex(-w / 4.4, -h / 2.4);
            vertex(-w / 6.7, -h / 2.9);
            vertex(-w / 6.1, -h / 4.1);
            vertex(-w / 6.6, -h / 6.1);
            vertex(-w / 9.7, -h / 24.1);
            endShape();
            noStroke();
            
            popMatrix();
            
            break;
            
        case "blackhole":
            
            styles = "blackhole";
            
            pushMatrix();
            translate(x, y);
            rotate(r);
            
            fill(0, 0, 0);
            ellipse(0, 0, w * 1.2, h * 1.2);
            arc(w / 15, h / 2, w / 2.5, h / 1.9, 90, 180);
            arc(0, h / 2.5, w / 1.5, h / 1.2, -90, 90);
            
            pushMatrix();
            translate(0, -h / 10);
            beginShape();
            vertex(-w / 2.0, -h / 4.9);
            vertex(-w / 2.2 + sin(frameCount * 3) * w / 15, -h / 1.4);
            vertex(-w / 2.0 - sin(frameCount * 5) * w / 20, -h / 1.0);
            vertex(-w / 2.5 + sin(frameCount * 5) * w / 20, -h / 0.8);
            vertex(-w / 2.6 - sin(frameCount * 5) * w / 20, -h / 1.0);
            vertex(-w / 3.8 + sin(frameCount * 3) * w / 15, -h / 1.4);
            vertex(-w / 7.3, -h / 2.3);
            endShape();
            popMatrix();
            
            pushMatrix();
            translate(w / 4, -h / 10);
            beginShape();
            vertex(-w / 2.0, -h / 2.3);
            vertex(-w / 2.2 - sin(frameCount * 3) * w / 11, -h / 1.4);
            vertex(-w / 2.0 + sin(frameCount * 5) * w / 12, -h / 1.0);
            vertex(-w / 2.5 - sin(frameCount * 5) * w / 12, -h / 0.8);
            vertex(-w / 2.6 + sin(frameCount * 5) * w / 12, -h / 1.0);
            vertex(-w / 3.8 - sin(frameCount * 3) * w / 11, -h / 1.4);
            vertex(-w / 7.3, +h / 2.3);
            endShape();
            popMatrix();
            
            pushMatrix();
            translate(w / 1.7, -h / 10);
            beginShape();
            vertex(-w / 2.0, -h / 2.3);
            vertex(-w / 2.2 + sin(frameCount * 6) * w / 13, -h / 1.4);
            vertex(-w / 2.0 - sin(frameCount * 3) * w / 18, -h / 1.0);
            vertex(-w / 2.5 + sin(frameCount * 3) * w / 18, -h / 0.8);
            vertex(-w / 2.6 - sin(frameCount * 3) * w / 18, -h / 1.0);
            vertex(-w / 3.8 + sin(frameCount * 6) * w / 13, -h / 1.4);
            vertex(-w / 7.3, -h / 3.1);
            endShape();
            popMatrix();
            
            pushMatrix();
            translate(w / 1.1, -h / 10);
            beginShape();
            vertex(-w / 2.0, -h / 2.9);
            vertex(-w / 2.2 - sin(frameCount * 5) * w / 10, -h / 1.4);
            vertex(-w / 2.0 + sin(frameCount * 7) * w / 15, -h / 1.0);
            vertex(-w / 2.5 - sin(frameCount * 7) * w / 15, -h / 0.8);
            vertex(-w / 2.6 + sin(frameCount * 7) * w / 15, -h / 1.0);
            vertex(-w / 3.8 - sin(frameCount * 5) * w / 10, -h / 1.4);
            vertex(-w / 2.9, h / 3.0);
            endShape();
            popMatrix();
            
            pushMatrix();
            
            if(h >= 5)
            {
                rotate(-32);
            }
            
            if(h <= -5)
            {
                rotate(32);
            }
            
            translate(w / 0.6, -h / 5);
            beginShape();
            vertex(-w / 0.6, h / 2.2);
            vertex(-w / 1.2 + sin(frameCount * 9) * w / 13, h / 4.1);
            vertex(-w / 1.6 - sin(frameCount * 9) * w / 15, h / 20.9);
            vertex(-w / 2.2 + sin(frameCount * 7) * w / 10, -h / 2.4);
            vertex(-w / 2.2 - sin(frameCount * 6) * w / 10, -h / 1.4);
            vertex(-w / 2.0 + sin(frameCount * 8) * w / 15, -h / 1.0);
            vertex(-w / 2.5 - sin(frameCount * 8) * w / 15, -h / 0.8);
            vertex(-w / 2.6 + sin(frameCount * 8) * w / 15, -h / 1.0);
            vertex(-w / 3.8 - sin(frameCount * 6) * w / 10, -h / 1.4);
            vertex(-w / 3.4 + sin(frameCount * 7) * w / 10, -h / 2.4);
            vertex(-w / 2.1 - sin(frameCount * 9) * w / 15, h / 20.9);
            vertex(-w / 1.6 + sin(frameCount * 9) * w / 13, h / 3.2);
            vertex(-w / 0.72, h / 1.4);
            endShape();
            popMatrix();
            
            fill(199, 248, 255, 40);
            ellipse(w / 4, h / 4, w / 4, h / 4);
            ellipse(w / 4, h / 4, w / 3, h / 3);
            ellipse(w / 4, h / 4, w / 2.3, h / 2);
            fill(255, 255, 255);
            ellipse(w / 4, h / 4, w / 6, h / 5);
            
            strokeWeight(w / 30);
            stroke(255, 255, 255, 200);
            noFill();
            beginShape();
            vertex(w / 49, h / 1.25);
            vertex(w / 12, h / 1.5);
            vertex(-w / 42, h / 1.9);
            vertex(-w / 124, h / 2.9);
            vertex(-w / 6, h / 5.8);
            vertex(-w / 17, h / 37.5);
            endShape();
            
            stroke(255, 255, 255, 50);
            strokeWeight(w / 10);
            noFill();
            beginShape();
            vertex(w / 49, h / 1.25);
            vertex(w / 12, h / 1.5);
            vertex(-w / 42, h / 1.9);
            vertex(-w / 124, h / 2.9);
            vertex(-w / 6, h / 5.8);
            vertex(-w / 17, h / 37.5);
            endShape();
            
            noStroke();
            
            fill(0, 0, 0);
            arc(w / 3.4, h / 4.5, w / 3, h / 2, -90, 90);
            
            fill(4, 98, 199);
            beginShape();
            
            vertex(w / 3.3, h / 2.1);
            vertex(w / 3.3, h / 41.2);
            vertex(w / 3.1, -h / 19.3);
            vertex(w / 2.4, -h / 4.4);
            vertex(w / 2.6, -h / 14.2);
            vertex(w / 2.8, h / 29.5);
            vertex(w / 2.8, h / 5.3);
            vertex(w / 3.3, h / 2.1);
            
            endShape();
            noStroke();
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap);
            }
            
            fill(0, 136, 255);
            ellipse(-w / 4, -h / 3, w / 3.7, h / 2.0);
            
            popMatrix();
            
            
            break;
            
        case "pheonix":
            
            styles = "pheonix";
            
            pushMatrix();
            translate(x, y);
            rotate(r);
            
            fill(255, 64, 0);
            beginShape();
            vertex(w / 4, h / 2);vertex(w / 4.8, h / 1.5);vertex(w / 9.1, h / 1.2);vertex(-w / 9.4, h / 1.0);vertex(-w / 17.2, h / 1.2);vertex(-w / 63.9, h / 1.55);vertex(-w / 25.6, h / 1.71);endShape();
            
            beginShape();
            vertex(w / 48.0, h / 1.8);vertex(-w / 9.8, h / 1.4);vertex(-w / 10.1, h / 1.08);vertex(-w / 4.3, h / 1.4);vertex(-w / 4.2, h / 2.0);
            endShape();
            
            pushMatrix();
            fill(255, 89, 0);
            translate(w / 11, 0);
            
            pushMatrix();
            translate(0, -h / 10);
            beginShape();
            vertex(-w / 2.0, -h / 4.9);
            vertex(-w / 2.2 + sin(frameCount * 13) * w / 15, -h / 1.4);
            vertex(-w / 2.0 - sin(frameCount * 15) * w / 20, -h / 1.0);
            vertex(-w / 2.5 + sin(frameCount * 15) * w / 20, -h / 0.7);
            vertex(-w / 2.6 - sin(frameCount * 15) * w / 20, -h / 1.0);
            vertex(-w / 3.8 + sin(frameCount * 13) * w / 15, -h / 1.4);
            vertex(-w / 7.3, -h / 2.3);
            endShape();
            popMatrix();
            
            pushMatrix();
            translate(w / 4, -h / 10);
            beginShape();
            vertex(-w / 2.0, -h / 2.3);
            vertex(-w / 2.2 - sin(frameCount * 13) * w / 11, -h / 1.4);
            vertex(-w / 2.0 + sin(frameCount * 15) * w / 12, -h / 1.0);
            vertex(-w / 2.5 - sin(frameCount * 15) * w / 12, -h / 0.7);
            vertex(-w / 2.6 + sin(frameCount * 15) * w / 12, -h / 1.0);
            vertex(-w / 3.8 - sin(frameCount * 13) * w / 11, -h / 1.4);
            vertex(-w / 7.3, -h / 2.4);
            endShape();
            popMatrix();
            
            pushMatrix();
            translate(w / 1.7, -h / 10);
            beginShape();
            vertex(-w / 2.0, -h / 2.3);
            vertex(-w / 2.2 + sin(frameCount * 16) * w / 13, -h / 1.4);
            vertex(-w / 2.0 - sin(frameCount * 13) * w / 18, -h / 1.0);
            vertex(-w / 2.5 + sin(frameCount * 13) * w / 18, -h / 0.7);
            vertex(-w / 2.6 - sin(frameCount * 13) * w / 18, -h / 1.0);
            vertex(-w / 3.8 + sin(frameCount * 16) * w / 13, -h / 1.4);
            vertex(-w / 7.3, -h / 3.1);
            endShape();
            popMatrix();
            
            pushMatrix();
            translate(w / 1.1, -h / 10);
            beginShape();
            vertex(-w / 2.0, -h / 2.9);
            vertex(-w / 2.2 - sin(frameCount * 15) * w / 10, -h / 1.4);
            vertex(-w / 2.0 + sin(frameCount * 17) * w / 15, -h / 1.0);
            vertex(-w / 2.5 - sin(frameCount * 17) * w / 15, -h / 0.7);
            vertex(-w / 2.6 + sin(frameCount * 17) * w / 15, -h / 1.0);
            vertex(-w / 3.8 - sin(frameCount * 15) * w / 10, -h / 1.4);
            vertex(-w / 2.3, h / 3.0);
            endShape();
            popMatrix();
            popMatrix();
            
            
            fill(255, 128, 0);
            ellipse(0, 0, w * 1.2, h * 1.2);
            
            pushMatrix();
            translate(0, -h / 10);
            beginShape();
            vertex(-w / 2.0, -h / 4.9);
            vertex(-w / 2.2 + sin(frameCount * 13) * w / 15, -h / 1.4);
            vertex(-w / 2.0 - sin(frameCount * 15) * w / 20, -h / 1.0);
            vertex(-w / 2.5 + sin(frameCount * 15) * w / 20, -h / 0.8);
            vertex(-w / 2.6 - sin(frameCount * 15) * w / 20, -h / 1.0);
            vertex(-w / 3.8 + sin(frameCount * 13) * w / 15, -h / 1.4);
            vertex(-w / 7.3, -h / 2.3);
            endShape();
            popMatrix();
            
            pushMatrix();
            translate(w / 4, -h / 10);
            beginShape();
            vertex(-w / 2.0, -h / 2.3);
            vertex(-w / 2.2 - sin(frameCount * 13) * w / 11, -h / 1.4);
            vertex(-w / 2.0 + sin(frameCount * 15) * w / 12, -h / 1.0);
            vertex(-w / 2.5 - sin(frameCount * 15) * w / 12, -h / 0.8);
            vertex(-w / 2.6 + sin(frameCount * 15) * w / 12, -h / 1.0);
            vertex(-w / 3.8 - sin(frameCount * 13) * w / 11, -h / 1.4);
            vertex(-w / 7.3, -h / 2.4);
            endShape();
            popMatrix();
            
            pushMatrix();
            translate(w / 1.7, -h / 10);
            beginShape();
            vertex(-w / 2.0, -h / 2.3);
            vertex(-w / 2.2 + sin(frameCount * 16) * w / 13, -h / 1.4);
            vertex(-w / 2.0 - sin(frameCount * 13) * w / 18, -h / 1.0);
            vertex(-w / 2.5 + sin(frameCount * 13) * w / 18, -h / 0.8);
            vertex(-w / 2.6 - sin(frameCount * 13) * w / 18, -h / 1.0);
            vertex(-w / 3.8 + sin(frameCount * 16) * w / 13, -h / 1.4);
            vertex(-w / 7.3, -h / 3.1);
            endShape();
            popMatrix();
            
            pushMatrix();
            translate(w / 1.1, -h / 10);
            beginShape();
            vertex(-w / 2.0, -h / 2.9);
            vertex(-w / 2.2 - sin(frameCount * 15) * w / 10, -h / 1.4);
            vertex(-w / 2.0 + sin(frameCount * 17) * w / 15, -h / 1.0);
            vertex(-w / 2.5 - sin(frameCount * 17) * w / 15, -h / 0.8);
            vertex(-w / 2.6 + sin(frameCount * 17) * w / 15, -h / 1.0);
            vertex(-w / 3.8 - sin(frameCount * 15) * w / 10, -h / 1.4);
            vertex(-w / 2.9, h / 3.0);
            endShape();
            popMatrix();
            
            fill(255, 255, 255, 40);
            ellipse(w / 4, h / 4, w / 4, h / 4);
            ellipse(w / 4, h / 4, w / 3, h / 3);
            ellipse(w / 4, h / 4, w / 2.3, h / 2);
            fill(255, 255, 255);
            ellipse(w / 4, h / 4, w / 6, h / 5);
            
            
            fill(255, 128, 0);
            arc(w / 3.4, h / 4.5, w / 3, h / 2, -35, 90);
            
            pushMatrix();
            translate(w / 24.7, 0);
            strokeWeight(w / 15);
            stroke(255, 251, 0);
            fill(255, 55, 0);
            beginShape();
            vertex(w / 3.6, h / 2.4);vertex(w / 2.8, h / 3.0);vertex(w / 2.8, h / 4.2);vertex(w / 2.5, h / 6.0);vertex(w / 2.3, h / 13.1);vertex(w / 2.3, h / 5.0);vertex(w / 2.5, h / 3.0);vertex(w / 2.8, h / 2.5);vertex(w / 3.6, h / 2.4);
            endShape();
            popMatrix();
            
            pushMatrix();
            translate(w / 71.2, 0);
            strokeWeight(w / 18);
            stroke(255, 196, 0);
            fill(255, 55, 0);
            beginShape();
            vertex(w / 3.6, h / 2.4);vertex(w / 2.8, h / 3.0);vertex(w / 2.8, h / 4.2);vertex(w / 2.5, h / 6.0);vertex(w / 2.4, h / 32.0);vertex(w / 2.3, h / 5.0);vertex(w / 2.5, h / 3.0);vertex(w / 2.8, h / 2.5);vertex(w / 3.6, h / 2.4);
            endShape();
            popMatrix();
            
            strokeWeight(w / 18);
            stroke(255, 55, 0);
            fill(255, 55, 0);
            beginShape();
            vertex(w / 3.6, h / 2.4);vertex(w / 2.8, h / 3.0);vertex(w / 2.8, h / 4.2);vertex(w / 2.5, h / 6.0);vertex(w / 2.5, h / 13.1);vertex(w / 2.3, h / 5.0);vertex(w / 2.5, h / 3.0);vertex(w / 2.8, h / 2.5);vertex(w / 3.6, h / 2.4);
            endShape();
            noStroke();
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap / 2);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap / 2);
            }
            
            pushMatrix();
            translate(w / 6.2, 0);
            
            fill(238, 255, 0);
            strokeWeight(w / 10);
            beginShape();
            vertex(-w / 6.1, -h / 24.1);
            vertex(-w / 1.8, -h / 2.4);
            vertex(-w / 5.3, -h / 0.7);
            vertex(-w / 3.9, -h / 1.2);
            vertex(-w / 3.8, -h / 1.4);
            vertex(-w / 5.2, -h / 1.6);
            vertex(-w / 4.3, -h / 1.9);
            vertex(-w / 4.4, -h / 2.4);
            vertex(-w / 6.7, -h / 2.9);
            vertex(-w / 6.1, -h / 4.1);
            vertex(-w / 6.6, -h / 6.1);
            vertex(-w / 6.1, -h / 24.1);
            endShape();
            
            popMatrix();
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap / 3);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap / 3);
            }
            
            pushMatrix();
            translate(w / 9.5, 0);
            
            fill(255, 162, 0);
            strokeWeight(w / 10);
            beginShape();
            vertex(-w / 6.1, -h / 24.1);
            vertex(-w / 2.1, -h / 2.4);
            vertex(-w / 6.0, -h / 0.6);
            vertex(-w / 3.9, -h / 1.2);
            vertex(-w / 3.8, -h / 1.4);
            vertex(-w / 5.2, -h / 1.6);
            vertex(-w / 4.3, -h / 1.9);
            vertex(-w / 4.4, -h / 2.4);
            vertex(-w / 6.7, -h / 2.9);
            vertex(-w / 6.1, -h / 4.1);
            vertex(-w / 6.6, -h / 6.1);
            vertex(-w / 6.1, -h / 24.1);
            endShape();
            
            popMatrix();
            
            if(bird_leftOrRight >= 5)
            {
                rotate(flap / 3);
            }
            
            if(bird_leftOrRight <= -5)
            {
                rotate(-flap / 3);
            }
            
            fill(255, 89, 0);
            stroke(255, 89, 0);
            strokeWeight(w / 10);
            beginShape();
            vertex(-w / 9.7, -h / 24.1);
            vertex(-w / 2.4, -h / 2.4);
            vertex(-w / 4.0, -h / 1.0);
            vertex(-w / 3.9, -h / 1.2);
            vertex(-w / 3.8, -h / 1.4);
            vertex(-w / 5.2, -h / 1.6);
            vertex(-w / 4.3, -h / 1.9);
            vertex(-w / 4.4, -h / 2.4);
            vertex(-w / 6.7, -h / 2.9);
            vertex(-w / 6.1, -h / 4.1);
            vertex(-w / 6.6, -h / 6.1);
            vertex(-w / 9.7, -h / 24.1);
            endShape();
            
            noStroke();
            
            popMatrix();
            
            
            break;
    }
    rectMode(0);
};

//player
var player = function(){
    
    //protetiveBallLife
    
    if(start === true)
    {
        if(protetiveBallLifeState === true)
        {
            protetiveBallLife -= 1;
        }
        
        if(protetiveBallLife <= 0)
        {
            protetiveBallLife = 0;
        }
        
        if(playerY <= 0)
        {
            playerY = 0;
            gravity = 3;
        }
        
        if(playerY >= 400 - playerSize && death === false)
        {
            playerY = 400 - playerSize;
            gravity = -5;
        }
        
        //player gravity
        if(powerUp >= 0 && powerUp < 1 && playerY >= 25)
        {
            clicked = 0;
        }
        
        if(deadContinuePopUpTimer <= 0)
        {
            playerY += gravity;
        }
        
        if(pressed_or_upAroowkey === false && deadContinuePopUpTimer <= 0)
        {
            if(mouseIsPressed && clicked < 2 && death === false)
            {
                if(powerUp >= 0 && powerUp < 1 && playerY >= 25)
                {
                    gravity = -2;
                }
                
                if(powerUp > 0)
                {
                    gravity = -3;
                }
                
                clicked = true;
                clicked += 1;
                flap -= 50;
            }
            else
            {
                gravity += gravitySpeed;
                flap += 2;
            }
            if(!mouseIsPressed)
            {
                clicked = 0;
            }
            
            if(keyCode === UP && keyIsPressed)
            {
                pressed_or_upAroowkey = true;
            }
        }
        
        if(pressed_or_upAroowkey === true && deadContinuePopUpTimer <= 0)
        {
            if(keyCode === UP && keyIsPressed && clicked < 2 && death === false)
            {
                if(powerUp >= 0 && powerUp < 1 && playerY >= 25)
                {
                    gravity = -2;
                }
                
                if(powerUp > 0)
                {
                    gravity = -3;
                }
                
                clicked = true;
                clicked += 1;
                flap -= 50;
            }
            else
            {
                gravity += gravitySpeed;
                flap += 2;
            }
            if(!keyIsPressed)
            {
                clicked = 0;
            }
            
            if(mouseIsPressed)
            {
                pressed_or_upAroowkey = false;
            }
        }
        
        if(bird_leftOrRight < 0)
        {
            birdGravity_leftOrRight = gravity * 2;
        }
        if(bird_leftOrRight > 0)
        {
            birdGravity_leftOrRight = -gravity * 2;
        }
    }
    
    if(flap <= -50)
    {
        flap = -50;
    }
    
    if(flap >= 0)
    {
        flap = 0;
    }
    
    if(currentBirdSyle === "dragon" || currentBirdSyle === "pheonix")
    {
        birdStyle(playerX + playerSize / 2, playerY + playerSize / 2, 25, bird_leftOrRight, -90 - birdGravity_leftOrRight, currentBirdSyle);
    }
    
    //player particle stuff
    for(var i = 0; i < particleCount.length; ++i)
    {
        pushMatrix();
        translate(particleX[i], particleY[i]);
        rectMode(CENTER);
        rotate(frameCount % 380 * 3);
        
        if(styles === "vampire")
        {
            rotate(-frameCount % 380 * 3);
        }
        
        particleStyle(0, 0, particleSize[i], particleSize[i], styles);
        rectMode(0);
        popMatrix();
        
        if(styles !== "alien" && styles !== "wizard" && styles !== "carissa" && styles !== "vampire" && styles !== "fairy" && styles !== "dragon" && styles !== "blackhole" && styles !== "pheonix")
        {
            particleSize[i] -= 0.2;
        }
        
        if(styles === "alien" || styles === "wizard" || styles === "carissa" || styles === "vampire" || styles === "fairy" || styles === "dragon" || styles === "blackhole" || styles === "pheonix")
        {
            if(styles !== "pheonix")
            {
                particleSize[i] -= 0.1;
            }
            
            if(styles === "pheonix")
            {
                particleSize[i] -= 0.095;
            }
        }
        
        if(particleSize[i] <= 0)
        {
            particleSize[i] = 10;
            
            if(currentBirdSyle !== "pheonix")
            {
                particleX[i] = playerX + playerSize / 2;
                particleY[i] = playerY + playerSize / 2;
            }
            if(currentBirdSyle === "pheonix")
            {
                if(bird_leftOrRight >= 5)
                {
                    particleX[i] = playerX;
                    particleY[i] = playerY + playerSize / 1.5;
                }
                if(bird_leftOrRight <= -5)
                {
                    particleX[i] = playerX + playerSize;
                    particleY[i] = playerY + playerSize / 1.5;
                }
            }
        }
    }
    particleX.push(playerX + playerSize / 2);
    particleY.push(playerY + playerSize / 2);
    particleSize.push(0);
    
    if(currentBirdSyle !== "pheonix")
    {
        particleCount = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    }
    
    if(currentBirdSyle === "pheonix")
    {
        particleCount = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    }
    
    //player
    
    if(currentBirdSyle !== "dragon" && currentBirdSyle !== "pheonix")
    {
        birdStyle(playerX + playerSize / 2, playerY + playerSize / 2, 25, bird_leftOrRight, -90 - birdGravity_leftOrRight, currentBirdSyle);
    }
    
    switch(boughtBirds)
    {
        case 0:
        currentBirdSyle = "blue";
            break;
            
        case 1:
        currentBirdSyle = "blackToucan";
            break;
        
        case 2:
        currentBirdSyle = "green";
            break;
            
        case 3:
        currentBirdSyle = "boombitbird";
            break;
            
        case 4:
        currentBirdSyle = "ninjabird";
            break;
            
        case 5:
        currentBirdSyle = "robot";
            break;
            
        case 6:
        currentBirdSyle = "unicorn";
            break;
            
        case 7:
        currentBirdSyle = "alien";
            break;
            
        case 8:
        currentBirdSyle = "wizard";
            break;
            
        case 9:
        currentBirdSyle = "reaper";
            break;
            
        case 10:
        currentBirdSyle = "carissa";
            break;
            
        case 11:
        currentBirdSyle = "fairy";
            break;
            
        case 12:
        currentBirdSyle = "vampire";
            break;
            
        case 13:
        currentBirdSyle = "dragon";
            break;
            
        case 14:
        currentBirdSyle = "blackhole";
            break;
            
        case 15:
        currentBirdSyle = "pheonix";
            break;
    }
    if(start === true)
    {
        //move side to side
        
        if(deadContinuePopUpTimer <= 0)
        {
            playerX = move_sideToSide;
            
            move_sideToSide += moveSpeed;
        }
        
        if(move_sideToSide >= 300 - playerSize)
        {
            if(birdFlap < 10)
            {
                moveSpeed = -1;
            }
            if(birdFlap >= 10)
            {
                moveSpeed = -1.5;
            }
            bird_leftOrRight = -playerSize;
            
            if(emeraldState === false)
            {
                if(birdFlap >= 10 && birdFlap < 20)
                {
                    emeraldCoinFilter = floor( random(1, 3) );
                }
                
                if(birdFlap >= 20 && birdFlap < 30)
                {
                    emeraldCoinFilter = floor( random(1, 4) );
                }
                
                if(birdFlap >= 30 && birdFlap < 40)
                {
                    emeraldCoinFilter = floor( random(1, 5) );
                }
                
                if(birdFlap >= 50 && birdFlap < 51)
                {
                    emeraldCoinFilter = 10;
                }
                
                if(birdFlap >= 51 && birdFlap < 60)
                {
                    emeraldCoinFilter = floor( random(2, 6) );
                }
                
                if(birdFlap >= 60 && birdFlap < 70)
                {
                    emeraldCoinFilter = floor( random(1, 7) );
                }
                
                if(birdFlap >= 70 && birdFlap < 80)
                {
                    emeraldCoinFilter = floor( random(2, 8) );
                }
                
                if(birdFlap >= 80 && birdFlap < 90)
                {
                    emeraldCoinFilter = floor( random(3, 9) );
                }
                
                if(birdFlap >= 90 && birdFlap < 100)
                {
                    emeraldCoinFilter = floor( random(4, 10) );
                }
                
                if(birdFlap >= 100 && birdFlap < 110)
                {
                    emeraldCoinFilter = floor( random(5, 11) );
                }
                
                if(birdFlap >= 110 && birdFlap < 120)
                {
                    emeraldCoinFilter = floor( random(6, 11) );
                }
                
                if(birdFlap >= 120 && birdFlap < 130)
                {
                    emeraldCoinFilter = floor( random(7, 11) );
                }
                
                if(birdFlap >= 130 && birdFlap < 140)
                {
                    emeraldCoinFilter = floor( random(8, 11) );
                }
                
                if(birdFlap >= 140 && birdFlap < 150)
                {
                    emeraldCoinFilter = floor( random(9, 11) );
                }
                
                if(birdFlap >= 150)
                {
                    emeraldCoinFilter = 10;
                }
            }
            
            if(death === false)
            {
                birdFlap += 1;
                scoreGraphic += 150;
                emeraldState = true;
            }
        }
        
        if(move_sideToSide < 100)
        {
            if(birdFlap < 10)
            {
                moveSpeed = 1;
            }
            if(birdFlap >= 10)
            {
                moveSpeed = 1.5;
            }
            
            bird_leftOrRight = playerSize;
            
            if(emeraldState === false)
            {
                if(birdFlap >= 10 && birdFlap < 20)
                {
                    emeraldCoinFilter = floor( random(1, 3) );
                }
                
                if(birdFlap >= 20 && birdFlap < 30)
                {
                    emeraldCoinFilter = floor( random(1, 4) );
                }
                
                if(birdFlap >= 30 && birdFlap < 40)
                {
                    emeraldCoinFilter = floor( random(1, 5) );
                }
                
                if(birdFlap >= 50 && birdFlap < 51)
                {
                    emeraldCoinFilter = 10;
                }
                
                if(birdFlap >= 51 && birdFlap < 60)
                {
                    emeraldCoinFilter = floor( random(2, 6) );
                }
                
                if(birdFlap >= 60 && birdFlap < 70)
                {
                    emeraldCoinFilter = floor( random(1, 7) );
                }
                
                if(birdFlap >= 70 && birdFlap < 80)
                {
                    emeraldCoinFilter = floor( random(2, 8) );
                }
                
                if(birdFlap >= 80 && birdFlap < 90)
                {
                    emeraldCoinFilter = floor( random(3, 9) );
                }
                
                if(birdFlap >= 90 && birdFlap < 100)
                {
                    emeraldCoinFilter = floor( random(4, 10) );
                }
                
                if(birdFlap >= 100 && birdFlap < 110)
                {
                    emeraldCoinFilter= floor( random(5, 11) );
                }
                
                if(birdFlap >= 110 && birdFlap < 120)
                {
                    emeraldCoinFilter = floor( random(6, 11) );
                }
                
                if(birdFlap >= 120 && birdFlap < 130)
                {
                    emeraldCoinFilter = floor( random(7, 11) );
                }
                
                if(birdFlap >= 130 && birdFlap < 140)
                {
                    emeraldCoinFilter = floor( random(8, 11) );
                }
                
                if(birdFlap >= 140 && birdFlap < 150)
                {
                    emeraldCoinFilter = floor( random(9, 11) );
                }
                
                if(birdFlap >= 150)
                {
                    emeraldCoinFilter = 10;
                }
            }
            
            if(death === false)
            {
                scoreGraphic += 150;
                birdFlap += 1;
                emeraldState = true;
            }
        }
        
        scoreGraphic -= 10;
        
        if(scoreGraphic <= 50)
        {
            scoreGraphic = 50;
        }
    }
    
    if(powerUp >= 2 && powerUp < 3)
    {
        fill(255, 0, 0, protetiveBallLife / 2);
        arc(playerX + playerSize / 2, playerY + playerSize / 2, playerSize * 2 + sin(frameCount * 3) * 5, playerSize * 2 + sin(frameCount * 5) * 3, -180, 0);
        fill(255, 0, 0, protetiveBallLife / 1.3);
        arc(playerX + playerSize / 2, playerY + playerSize / 2, playerSize * 2 + sin(frameCount * 3) * 5, playerSize * 2 + sin(frameCount * 5) * 3, 0, 180);
    }
    
    if(start === false)
    {
        fill(0, 136, 255);
        rect(97 - 65, 11 - 5, 209 + 65 * 2, 169 + 10, 10);
        arc(219, 204, 150, 150, -78, -61);
        textSize(17);
        fill(255, 255, 255);
        text("Tap/Up arrow to make me fly,\nbut I will always fly from side to side...\nJust don't let me hit the spikes!\nThe longer you're in the game, the\nhigher the gem value!\nCollect gems to buy\nBirds, Backgrounds, and Gadgets!\nComplete the challanges to earn\nachievements!", 200, 95);
        
        fill(0, 136, 255);
        rect(150, 225, 100, 26, 10);
        
        fill(255, 255, 255);
        text("START!", 200, 237);
        
        if(mouse.X > 150 && mouse.X < 250 && mouse.Y > 225 && mouse.Y < 225 + 26)
        {
            fill(255, 255, 255, 50);
            rect(150, 225, 100, 26, 10);
            cursor(HAND);
            
            if(mouseIsPressed)
            {
                start = true;
                achievements[0] = 1;
            }
        }
    }
    
    if(deadContinuePopUpTimer > 0)
    {
        deadContinuePopUpTimerOffset += 1;
        
        if(deadContinuePopUpTimerOffset >= 60)
        {
            deadContinuePopUpTimer -= 1;
            deadContinuePopUpTimerOffset = 0;
        }
        
        fill(0, 0, 0, 200);
        rect(200 - 20, 100 - 20, 40, 40, 5);
        
        fill(255, 255, 255);
        textSize(40);
        text(deadContinuePopUpTimer, 200, 100);
    }
};

//unlock achievements
var achievementUnlocks = function(){
    
    if(gem >= 50)
    {
        achievements[2] = 1;
    }
    
    if(birdFlap >= 25)
    {
        achievements[3] = 1;
    }
    
    if(lateNightAchieveCount >= 50)
    {
        achievements[4] = 1;
    }
    
    if(birdSpreeCount >= 5)
    {
        achievements[5] = 1;
    }
    
    if(GadgetSpreeCount >= 3)
    {
        achievements[8] = 1;
    }
    
    if(BuyEverythingCount >= 30)
    {
        achievements[9] = 1;
    }
    
    //achieve achievement
    for(var i = 0; i < achievements.length; ++i)
    {
        if(achievements[i] >= 1)
        {
            achievementShade[i] += 5;
        }
        
        if(achievementState[i] === false)
        {
            fill(255, 255, 255, achievementShade[i]);
            rect(0, 75, 100, 50);

            textSize(12);
            fill(122, 122, 122, achievementShade[i]);
            text("ACHIEVEMENT\nEARNED!\n" + achievementNames[i], 50, 100);
        }
        
        if(achievementShade[i] > 700)
        {
            achievementState[i] = true;
        }
    }
};

//kill collision
var killCollision = function(x, y, w, h, pX){
    
    if(playerX > x - playerSize && playerX < x + w && playerY > y - playerSize && playerY < y + h)
    {
        if(powerUp > 2 || powerUp <= 1)
        {
            death = true;
            gravitySpeed = 0.5;
            moveSpeed = pX;
            clicked = 0;
        }
        
        if(powerUp >= 2 && powerUp < 3)
        {
            protetiveBallLifeState = true;
            
            if(protetiveBallLife <= 0)
            {
                death = true;
                gravitySpeed = 0.5;
                moveSpeed = pX;
                clicked = 0;
            }
        }
    }
    
};

//spike
var spike = function(x, y, w, h, switchSide, styles){
    
    switch(switchSide)
    {
        case "left":
            
            for(var i = 0; i < w; ++i)
            {
                killCollision(x + i, y + i / 2, 1, h - i, 5);
            }
            
            switch(styles)
            {
                case "original":
                fill(255, 172, 71);
                arc(x + w, y + h / 2, w * 2.5, h * 2.5, 154, 206);
                    break;
                    
                case "grey":
                fill(74, 73, 73);
                arc(x + w, y + h / 2, w * 2.5, h * 2.5, 154, 206);
                    break;
                    
                case "green":
                fill(14, 204, 4);
                arc(x + w, y + h / 2, w * 2.5, h * 2.5, 154, 206);
                    break;
                    
                case "red":
                fill(255, 0, 0);
                arc(x + w, y + h / 2, w * 2.5, h * 2.5, 154, 206);
                    break;
                    
                case "rainbow":
                fill(255, 0, 0);
                arc(x + w, y + h / 2, w * 2.5, h * 2.5, 154, 206);
                fill(255, 183, 0);
                arc(x + w, y + h / 2, w * 2.5, h * 2.5, 154, 206 - 10);
                fill(255, 221, 0);
                arc(x + w, y + h / 2, w * 2.5, h * 2.5, 154, 206 - 20);
                fill(0, 255, 0);
                arc(x + w, y + h / 2, w * 2.5, h * 2.5, 154, 206 - 30);
                fill(0, 174, 255);
                arc(x + w, y + h / 2, w * 2.5, h * 2.5, 154, 206 - 40);
                fill(218, 58, 250);
                arc(x + w, y + h / 2, w * 2.5, h * 2.5, 154, 206 - 45);
                    break;
                    
                case "dark-forest":
                fill(0, 0, 0);
                arc(x + w, y + h / 2, w * 2.5, h * 2.5, 154, 206);
                    break;
                    
                case "wizard":
                fill(255, 172, 71);
                arc(x + w, y + h / 2, w * 2.5, h * 2.5, 154, 206);
                    break;
                    
                case "planet":
                fill(255, 255, 255);
                arc(x + w, y + h / 2, w * 2.5, h * 2.5, 154, 206); 
                    break;
                    
                case "robot":
                noStroke();
                fill(2, random(80, 158), 148, 70);
                beginShape();
                vertex(x + w * -1.27, y + h * -0.66);
                vertex(x + w * -0.20, y + h / 1.19);
                vertex(x + w * -1.47, y + h * -0.07);
                vertex(x + w * -1.76, y + h * -1.25);
                vertex(x + w * -1.75, y + h * -2.50);
                vertex(x + w * -4.59, y + h * -50.86);
                vertex(x + w * -5.25, y + h * -50.86);
                endShape();
                
                fill(18, 18, 18);
                rect(x + w * -0.47, y + h / 11.90, w / 2.0, h / 1.2);
                
                fill(51, 51, 51);
                arc(x + w, y + h / 2, w * 2.5, h * 2.5, 154, 206);
                
                fill(2, random(80, 158), 148, 70);
                
                beginShape();
                vertex(x + w * 0.60, y + h * 0.54);
                vertex(x + w * 0.34, y + h / 1.58);
                vertex(x + w * 0.16, y + h * 0.49);
                endShape();
                beginShape();
                vertex(x + w * 0.60, y + h * 0.54);
                vertex(x + w * 0.34, y + h / 1.58);
                vertex(x + w * 0.16, y + h * 0.49);
                endShape();
                    break;
                    
                case "fairy":
                fill(250, 100, 250);
                arc(x + w, y + h / 2, w * 2.5, h * 2.5, 154, 206);
                    break;
                    
                case "dragon":
                fill(255, 187, 0);
                arc(x + w, y + h / 2, w * 2.5, h * 2.5, 154, 206);
                    break;
                    
                case "current":
                fill(255, 216, 99);
                arc(x + w, y + h / 2, w * 2.5, h * 2.5, 154, 206);
                    break;
                    
                case "fire":
                    
                fill(255, 225, 0, 30);
                ellipse(x - w / 4, y + h / 2, w, h);
                ellipse(x - w / 3, y + h / 2, w * 1.3, h * 1.3);
                ellipse(x - w / 2, y + h / 2, w * 1.5, h * 1.5);
                    
                fill(255, 187, 0);
                arc(x + w, y + h / 2, w * 2.2, h * 2.2, 154, 206);
                fill(255, 119, 0, 100);
                arc(x + w / 1.3 + random(-w / 5, w / 5), y + h / 2, w * 1.5, h * 1.5, 154, 206);
                    
                    break;
            }
            
            break;
            
        case "right":
            
            for(var i = 0; i < w; ++i)
            {
                killCollision(x - i, y + i / 2, 1, h - i, -5);
            }
            
            switch(styles)
            {
                case "original":
                fill(255, 172, 71);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180, 206 + 180);
                    break;
                    
                case "grey":
                fill(74, 73, 73);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180, 206 + 180);
                    break;
                    
                case "green":
                fill(14, 204, 4);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180, 206 + 180);
                    break;
                    
                case "red":
                fill(255, 0, 0);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180, 206 + 180);
                    break;
                    
                case "rainbow":
                fill(255, 0, 0);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180, 206 + 180);
                fill(255, 183, 0);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180 + 10, 206 + 180);
                fill(255, 221, 0);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180 + 20, 206 + 180);
                fill(0, 255, 0);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180 + 30, 206 + 180);
                fill(0, 174, 255);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180 + 40, 206 + 180);
                fill(218, 58, 250);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180 + 45, 206 + 180);
                    break;
                    
                case "dark-forest":
                fill(0, 0, 0);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180, 206 + 180);
                    break;
                    
                case "wizard":
                fill(255, 172, 71);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180, 206 + 180);
                    break;
                    
                case "planet":
                fill(255, 255, 255);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180, 206 + 180);
                    break;
                    
                case "robot":
                noStroke();
                fill(2, random(80, 158), 148, 70);
                
                beginShape();
                vertex(x - w * -1.27, y + h * -0.66);
                vertex(x - w * -0.20, y + h / 1.19);
                vertex(x - w * -1.47, y + h * -0.07);
                vertex(x - w * -1.76, y + h * -1.25);
                vertex(x - w * -1.75, y + h * -2.50);
                vertex(x - w * -4.59, y + h * -50.86);
                vertex(x - w * -5.25, y + h * -50.86);
                endShape();
                
                
                fill(18, 18, 18);
                noStroke();
                rect(x - w * 0.00, y + h / 11.90, w / 2.0, h / 1.2);
                
                fill(51, 51, 51);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180, 206 + 180);
                
                fill(2, random(80, 158), 148, 70);
                
                beginShape();
                vertex(x - w * 0.60, y + h * 0.54);
                vertex(x - w * 0.34, y + h / 1.58);
                vertex(x - w * 0.16, y + h * 0.49);
                endShape();
                
                beginShape();
                vertex(x - w * 0.60, y + h * 0.54);
                vertex(x - w * 0.34, y + h / 1.58);
                vertex(x - w * 0.16, y + h * 0.49);
                endShape();
                
                    break;
                    
                case "fairy":
                fill(250, 100, 250);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180, 206 + 180);
                    break;
                    
                case "dragon":     
                fill(255, 187, 0);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180, 206 + 180);
                    break;
                    
                case "current":
                fill(255, 216, 99);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180, 206 + 180);
                    break;
                    
                case "fire":
                    
                fill(255, 225, 0, 30);
                ellipse(x + w / 4, y + h / 2, w, h);
                ellipse(x + w / 3, y + h / 2, w * 1.3, h * 1.3);
                ellipse(x + w / 2, y + h / 2, w * 1.5, h * 1.5);
                    
                fill(255, 187, 0);
                arc(x - w, y + h / 2, w * 2.5, h * 2.5, 154 + 180, 206 + 180);
                fill(255, 119, 0, 100);
                arc(x - w / 1.5 + random(-w / 5, w / 5), y + h / 2, w * 1.5, h * 1.5, 154 + 180, 206 + 180);
                    
                    break;
            }
            break;
    }
    
};

//spike arrays
var 
    spikeLeftX= [],
    spikeLeftY = [],
    spikeLeftSize = [];

var 
    spikeRightX= [],
    spikeRightY = [],
    spikeRightSize = [];

//spike animations
var 
    spikeAnimationLeft = 0,
    spikeAnimationLeftSpeed = 2;
    
var 
    spikeAnimationRight = 0,
    spikeAnimationRightSpeed = 2;

//spike engine
var spikeEngine = function(){
    
    for(var i = 0; i < spikeCountLeft; ++i)
    {
        
        spike(spikeLeftX[i] + spikeAnimationLeft, spikeLeftY[i], spikeLeftSize[i], spikeLeftSize[i], "left", backgroundStyles);
        
        if(move_sideToSide >= 300 - playerSize && death === false)
        {
            spikeAnimationLeftSpeed = -2;
        }
        if(spikeAnimationLeft <= -30)
        {
            spikeAnimationLeftSpeed = 2;
            spikeLeftY[i] = random(0, 400 - spikeLeftSize[i]);
            spikeLeftSize[i] = random(20, 30);
            spikeLeftX[i] = 100;
            
            if(birdFlap >= 15)
            {
                spikeCountLeft = 6;
            }
            
            if(birdFlap >= 20)
            {
                spikeCountLeft = 7;
            }
        }
    }
    
    spikeLeftX.push(100);
    spikeLeftY.push(random(0, 400));
    spikeLeftSize.push(random(20, 30));
    
    
    for(var i = 0; i < spikeCountRight; ++i)
    {
        
        spike(spikeRightX[i] + spikeAnimationRight, spikeRightY[i], spikeRightSize[i], spikeRightSize[i], "right", backgroundStyles);
        
        if(move_sideToSide < 100 && death === false)
        {
            spikeAnimationRightSpeed = -2;
        }
        if(spikeAnimationRight >= 30)
        {
            spikeRightY[i] = random(0, 400 - spikeLeftSize[i]);
            spikeRightSize[i] = random(20, 30);
            spikeRightX[i] = 300;
            spikeAnimationRightSpeed = 2;
            
            if(birdFlap >= 15)
            {
                spikeCountRight = 6;
            }
            
            if(birdFlap >= 20)
            {
                spikeCountRight = 7;
            }
        }
    }
    
    spikeRightX.push(300);
    spikeRightY.push(random(0, 400));
    spikeRightSize.push(random(20, 30));
    
    spikeAnimationLeft += spikeAnimationLeftSpeed;
    if(spikeAnimationLeft >= 0)
    {
        spikeAnimationLeft = 0;
    }
    
    spikeAnimationRight -= spikeAnimationRightSpeed;
    if(spikeAnimationRight <= 0)
    {
        spikeAnimationRight = 0;
    }
};

//stuff like noStroke and textAlign
var applyGameImports = function(){
   
    cursor(ARROW);
    textFont( createFont("Tahoma Bold"));
    textAlign(CENTER, CENTER);
    noStroke(); 
    
};

//game backgrounds
var gameBackground = function(styles){
    
    switch(styles)
    {
        case "original":
        fill(255, 172, 71);
        rect(0, 0, 100, 400);
        rect(300, 0, 150, 400);
            break;
            
        case "grey":
        fill(74, 73, 73);
        rect(0, 0, 100, 400);
        rect(300, 0, 150, 400);
            break;
            
        case "green":
        fill(14, 204, 4);
        rect(0, 0, 100, 400);
        rect(300, 0, 150, 400);
            break;
            
        case "red":
        fill(255, 0, 0);
        rect(0, 0, 100, 400);
        rect(300, 0, 150, 400);
            break;
            
        case "rainbow":
        fill(191, 0, 255);
        rect(0, 0, 100, 400);
        rect(300, 0, 150, 400);
        
        fill(0, 145, 255);
        rect(0, 0, 100 / 1.2, 400);
        rect(300, 0, 100 / 1.2, 400);
        
        fill(0, 255, 30);
        rect(0, 0, 100 / 1.5, 400);
        rect(300, 0, 100 / 1.5, 400);
        
        fill(255, 234, 0);
        rect(0, 0, 100 / 2, 400);
        rect(300, 0, 100 / 2, 400);
        
        fill(255, 132, 0);
        rect(0, 0, 100 / 3, 400);
        rect(300, 0, 100 / 3, 400);
        
        fill(255, 0, 0);
        rect(0, 0, 100 / 6, 400);
        rect(300, 0, 100 / 6, 400);
        
        fill(255, 255, 255, 230);
        rect(0, 0, 100, 400);
        rect(300, 0, 100, 400);
        
            break;
            
        case "dark-forest":
        fill(0, 0, 0);
        rect(0, 0, 100, 400);
        rect(300, 0, 150, 400);
            break;
            
        case "wizard":
            
        fill(9, 19, 128);
        rect(0, 0, 100, 400);
        rect(300, 0, 150, 400);
        backgroundSpecialAssets(27, 44, 32, 27, "wizard");
        backgroundSpecialAssets(31, 348, 35, 27, "wizard");
        backgroundSpecialAssets(53, 281, 47, 40, "wizard");
        backgroundSpecialAssets(58, 219, 29, 22, "wizard");
        backgroundSpecialAssets(58, 95, 32, 27, "wizard");
        backgroundSpecialAssets(33 + 300, 160, 27, 19, "wizard");
        backgroundSpecialAssets(27 + 338, 44, 32, 27, "wizard");
        backgroundSpecialAssets(31 + 300, 348, 35, 27, "wizard");
        backgroundSpecialAssets(53 + 306, 298, 27, 31, "wizard");
        backgroundSpecialAssets(53 + 278, 262, 43, 31, "wizard");
        backgroundSpecialAssets(58 + 300, 219, 29, 22, "wizard");
        backgroundSpecialAssets(58 + 287, 95, 32, 27, "wizard");
        backgroundSpecialAssets(33, 160, 27, 19, "wizard");
            
            break;
            
        case "planet":
            
        fill(44, 3, 92);
        rect(0, 0, 100, 400);
        rect(300, 0, 150, 400);
            
            break;
            
        case "fairy":
            
        fill(240, 79, 240);
        rect(0, 0, 100, 400);
        rect(300, 0, 150, 400);
            
            break;
            
        case "dragon":
        
        fill(133, 133, 133);
        rect(0, 0, 100, 400);
        rect(300, 0, 150, 400);
        
        pushMatrix();
        
        translate(5, 0);
        
        emeraldBackgroundGem(67, 58, 12, 22, colorGem);
        emeraldBackgroundGem(45, 136 + 60, 12, -84, colorGem2);
        emeraldBackgroundGem(50, 345, 12, -57, colorGem3);
        
        popMatrix();
        
        pushMatrix();
        
        translate(309, 0);
        
        emeraldBackgroundGem(67, 58, 12, 22 - 50, colorGem);
        emeraldBackgroundGem(45, 136 + 60, 12, -84, colorGem2);
        emeraldBackgroundGem(50, 345, 12, -57 - 50, colorGem3);
        
        popMatrix();
    
        
            break;
            
        case "current":
            
        fill(255, 216, 99);
        rect(0, 0, 100, 400);
        rect(300, 0, 150, 400);
            
            break;
    }
    
    
    
    textSize(95);
    
    switch(styles)
    {
        case "original":
        fill(255, 172, 71, scoreGraphic);
            break;
            
        case "grey":
        fill(0, 0, 0, scoreGraphic);
            break;
            
        case "green":
        fill(14, 204, 4, scoreGraphic);
            break;
            
        case "red":
        fill(255, 0, 0, scoreGraphic);
            break;
            
        case "rainbow":
        fill(0, 34, 255, scoreGraphic);
            break;
            
        case "dark-forest":
        fill(255, 0, 0, scoreGraphic);
            break;
            
        case "wizard":
        fill(255, 230, 0, scoreGraphic);
            break;
            
        case "planet":
        fill(255, 255, 255, scoreGraphic);
            break;
            
        case "robot":
        fill(0, 248, 252, scoreGraphic);
            break;
            
        case "fairy":
        fill(250, 110, 255, scoreGraphic);
            break;
            
        case "dragon":
        fill(255, 123, 0, scoreGraphic);
            break;
            
        case "current":
        fill(255, 216, 99, scoreGraphic);
            break;
            
        case "fire":
        fill(255, 119, 0, scoreGraphic);
            break;
    }
    
    if(scene === "game")
    {
        text(birdFlap, 200, 200);
    }
    
    if(scene === "store_background")
    {
        text("0", 200, 200);
    }
    
};

//game background color
var gameBackgroundColor = function(styles){
    
    switch(styles)
    {
        case "original":
        background(255, 255, 255);
            break;
            
        case "grey":
        background(222, 218, 222);
            break;
            
        case "green":
        background(255, 255, 255);
            break;
            
        case "red":
        background(255, 255, 255);
            break;
            
        case "rainbow":
        background(235, 253, 255);
            break;
            
        case "dark-forest":
        background(46, 46, 46);
        
        backgroundSpecialAssets(darkForestCloudsX[0], darkForestCloudsY[0], 50, 25, "dark_forest");
        backgroundSpecialAssets(darkForestCloudsX[1], darkForestCloudsY[1], 50, 25, "dark_forest");
        darkForestCloudsX[0] += darkForestCloudsS[0];
        darkForestCloudsX[1] += darkForestCloudsS[1];
        
        if(darkForestCloudsX[0] >= 400)
        {
            darkForestCloudsX[0] = 0;
            darkForestCloudsY[0] = random(0, 375);
            darkForestCloudsS[0] = random(1, 2);
        }
        
        if(darkForestCloudsX[1] >= 400)
        {
            darkForestCloudsX[1] = 0;
            darkForestCloudsY[1] = random(0, 375);
            darkForestCloudsS[1] = random(1, 2);
        }
        
            break;
            
        case "wizard":
        background(118, 68, 227);
        
        backgroundSpecialAssets(251, 163, 5, 5, "wizard 3");
        backgroundSpecialAssets(153, 101, 2, 2, "wizard 3");
        backgroundSpecialAssets(203, 210, 4, 4, "wizard 3");
        backgroundSpecialAssets(235, 260, 1, 1, "wizard 3");
        backgroundSpecialAssets(275, 232, 2, 2, "wizard 3");
        backgroundSpecialAssets(128, 167, 2, 2, "wizard 3");
        backgroundSpecialAssets(173, 272, 2, 2, "wizard 3");
        backgroundSpecialAssets(259, 58, 2, 2, "wizard 3");
        backgroundSpecialAssets(259, 315, 3, 3, "wizard 3");
        backgroundSpecialAssets(164, 344, 3, 3, "wizard 3");
        backgroundSpecialAssets(118, 258, 2, 2, "wizard 3");
        backgroundSpecialAssets(209, 134, 1, 1, "wizard 3");
        backgroundSpecialAssets(121, 47, 1, 1, "wizard 3");
        
        backgroundSpecialAssets(darkForestCloudsX[0], darkForestCloudsY[0], 50, 25, "wizard 2");
        backgroundSpecialAssets(darkForestCloudsX[1], darkForestCloudsY[1], 50, 25, "wizard 2");
        darkForestCloudsX[0] += darkForestCloudsS[0];
        darkForestCloudsX[1] += darkForestCloudsS[1];
        
        if(darkForestCloudsX[0] >= 400)
        {
            darkForestCloudsX[0] = 0;
            darkForestCloudsY[0] = random(0, 375);
            darkForestCloudsS[0] = random(1, 2);
        }
        
        if(darkForestCloudsX[1] >= 400)
        {
            darkForestCloudsX[1] = 0;
            darkForestCloudsY[1] = random(0, 375);
            darkForestCloudsS[1] = random(1, 2);
        }
        
            break;
            
        case "planet":
            
            background(1, 51, 64);
            
            backgroundSpecialAssets(140, 73, 100, 100, "alien", color(7, 209, 13), color(115, 22, 138), 34);
            backgroundSpecialAssets(283, 190, 70, 70, "alien", color(9, 50, 153), color(0, 255, 111), -10);
            backgroundSpecialAssets(155, 280, 70, 70, "alien", color(83, 9, 153), color(194, 158, 15), -12);
            
            fill(0, 0, 0, 150);
            rect(0, 0, 400, 400);
            
            backgroundSpecialAssets(251, 135, 5, 5, "wizard 3");
            backgroundSpecialAssets(153, 112, 2, 2, "wizard 3");
            backgroundSpecialAssets(219, 210, 4, 4, "wizard 3");
            backgroundSpecialAssets(235, 260, 1, 1, "wizard 3");
            backgroundSpecialAssets(275, 249, 2, 2, "wizard 3");
            backgroundSpecialAssets(128, 167, 2, 2, "wizard 3");
            backgroundSpecialAssets(173, 194, 2, 2, "wizard 3");
            backgroundSpecialAssets(259, 62, 2, 2, "wizard 3");
            backgroundSpecialAssets(259, 315, 3, 3, "wizard 3");
            backgroundSpecialAssets(164, 363, 3, 3, "wizard 3");
            backgroundSpecialAssets(118, 258, 2, 2, "wizard 3");
            backgroundSpecialAssets(209, 163, 1, 1, "wizard 3");
            backgroundSpecialAssets(121, 54, 1, 1, "wizard 3");
            
            backgroundSpecialAssets(darkForestCloudsX[0], darkForestCloudsY[0], 100, 50, "enterprize");
            
            backgroundSpecialAssets(-darkForestCloudsX[1], -darkForestCloudsY[1], 15, -20, "tartis", 0, 0, 180);
            
            darkForestCloudsX[0] += darkForestCloudsS[0];
            darkForestCloudsX[1] += darkForestCloudsS[1];
            
            if(darkForestCloudsX[0] >= 400)
            {
                darkForestCloudsX[0] = 0;
                darkForestCloudsY[0] = random(0, 375);
                darkForestCloudsS[0] = random(1, 2);
            }
            
            if(darkForestCloudsX[1] >= 400)
            {
                darkForestCloudsX[1] = 0;
                darkForestCloudsY[1] = random(0, 375);
                darkForestCloudsS[1] = random(1, 2);
            }
            break;
            
        case "robot":
            
        background(59, 91, 102);
        
        backgroundSpecialAssets(240, 118, 30, 30, "robot", 0, 0, -205);
        backgroundSpecialAssets(283, 220, 50, 50, "robot", 0, 0, -246);
        backgroundSpecialAssets(113, 118, 130, 130, "robot", 0, 0, -59);
        
        fill(59, 91, 102, 150);
        rect(0, 0, 400, 400);
        
        fill(61, 60, 61);
        rect(0, 0, 100, 400);
        rect(300, 0, 100, 400);
            
            break;
            
        case "fairy":
        
        background(250, 197, 245);
        pushMatrix();
        translate(31, 0);
        backgroundSpecialAssets(153, 44, 70, 51, "fairy", color(255, 255, 10, 170), color(255, 210, 10, 50));
        backgroundSpecialAssets(184, 89, 70, 51, "fairy", color(255, 255, 10, 170), color(255, 210, 10, 50), -62);
        backgroundSpecialAssets(233, 90, 70, 51, "fairy", color(255, 255, 10, 170), color(255, 210, 10, 50), -111);
        backgroundSpecialAssets(263, 58, 70, 51, "fairy", color(255, 255, 10, 170), color(255, 210, 10, 50), -152);
        backgroundSpecialAssets(174, 0, 70, 51, "fairy", color(255, 255, 10, 170), color(255, 210, 10, 50), -137);
        backgroundSpecialAssets(235, 7, 70, 51, "fairy", color(255, 255, 10, 170), color(255, 210, 10, 50), -46);
        backgroundSpecialAssets(210, 44, 51, 51, "fairy", color(145, 10, 255, 170), color(157, 10, 255, 50), 12);
        popMatrix();

        pushMatrix();
        translate(-66, 23);
        backgroundSpecialAssets(220, 207, 32, 20, "fairy", color(4, 212, 18, 170), color(48, 138, 18, 50), -268);
        backgroundSpecialAssets(203, 207, 32, 20, "fairy", color(4, 212, 18, 170), color(48, 138, 18, 50), -225);
        backgroundSpecialAssets(190, 196, 32, 20, "fairy", color(4, 212, 18, 170), color(48, 138, 18, 50), -163);
        backgroundSpecialAssets(193, 179, 32, 20, "fairy", color(4, 212, 18, 170), color(48, 138, 18, 50), -116);
        backgroundSpecialAssets(206, 167, 32, 20, "fairy", color(4, 212, 18, 170), color(48, 138, 18, 50), -76);
        backgroundSpecialAssets(226, 171, 32, 20, "fairy", color(4, 212, 18, 170), color(48, 138, 18, 50), -24);
        backgroundSpecialAssets(231, 191, 32, 20, "fairy", color(4, 212, 18, 170), color(48, 138, 18, 50), 37);
        backgroundSpecialAssets(210, 188, 20, 20, "fairy", color(4, 172, 214, 170), color(21, 163, 219, 50), 12);
        popMatrix();
        
        pushMatrix();
        translate(50, 97);
        backgroundSpecialAssets(220, 207, 32, 20, "fairy", color(61, 235, 229, 170), color(61, 235, 229, 50), -268);
        backgroundSpecialAssets(203, 207, 32, 20, "fairy", color(61, 235, 229, 170), color(61, 235, 229, 50), -225);
        backgroundSpecialAssets(190, 196, 32, 20, "fairy", color(61, 235, 229, 170), color(61, 235, 229, 50), -163);
        backgroundSpecialAssets(193, 179, 32, 20, "fairy", color(61, 235, 229, 170), color(61, 235, 229, 50), -116);
        backgroundSpecialAssets(206, 167, 32, 20, "fairy", color(61, 235, 229, 170), color(61, 235, 229, 50), -76);
        backgroundSpecialAssets(226, 171, 32, 20, "fairy", color(61, 235, 229, 170), color(61, 235, 229, 50), -24);
        backgroundSpecialAssets(231, 191, 32, 20, "fairy", color(61, 235, 229, 170), color(61, 235, 229, 50), 37);
        backgroundSpecialAssets(210, 188, 20, 20, "fairy", color(4, 172, 214, 170), color(21, 163, 219, 50), 12);
        popMatrix();
            
            break;
            
        case "dragon":
            
            background(209, 247, 255);
            
            backgroundSpecialAssets(darkForestCloudsX[0], darkForestCloudsY[0], 50, 25, "wizard 2");
            backgroundSpecialAssets(darkForestCloudsX[1], darkForestCloudsY[1], 50, 25, "wizard 2");
            darkForestCloudsX[0] += darkForestCloudsS[0];
            darkForestCloudsX[1] += darkForestCloudsS[1];
            
            if(darkForestCloudsX[0] >= 400)
            {
                darkForestCloudsX[0] = 0;
                darkForestCloudsY[0] = random(0, 375);
                darkForestCloudsS[0] = random(1, 2);
            }
            
            if(darkForestCloudsX[1] >= 400)
            {
                darkForestCloudsX[1] = 0;
                darkForestCloudsY[1] = random(0, 375);
                darkForestCloudsS[1] = random(1, 2);
            }
            
            break;
            
        case "current":
            
            background(99, 245, 255);
            
            var waterX = -40 + sin(frameCount * 5) * 10;
            var waterY = sin(frameCount * 7) * 7;
            
            pushMatrix();
            
            translate(-40, 0);
            
            fill(255, 255, 255, 90);
            noStroke();
            
            for(var i = 0;i < 3 * 150; i += 150)
            {
                beginShape();
                vertex(waterX + 50 + i,waterY - 10);
                vertex(waterX + 40 + i,waterY + 200);
                vertex(waterX + 70 + i,waterY + 190);
                vertex(waterX + 102 + i,waterY - 10);
                endShape();
            }
            
            for(var i = 0;i < 3 * 150; i += 150)
            {
                beginShape();
                vertex(waterX + 50 + i + 60,waterY - 10);
                vertex(waterX + 40 + i + 60,waterY + 260);
                vertex(waterX + 70 + i + 60,waterY + 250);
                vertex(waterX + 102 + i + 86,waterY - 10);
                endShape();
            }
            
            popMatrix();
            
            noStroke();
            for(var i =0;i<bubbleX.length;++i)
            {
                bubbleX[i]+=bubbleSize[i]/5;
                fill(0, 187, 255,100);
                ellipse(bubbleX[i],bubbleY[i],bubbleSize[i],bubbleSize[i]);
                if(bubbleX[i]>400)
                {
                    bubbleX[i]=-20;
                    bubbleY[i] = random(0,400);
                }
            }
            
            break;
            
        case "fire":
            
            background(18, 18, 18);
            
            
            noStroke();
            for(var i =0;i<bubbleX.length;++i)
            {
                bubbleX[i] += fireSpeed[i];
                
                fireSpeed[i] += fireSpeed_gravity[i];
                
                fill(255, 153, 0, 100);
                ellipse(bubbleY[i],bubbleX[i],bubbleSize[i] / 2,bubbleSize[i] * 2);
                if(bubbleX[i] > 400)
                {
                    bubbleX[i]= -random(100, 400);
                    bubbleY[i] = random(0,400);
                    fireSpeed[i] = 0;
                    
                    fireSpeed[i] = -bubbleSize[i] / 5;
                }
            }
            
            
            fill(59, 59, 59);
            rect(0, 0, 100, 400);
            rect(300, 0, 150, 400);
            
            break;
    }
    
};

//change background styles
var gameBackgroundApply = function(){
    
    gameBackground(backgroundStyles);
    
    switch(boughtBackgrounds)
    {
        case 0:
            
            backgroundStyles = "original";
            
            break;
            
        case 1:
            
            backgroundStyles = "grey";
            
            break;
            
        case 2:
            
            backgroundStyles = "green";
            
            break;
            
        case 3:
            
            backgroundStyles = "red";
            
            break;
            
        case 4:
            
            backgroundStyles = "rainbow";
            
            break;
            
        case 5:
            
            backgroundStyles = "dark-forest";
            
            break;
            
        case 6:
            
            backgroundStyles = "wizard";
            
            break;
            
        case 7:
            
            backgroundStyles = "planet";
            
            break;
            
        case 8:
            
            backgroundStyles = "robot";
            
            break;
            
        case 9:
            
            backgroundStyles = "fairy";
            
            break;
            
        case 10:
            
            backgroundStyles = "dragon";
            
            break;
            
        case 11:
            
            backgroundStyles = "current";
            
            break;
            
        case 12:
            
            backgroundStyles = "fire";
            
            break;
    }
    
};

//apply game objects
var applyGame = function(){
    
    if(sceneTimerState === false)
    {
    
    gameBackgroundColor(backgroundStyles);
    
    spikeEngine();
    
    gameBackgroundApply();
    
    applyGems();
    
    player();
    
    if(birdFlap > birdFlap2 && birdFlap > 1)
    {
        birdFlap3 = true;
    }
    
    }
};

//button
var button = function(x, y, w, h, sceneSwitch){
    
    if(sceneTimerState === false)
    {
    
    if(mouse.X > x && mouse.X < x + w && mouse.Y > y && mouse.Y < y + h && cursorLoad <= 0)
    {
        x -= 2;
        y -= 2;
        w += 4;
        h += 4;
        
        cursor(HAND);
    }
    
    noStroke();
    fill(0, 179, 255);
    rect(x, y, w, h, w / 6);
    
    switch(sceneSwitch)
    {
        case "game":
            
            fill(255, 255, 255);
            
            beginShape();
            vertex(x + w / 2.7, y + h / 3.9);
            vertex(x + w / 2.7, y + h / 1.35);
            vertex(x + w / 1.4, y + h / 2);
            endShape();
            
            break;
            
        case "store":
            
            stroke(255, 255, 255);
            strokeWeight(3);
            
            beginShape();
            vertex(x + w / 8, y + h/ 6);
            vertex(x + w / 3, y + h/ 5);
            vertex(x + w / 2.5, y + h / 1.4);
            vertex(x + w / 1.2, y + h / 1.4);
            vertex(x + w / 1.09, y + h / 5);
            vertex(x + w / 1.3, y + h / 5);
            endShape();
            
            ellipse(x + w / 2.3, y + h / 1.12, w / 10, h / 8);
            ellipse(x + w / 1.2, y + h / 1.12, w / 10, h / 8);
            line(x + w / 2.4, y + h / 1.2, x + w / 2.5, y + h / 1.4);
            line(x + w / 1.22, y + h / 1.20, x + w / 2.4, y + h / 1.25);
            
            noStroke();
            
            birdStyle(x + w / 1.8, y + h / 3, w / 4, -h / 3, 287, "white");
            
            break;
            
        case "home":
            
            stroke(255, 255, 255);
            strokeWeight(5);
            rect(x + w / 4, y + h / 2.2, w / 2, h / 2.5);
            
            line(x + w / 6, y + h / 2.1, x + w / 1.2, y + h / 2.1);
            line(x + w / 1.2, y + h / 2.2, x + w / 2, y + h / 10);
            line(x + w / 5.4, y + h / 2.2, x + w / 2, y + h / 10);
            
            
            strokeWeight(2);
            rect(x + w / 2, y + h / 1.6, w / 5, h / 4.9);
            
            break;
            
        case "achievements":
            
            noStroke();
            fill(255, 255, 255);
            arc(x + w / 2, y + h / 7, w / 2, h / 1.3, 0, 180);
            arc(x + w / 2, y + h / 1.1, w / 3, h / 3, -180, 0);
            rect(x + w / 2.15, y + h / 2, w / 20, h / 3);
            
            stroke(255, 255, 255);
            strokeWeight(3);
            noFill();
            
            arc(x + w / 1.4, y + h / 3.7, w / 3, h / 5, -90, 98);
            arc(x + w / 3.4, y + h / 3.7, w / 3, h / 5, 55, 180 + 90);
            
            break;
            
        case "store_bird":
            
            birdStyle(x + w / 2, y + h / 2, w / 2.5, -h / 2, 287, "white");
            
            break;
            
        case "store_background":
            
            stroke(255, 255, 255);
            strokeWeight(5);
            rect(x + w / 6, y + h / 8, w / 1.54, h / 1.4);
            
            noStroke();
            fill(255, 255, 255);
            arc(x + w / 2.5, y + h / 2.9, w / 2, h / 2, 90 + 65, 180 + 25);
            arc(x + w / 1.7, y + h / 1.5, w / 2, h / 2, 90 + 65 + 180, 180 + 25 + 180);
            
            break;
            
        case "store_powerups":
            
            fill(255, 255, 255);
            beginShape();
            vertex(x + w / 2.5, y + h / 9.5);
            vertex(x + w / 1.8, y + h / 6.1);
            vertex(x + w / 2.1, y + h / 2.3);
            vertex(x + w / 1.4, y + h / 2.4);
            vertex(x + w / 2.2, y + h / 1.1);
            vertex(x + w / 2.0, y + h / 1.8);
            vertex(x + w / 3.7, y + h / 1.6);
            endShape();
            
            break;
            
        case "inventory":
            
            stroke(255, 255, 255);
            strokeWeight(3);
            beginShape();
            vertex(x + w / 2, y + h / 8);
            vertex(x + w / 1.85, y + h / 1.2);
            vertex(x + w / 2.15, y + h / 1.2);
            vertex(x + w / 2, y + h / 8);
            endShape();
            
            break;
    }
    
    noStroke();
    
    if(mouse.X > x && mouse.X < x + w && mouse.Y > y && mouse.Y < y + h && cursorLoad <= 0)
    {
        fill(255, 255, 255, 50);
        rect(x, y, w, h, w / 6);
        
        if(sceneSwitch === "store_powerups")
        {
            textSize(20);
            fill(0, 149, 255);
            text("Gadget Store!", 200, 310);
        }
        
        if(sceneSwitch === "store_background")
        {
            textSize(20);
            fill(0, 149, 255);
            text("Background Store!", 200, 310);
        }
        
        if(sceneSwitch === "store_bird")
        {
            textSize(20);
            fill(0, 149, 255);
            text("Bird Store!", 200, 310);
        }
        
        if(sceneSwitch === "inventory")
        {
            textSize(20);
            fill(0, 149, 255);
            text("Inventory!", 200, 310);
        }
        
        if(mouseIsPressed)
        {
            scene = sceneSwitch;
            cursorLoad = 20;
            
            if(sceneSwitch === "game")
            {
                birdFlap = 0;
                birdFlap3 = false;
                emeraldCoinX = (200 - emeraldCoinSize / 2) + random(-20, 20);
                emeraldCoinY = random(10, 400 - emeraldCoinSize - 10);
                lateNightAchieveCount += 1;
                protetiveBallLife = 100;
                protetiveBallLifeState = false;
                menuFluidMotionSpeed = 1.3;
            }
        }
    }
    }
};

//particles on menu
var particl_menu = function(x, y, s, r){
    
    fill(0, 149, 255, 50);
    pushMatrix();
    rectMode(CENTER);
    translate(x, y);
    rotate(r);
    rect(0, 0, s, s, s / 6);
    rectMode(0);
    popMatrix();
};

//logo vars and functions
var grow = 0;
var growSpeed = 3;
var delayTimerEmerald = 0;
var emeraldX = 200;
var emeraldXSpeed = 3;
var textEmeraldGamesX = 490;
var textEmeraldGamesSpeedX = 3;
var shade = 0;
var emeraldGemLogo = function(x, y, s){
    
    //stroke
    stroke(255, 255, 255, 35);
    strokeWeight(s / 25);
    
    //base
    fill(111, 252, 98);
    beginShape();
    vertex(x - s, y - s / 2);
    vertex(x - s / 2, y - s);
    vertex(x + s / 2, y - s);
    vertex(x + s, y - s / 2);
    vertex(x + s, y + s);
    vertex(x + s / 2, y + s * 1.5);
    vertex(x - s / 2, y + s * 1.5);
    vertex(x - s, y + s);
    vertex(x - s, y - s / 2);
    endShape();
    
    //1
    fill(113, 245, 98);
    noStroke();
    beginShape();
    vertex(x - s, y - s / 2);
    vertex(x - s / 2, y - s);
    vertex(x - s / 3, y - s / 2);
    vertex(x - s / 2, y - s / 3);
    endShape();
    
    //2
    fill(82, 235, 65);
    beginShape();
    vertex(x - s / 2, y - s);
    vertex(x - s / 3, y - s / 2);
    vertex(x + s / 3, y - s / 2);
    vertex(x + s / 2, y - s);
    endShape();
    
    //3
    beginShape();
    fill(72, 227, 54);
    vertex(x + s / 2, y - s);
    vertex(x + s, y - s / 2);
    vertex(x + s / 2, y - s / 3);
    vertex(x + s / 3, y - s / 2);
    endShape();
    
    //4
    fill(67, 217, 48);
    beginShape();
    vertex(x + s, y - s / 2);
    vertex(x + s, y + s);
    vertex(x + s / 2, y + s / 1.1);
    vertex(x + s / 2, y - s / 3);
    endShape();
    
    //5
    fill(57, 207, 37);
    beginShape();
    vertex(x + s, y + s);
    vertex(x + s / 2, y + s * 1.5);
    vertex(x + s / 3, y + s);
    vertex(x + s / 2, y + s / 1.2);
    endShape();
    
    //6
    fill(57, 196, 35);
    beginShape();
    vertex(x + s / 3, y + s);
    vertex(x + s / 2, y + s * 1.5);
    vertex(x - s / 2, y + s * 1.5);
    vertex(x - s / 3, y + s);
    endShape();
    
    //7
    fill(79, 214, 55);
    beginShape();
    vertex(x - s, y + s);
    vertex(x - s / 2, y + s * 1.5);
    vertex(x - s / 3, y + s);
    vertex(x - s / 2, y + s / 1.2);
    endShape();
    
    //8
    fill(96, 240, 67);
    beginShape();
    vertex(x - s, y + s);
    vertex(x - s / 2, y + s / 1.2);
    vertex(x - s / 2, y - s / 3);
    vertex(x - s, y - s / 2);
    endShape();
    
    //shade
    fill(0, 0, 0, 4);
    beginShape();
    vertex(x + s / 2.3, y - s / 2.3);
    vertex(x + s / 2, y - s / 3);
    vertex(x + s / 2, y + s / 1.2);
    vertex(x + s / 3, y + s);
    vertex(x - s / 3, y + s);
    vertex(x - s / 2.3, y + s / 1.1);
    endShape();
    
    //shade 2
    fill(0, 0, 0, 5);
    beginShape();
    vertex(x + s / 6, y + s);
    vertex(x + s / 3, y + s);
    vertex(x + s / 2, y + s / 1.2);
    vertex(x + s / 2, y + s / 1.5);
    endShape();

};
var logoPage = function(){

    textAlign(CENTER, CENTER);
    
    background(255, 255, 255);
    
    //emerald efect
    pushMatrix();
    translate(emeraldX, 182);
    rotate(grow * 4.53);
    emeraldGemLogo(0, 0, grow);
    popMatrix();
    
    //grow emerald
    grow += growSpeed;
    
    //when emerald is at the right length
    if(grow >= 35)
    {
        growSpeed -= 0.1;
        delayTimerEmerald += 1;
    }
    
    //textX move to the side
    if(delayTimerEmerald >= 50)
    {
        textEmeraldGamesX -= textEmeraldGamesSpeedX;
    }
    
    //once text touches the emerald
    if(textEmeraldGamesX <= 365)
    {
        textEmeraldGamesSpeedX -= 0.07;
        emeraldX -= emeraldXSpeed;
    }
    
    //limmit the emerald moving to the Xpos
    if(emeraldX < 180)
    {
        emeraldXSpeed -= 0.07;
    }
    
    //once the speed is less then 0
    if(emeraldXSpeed <= 0)
    {
        emeraldXSpeed = 0;
        shade += 3;
    }
    
    //once the speed is less then 0
    if(textEmeraldGamesSpeedX <= 0)
    {
        textEmeraldGamesSpeedX = 0;
    }
    
    //once the speed is less then 0
    if(growSpeed <= 0)
    {
        growSpeed = 0;
    }
    
    //text
    textSize(37);
    fill(47, 117, 11);
    text("\x45\x4d\x45\x52\x41\x4c\x44\x0a\x47\x41\x4d\x45\x53\x20\x20\x20\x20", textEmeraldGamesX, 200);
    text("\x45\x4d\x45\x52\x41\x4c\x44\x0a\x47\x41\x4d\x45\x53\x20\x20\x20\x20", textEmeraldGamesX + 2, 200);
    text("\x45\x4d\x45\x52\x41\x4c\x44\x0a\x47\x41\x4d\x45\x53\x20\x20\x20\x20", textEmeraldGamesX, 202);
    text("\x45\x4d\x45\x52\x41\x4c\x44\x0a\x47\x41\x4d\x45\x53\x20\x20\x20\x20", textEmeraldGamesX + 2, 202);
    
    noStroke();
    fill(255, 255, 255, shade);
    rect(0, 0, 400, 400);


};
{
if(emeraldCoinFilter>=2||lateNightAchieveCount>=1||birdSpreeCount>=1||GadgetSpreeCount>=1||BuyEverythingCount >= 1||playerSize < 25||playerSize>25||(gem/2)>FlyBirdCheck||FlyBirdCheck>(gem/2)||(gem/2)<FlyBirdCheck||FlyBirdCheck<(gem/2)||styles!==birdFilter||imageFilter>powerUp||imageFilter<powerUp||achievementFilter>boughtBackgrounds||achievementFilter<boughtBackgrounds||f>birdFlap2||f<birdFlap2||filterGemState>boughtBirds||filterGemState<boughtBirds){sceneTimerState=true;}for(var i=0;i<AccesClicking.length;++i){if(AccesClicking[i]!==birdBoughtState[i]){sceneTimerState=true;}}for(var i=0;i<logButtons.length;++i){if(logButtons[i]!==backgroundsBoughtState[i]){sceneTimerState=true;}}for(var i=0;i<imageLog.length;++i){if(imageLog[i]!==achievements[i]){sceneTimerState=true;}}for(var i=0;i<inventoryFilter.length;++i){if(inventoryFilter[i]!==powerupsBoughtState[i]){sceneTimerState=true;}
}

}

//menu
var menuPage = function(){
    
    if(sceneTimerState === false)
    {
        
    bird_move /= menuFluidMotionSpeed;
    
    if(bird_move >= -1)
    {
        bird_move2 /= menuFluidMotionSpeed;
    }
    if(bird_move2 >= -1)
    {
        bird_move3 /= menuFluidMotionSpeed;
    }
    if(bird_move3 >= -100)
    {
        bird_move4 /= menuFluidMotionSpeed;
    }
    if(bird_move4 >= -100)
    {
        bird_move5 /= menuFluidMotionSpeed;
    }
    
    if(start === false)
    {
        pushMatrix();
        
        translate(bird_move2 * 2, 0);
        
        //bird on menu
        birdStyle(338, 193, 50, 50, -100, "blue");
        
        particl_menu(279, 205, 26, 20);
        particl_menu(249, 194, 24, 10);
        particl_menu(218, 194, 22, -3);
        particl_menu(191, 204, 20, -15);
        particl_menu(167, 215, 18, -38);
        particl_menu(143, 203, 16, -49);
        particl_menu(122, 193, 14, -60);
        particl_menu(104, 193, 10, -66);
        particl_menu(88, 193, 5, -66);
        popMatrix();
        
        pushMatrix();
        translate(0, bird_move);
        //title text
        noFill();
        strokeWeight(10);
        stroke(0, 170, 255);
        
        pushMatrix();
        translate(0, 71);
        //B
        beginShape();
        vertex(122, 25);vertex(122, 69);vertex(148, 69 - 5);vertex(148, 69 - 16);vertex(132, 69 - 25);vertex(148, 69 - 31);vertex(148, 69 - 43);vertex(122, 25);
        endShape();
        
        //I
        beginShape();
        vertex(174, 26);vertex(174, 69);
        endShape();
        
        //R
        beginShape();
        vertex(200, 67);vertex(200, 27);vertex(225, 30);vertex(225, 44);vertex(209, 54);vertex(230, 66);
        endShape();
        
        //D
        beginShape();
        vertex(247, 28);vertex(275, 35);vertex(275, 58);vertex(248, 65);vertex(247, 28);
        endShape();
        popMatrix();
        
        strokeWeight(12);
        
        //F
        beginShape();
        vertex(132, 75);vertex(132, 46);vertex(153, 47);vertex(132, 46);vertex(132, 24);vertex(163, 22);endShape();beginShape(POINT);vertex(154, 47);endShape();
        
        //L
        beginShape();
        vertex(185, 23);vertex(185, 75);vertex(218, 73);
        endShape();
        
        //Y
        beginShape();
        vertex(234, 23);vertex(252, 50);vertex(252, 80);vertex(252, 50);vertex(272, 23);
        endShape();beginShape(POINT);vertex(252, 78);endShape();
        popMatrix();
        
    }
    
    if(start === true)
    {
        textSize(100);
        fill(0, 170, 255);
        text(birdFlap, 200, 90 + bird_move);
        textSize(29);
        
        if(birdFlap3 === true)
        {
            fill(255, 84, 84);
            text("NEW  " + "TOP: " + birdFlap2 + "  NEW", 200, 159 + bird_move);
        }
        
        fill(0, 170, 255);
        text("TOP: " + birdFlap2, 200, 159 + bird_move);
        
        rect(360, 10, 30, 30);
        
        if(mouse.X > 360 && mouse.X < 360 + 30 && mouse.Y > 10 && mouse.Y < 10 + 30)
        {
            fill(255, 255, 255, 50);
            rect(360, 10, 30, 30);
            cursor(HAND);
            
            textSize(15);
            fill(0, 170, 255);
            text("Save Progress", 302, 23);
        }
        
        fill(255, 255, 255);
        rect(360 + 5, 10 + 5, 20, 10 , 3);
        rect(360 + 5, 26 + 5, 20, 10 , 2);
        
        fill(0, 170, 255);
        rect(368, 35, 5, 5);
    }
    
    if(birdFlap2 < birdFlap)
    {
        birdFlap2 = birdFlap;
    }
    
    button(150, 261 - bird_move3, 100, 75, "game");
    button(260, 261 + 25 - bird_move5, 75, 50, "store");
    button(150 - 85, 261 + 25 - bird_move4, 75, 50, "achievements");
    
    if(start === true)
    {
        textAlign(0, 0);
        
        emeraldGem(163 + bird_move2 * 2, 207, 12, color(21, 255, 0));
        
        textSize(30);
        
        fill(0, 149, 255);
        
        if(gem <= 0)
        {
            text("0000", 181 + bird_move2 * 2, 222);
        }
        
        if(gem >= 1 && gem < 10)
        {
            text("000" + gem, 181 + bird_move2 * 2, 222);
        }
        
        if(gem >= 10 && gem < 100)
        {
            text("00" + gem, 181 + bird_move2 * 2, 222);
        }
        
        if(gem >= 100 && gem < 1000)
        {
            text("0" + gem, 181 + bird_move2 * 2, 222);
        }
        
        if(gem >= 1000)
        {
            text(gem, 181 + bird_move2 * 2, 222);
        }
        
    }
    }  
};

//death tran
var deathTranApply = function(){
    
    deathTran += deathTranSpeed;
    fill(255, 255, 255, deathTran);
    rect(0, 0, 400, 400);
    
    if(death === true && playerY >= 400 && scene === "game")
    {
        
        if(gem < deadContinuePopUpPrice)
        {
            deadContinuePopUp = false;
        }
        
        if(gem >= deadContinuePopUpPrice && deadContinuePopUpArcTimer < 0)
        {
            deadContinuePopUp = true;
        }
        
        if(deadContinuePopUp === false)
        {
            deathTranSpeed = 20;
            spikeAnimationLeftSpeed = -2;
            spikeAnimationRightSpeed = -2;
            deadContinuePopUpAnim = -300;
            deadContinuePopUpArcTimer = 360;
        }
        
        if(deadContinuePopUp === true)
        {
            fill(255, 255, 255, 150);
            rect(0, 0, 400, 400);
            
            strokeWeight(2);
            stroke(0, 153, 255, 200);
            fill(255, 255, 255);
            rect(75, 150 + deadContinuePopUpAnim, 250, 100);
            strokeWeight(3);
            stroke(0, 153, 255);
            arc(300, 173 + deadContinuePopUpAnim, 30, 30, 0, deadContinuePopUpArcTimer);
            noStroke();
            
            fill(0, 153, 255);
            textSize(20);
            text("Save me for:", 200, 205 + deadContinuePopUpAnim);
            
            fill(0, 153, 255);
            
            if(mouse.X > 150 && mouse.X < 150 + 100 && mouse.Y > 220 + deadContinuePopUpAnim && mouse.Y < 220 + 25 + deadContinuePopUpAnim)
            {
                fill(53, 171, 250);
                cursor(HAND);
            }
            
            rect(150, 220 + deadContinuePopUpAnim, 100, 25, 5);
            
            fill(0, 153, 255);
            
            if(mouse.X > 80 && mouse.X < 80 + 25 && mouse.Y > 155 + deadContinuePopUpAnim && mouse.Y < 155 + 25 + deadContinuePopUpAnim)
            {
                fill(53, 171, 250);
                cursor(HAND);
            }
            
            rect(80, 155 + deadContinuePopUpAnim, 25, 25, 5);
            
            textAlign(0, 0);
            fill(255, 255, 255);
            text(deadContinuePopUpPrice, 200, 240 + deadContinuePopUpAnim);
            textAlign(CENTER, CENTER);
            
            text("X", 80 + 12.5, 155 + 12.5 + deadContinuePopUpAnim);
            
            emeraldGem(188, 230 + deadContinuePopUpAnim, 8, color(43, 255, 0));
            
            birdStyle(200, 172 + deadContinuePopUpAnim, 30, 30, -90, currentBirdSyle);
            
            deadContinuePopUpAnim /= 1.1;
            
            if(deadContinuePopUpAnim >= -5)
            {
                deadContinuePopUpArcTimer -= 2;
            }
            
            if(deadContinuePopUpArcTimer < 0)
            {
                deadContinuePopUpArcTimer = 360;
                deadContinuePopUp = false;
                deadContinuePopUpTimer = 0;
                deadContinuePopUpAnim = -300;
            }
        }
    }
    if(deathTran >= 350)
    {
        deadContinuePopUpTimer = 0;
        scene = "home";
        playerX = 188;
        playerY = 190;
        playerSize = 25;
        move_sideToSide = playerX - (playerSize / 2);
        moveSpeed = 1;
        gravity = 0;
        gravitySpeed = 0.2;
        scoreGraphic = 50;
        death = false;
        clicked = 0;
        bird_leftOrRight = 25;
        birdGravity_leftOrRight = -gravity;
        spikeCountLeft = 5;
        spikeCountRight = 5;
        spikeAnimationLeft = 0;
        spikeAnimationLeftSpeed = 2;
        spikeAnimationRight = 0;
        spikeAnimationRightSpeed = 2;
        emeraldCoinFilter = 1;
        gemBackColor = color(4, 224, 15, 100);
        bird_move = -300;
        bird_move2 = -300;
        bird_move3 = -300;
        bird_move4 = -300;
        bird_move5 = -300;
        deadContinuePopUp = true;
        deadContinuePopUpPrice = 30;
        deadContinuePopUpAnim = -300;
    }
    if(scene === "home")
    {
        deathTranSpeed = -10;
    }
    if(deathTran <= 0)
    {
        deathTran = 0;
    }
};

//particle in menu on bird
var store_particle = function(x, y, style){
    
    pushMatrix();
    translate(x, y);
    rotate(-14);
    particleStyle(0, 0, 9, 9, style);
    translate(-16, 0);
    rotate(-27);
    particleStyle(-5, 0, 8, 8, style);
    translate(-15, 0);
    rotate(-25);
    particleStyle(-12, 0, 7, 7, style);
    popMatrix();
};
{
var
    birdPrice = [0, 25, 50, 75, 250, 350, 400, 500, 700, 900, 925, 1000, 1200, 1300, 1400, 1500],backgroundPrices = [0, 10, 10, 10, 35, 50, 120, 150, 200, 225, 230, 250, 300],powerupsPrices = [1000, 7000, 10000];
}

//bird store
var store_bird = function(){
    
    if(sceneTimerState === false)
    {
    
   for(var i = 0; i < birdBoughtState.length; ++i)
    {
        birdButtonX[i] = 100;
        birdButtonY[i] = 20 + moreBirds + i * 70;
        fill(201, 227, 255);
        rect(birdButtonX[i], birdButtonY[i], 200, 50);
        
        if(mouse.X > 0 && mouse.X < 400 && mouse.Y > 0 && mouse.Y < 280)
        {
            if(mouse.X > birdButtonX[i] && mouse.X < birdButtonX[i] + 200 && mouse.Y > birdButtonY[i] && mouse.Y < birdButtonY[i] + 50)
            {
                if(gem >= birdPrice[i] || birdBoughtState[i] === true)
                {
                    cursor(HAND);
                }
                
                if(gem < birdPrice[i] && birdBoughtState[i] === false)
                {
                    cursor("not-allowed");
                }
                fill(255, 255, 255, 50);
                rect(birdButtonX[i], birdButtonY[i], 200, 50);
            }
        }
        
        switch(i)
        {
            case 0:
                birdStyle(138 + 30, 47 + moreBirds, 35, 35, -90, "blue");
                store_particle(138, 43 + moreBirds, "blue");
                break;
                
            case 1:
                birdStyle(138 + 30, 116 + moreBirds, 35, 35, -90, "blackToucan");
                store_particle(138, 43 + 70 + moreBirds, "black");
                break;
                
            case 2:
                birdStyle(138 + 30, 186 + moreBirds, 35, 35, -90, "green");
                store_particle(138, 43 + 140 + moreBirds, "green");
                break;
                
            case 3:
                birdStyle(138 + 30, 250 + moreBirds, 35, 35, -90, "boombitbird");
                store_particle(138, 43 + 210 + moreBirds, "red");
                break;
                
            case 4:
                birdStyle(138 + 30, 325 + moreBirds, 35, 35, -90, "ninjabird");
                store_particle(132, 43 + 276 + moreBirds, "ninja");
                break;
                
            case 5:
                store_particle(139, 44 + 291 + moreBirds + 70, "robot");
                birdStyle(138 + 30, 332 + moreBirds + 70, 32, 32, -90, "robot");
                break;
                
            case 6:
                store_particle(145, 43 + 291 + moreBirds + 130, "unicorn");
                birdStyle(146 + 30, 43 + 286 + moreBirds + 140, 28, 28, -90, "unicorn");
                break;
                
            case 7:
                store_particle(145, 43 + 291 + moreBirds + 200, "alien");
                birdStyle(147 + 30, 43 + 287 + moreBirds + 214, 28, 28, -90, "alien");
                break;
                
            case 8:
                store_particle(145, 43 + 291 + moreBirds + 270, "wizard");
                birdStyle(147 + 30, 43 + 282 + moreBirds + 284, 28, 28, -90, "wizard");
                break;
                
            case 9:
                store_particle(145, 113 + 291 + moreBirds + 270, "reaper");
                birdStyle(147 + 30, 117 + 282 + moreBirds + 284, 26, 26, -90, "reaper");
                break;
                
            case 10:
                store_particle(140, 173 + 300 + moreBirds + 270, "carissa");
                birdStyle(147 + 30, 180 + 282 + moreBirds + 284, 35, 35, -90, "carissa");
                break;
                
            case 11:
                store_particle(148, 173 + 370 + moreBirds + 270 + 5, "fairy");
                birdStyle(147 + 30, 180 + 282 + moreBirds + 284 + 65 + 8, 25, 25, -90, "fairy");
                break;
                
            case 12:
                store_particle(140, 173 + 300 + moreBirds + 270 + 140, "vampire");
                birdStyle(147 + 30, 180 + 282 + moreBirds + 284 + 135, 35, 35, -90, "vampire");
                break;
                
            case 13:
                store_particle(140, 173 + 300 + moreBirds + 270 + 210, "dragon");
                birdStyle(147 + 30, 180 + 282 + moreBirds + 284 + 210, 35, 35, -90, "dragon");
                break;
                
            case 14:
                store_particle(145, 173 + 300 + moreBirds + 270 + 280, "blackhole");
                birdStyle(147 + 30, 180 + 282 + moreBirds + 284 + 285, 30, 30, -90, "blackhole");
                break;
                
            case 15:
                store_particle(145, 173 + 370 + moreBirds + 270 + 280, "pheonix");
                birdStyle(147 + 30, 180 + 282 + moreBirds + 284 + 285 + 70, 30, 30, -90, "pheonix");
                break;
                
        }
        
        
        fill(255, 255, 255);
        rect(birdButtonX[i] - 20, birdButtonY[i] + 50, 240, 50);
        
        if(boughtBirds === i)
        {
            textSize(20);
            fill(3, 148, 10);
            text("Selected", birdButtonX[i] + 150, birdButtonY[i] + 25);
        }
        
        if(birdBoughtState[i] === false)
        {
            textAlign(0, 0);
            textSize(24);
            fill(3, 148, 10);
            text(birdPrice[i], 238, 45 + i * 70 + moreBirds);
            emeraldGem(birdButtonX[i] + 127, birdButtonY[i] + 13, 10, color(43, 255, 0));
            textAlign(CENTER, CENTER);
        }
        
            
        textSize(13);
        fill(0, 77, 255);
        text(birdNames[i], 246, 61 + i * 70 + moreBirds);
        
        if(mouse.X > 0 && mouse.X < 400 && mouse.Y > 0 && mouse.Y < 280)
        {
            if(mouse.X > birdButtonX[i] && mouse.X < birdButtonX[i] + 200 && mouse.Y > birdButtonY[i] && mouse.Y < birdButtonY[i] + 50)
            {
                if(i === 10)
                {
                    fill(3, 90, 161);
                    textSize(11);
                    text("In honor of my\nsuper cool cousin\nCarissa", 50, 190);
                }
            }
        }
        
    }
    
    if(moreBirds >= -(4 * 70) * 2)
    {
        fill(0, 153, 255);
        rect(325, 138, 25, 25);
        
        if(mouse.X > 325 && mouse.X < 325 + 25 && mouse.Y > 138 && mouse.Y < 138 + 25)
        {
            fill(255, 255, 255, 50);
            rect(325, 138, 25, 25);
            cursor(HAND);
        }
    }
    
    if(moreBirds < 0)
    {
        fill(0, 153, 255);
        rect(325 - 275, 138, 25, 25);
        
        if(mouse.X > 325 - 275 && mouse.X < 325 + 25 - 275 && mouse.Y > 138 && mouse.Y < 138 + 25)
        {
            fill(255, 255, 255, 50);
            rect(325 - 275, 138, 25, 25);
            cursor(HAND);
        }
    }
    
    fill(255, 255, 255);
    rect(0, 281, 400, 200);
    
    textSize(24);
    textAlign(0, 0);
    fill(0, 163, 3);
    text("" + gem, 203, 320);
    emeraldGem(187, 307, 10, color(43, 255, 0));
    textAlign(CENTER, CENTER);
    
    textSize(17);
    
    fill(255, 255, 255);
    
    if(moreBirds >= -(4 * 70) * 2)
    {
        text(">", 339, 149);
    }
    
    if(moreBirds < 0)
    {
        text("<", 336 - 275, 149);
    }
    
    button(170, 336, 60, 40, "store");
    
    }
};

//background store
var store_background = function(){
    
    if(sceneTimerState === false)
    {
    
    textAlign(CENTER, CENTER);
    
    switch(moreBackgrounds)
    {
        case 0:
        gameBackgroundColor("original");
        spike(100, 100, 30, 30, "left", "original");
        spike(300, 300, 30, 30, "right", "original");
        gameBackground("original");
            break;
    
        case -400:
        gameBackgroundColor("grey");
        spike(100, 100, 30, 30, "left", "grey");
        spike(300, 300, 30, 30, "right", "grey");
        gameBackground("grey");
            break;
            
        case -800:
        gameBackgroundColor("green");
        spike(100, 100, 30, 30, "left", "green");
        spike(300, 300, 30, 30, "right", "green");
        gameBackground("green");
            break;
            
        case -1200:
        gameBackgroundColor("red");
        spike(100, 100, 30, 30, "left", "red");
        spike(300, 300, 30, 30, "right", "red");
        gameBackground("red");
            break;
            
        case -1600:
        gameBackgroundColor("rainbow");
        spike(100, 100, 30, 30, "left", "rainbow");
        spike(300, 300, 30, 30, "right", "rainbow");
        gameBackground("rainbow");
            break;
            
        case -2000:
        gameBackgroundColor("dark-forest");
        spike(100, 100, 30, 30, "left", "dark-forest");
        spike(300, 300, 30, 30, "right", "dark-forest");
        gameBackground("dark-forest");
            break;
            
        case -2400:
        gameBackgroundColor("wizard");
        spike(100, 100, 30, 30, "left", "wizard");
        spike(300, 300, 30, 30, "right", "wizard");
        gameBackground("wizard");
            break;
            
        case -2800:
        gameBackgroundColor("planet");
        spike(100, 100, 30, 30, "left", "planet");
        spike(300, 300, 30, 30, "right", "planet");
        gameBackground("planet");
            break;
            
        case -3200:
        gameBackgroundColor("robot");
        spike(100, 100, 30, 30, "left", "robot");
        spike(300, 300, 30, 30, "right", "robot");
        gameBackground("robot");
            break;
            
        case -3600:
        gameBackgroundColor("fairy");
        spike(100, 100, 30, 30, "left", "fairy");
        spike(300, 300, 30, 30, "right", "fairy");
        gameBackground("fairy");
            break;
            
        case -4000:
        gameBackgroundColor("dragon");
        spike(100, 100, 30, 30, "left", "dragon");
        spike(300, 300, 30, 30, "right", "dragon");
        gameBackground("dragon");
            break;
            
        case -4400:
        gameBackgroundColor("current");
        spike(100, 100, 30, 30, "left", "current");
        spike(300, 300, 30, 30, "right", "current");
        gameBackground("current");
            break;
            
        case -4800:
        gameBackgroundColor("fire");
        spike(100, 100, 30, 30, "left", "fire");
        spike(300, 300, 30, 30, "right", "fire");
        gameBackground("fire");
            break;
    }
    
    for(var b = 0; b < backgroundPrices.length; ++b)
    {
        backgroundButtonX[b] = 175 + (b * 400) + moreBackgrounds;
        backgroundButtonY[b] = 270;
        
        
        fill(0, 136, 255);
        rect(backgroundButtonX[b], backgroundButtonY[b], 50, 40);
        
        if(mouse.X > backgroundButtonX[b] && mouse.X < backgroundButtonX[b] + 50 && mouse.Y > backgroundButtonY[b] && mouse.Y < backgroundButtonY[b] + 40)
        {
            if(gem >= backgroundPrices[b])
            {
                cursor(HAND);
            }
            if(gem < backgroundPrices[b])
            {
                cursor("not-allowed");
            }
            fill(255, 255, 255, 50);
            rect(backgroundButtonX[b], backgroundButtonY[b], 50, 40);
        }
        
        if(backgroundsBoughtState[b] === false)
        {
            textSize(17);
            fill(255, 255, 255);
            text(backgroundPrices[b], backgroundButtonX[b] + 32, backgroundButtonY[b] + 20);
            emeraldGem(backgroundButtonX[b] + 8, backgroundButtonY[b] + 297 - 278, 6, color(0, 255, 55));
        }
        
        if(backgroundsBoughtState[b] === true && boughtBackgrounds !== b)
        {
            textSize(8);
            fill(255, 255, 255);
            text("PURCHASED", backgroundButtonX[b] + 25, backgroundButtonY[b] + 20);
        }
        
        if(boughtBackgrounds === b)
        {
            textSize(9);
            fill(255, 255, 255);
            text("SELECTED", backgroundButtonX[b] + 25, backgroundButtonY[b] + 20);
        }
    }
    
    if(moreBackgrounds >= -4400)
    {
        fill(0, 153, 255);
        rect(325, 138, 25, 25);
        
        if(mouse.X > 325 && mouse.X < 325 + 25 && mouse.Y > 138 && mouse.Y < 138 + 25)
        {
            fill(255, 255, 255, 50);
            rect(325, 138, 25, 25);
            cursor(HAND);
        }
    }
    
    if(moreBackgrounds < 0)
    {
        fill(0, 153, 255);
        rect(325 - 275, 138, 25, 25);
        
        if(mouse.X > 325 - 275 && mouse.X < 325 + 25 - 275 && mouse.Y > 138 && mouse.Y < 138 + 25)
        {
            fill(255, 255, 255, 50);
            rect(325 - 275, 138, 25, 25);
            cursor(HAND);
        }
    }
    
    textSize(17);
    fill(255, 255, 255);
    
    if(moreBackgrounds >= -4400)
    {
        text(">", 339, 149);
    }
    
    if(moreBackgrounds < 0)
    {
        text("<", 336 - 275, 149);
    } 
    
    textSize(24);
    textAlign(0, 0);
    fill(0, 163, 3);
    text("" + gem, 203, 320 - 250);
    emeraldGem(187, 307 - 250, 10, color(43, 255, 0));
    textAlign(CENTER, CENTER);
    
    button(170, 336, 60, 40, "store");
    
    }
};

//powerUp store
var store_powerup = function(){
    
    if(sceneTimerState === false)
    {
    
    for(var i = 0; i < powerupsBoughtState.length; ++i)
    {
        powerupsButtonX[i] = 100;
        powerupsButtonY[i] = 20 + i * 60;
        
        fill(201, 227, 255);
        rect(powerupsButtonX[i], powerupsButtonY[i], 200, 50);
        
        if(mouse.X > 0 && mouse.X < 400 && mouse.Y > 0 && mouse.Y < 280)
        {
            if(mouse.X > powerupsButtonX[i] && mouse.X < powerupsButtonX[i] + 200 && mouse.Y > powerupsButtonY[i] && mouse.Y < powerupsButtonY[i] + 50)
            {
                if(gem >= powerupsPrices[i])
                {
                    cursor(HAND);
                }
                if(gem < powerupsPrices[i])
                {
                    cursor("not-allowed");
                }
                
                fill(255, 255, 255, 50);
                rect(powerupsButtonX[i], powerupsButtonY[i], 200, 50);
                textSize(12);
            }
        }
        
        if(powerUp === i)
        {
            textSize(20);
            fill(3, 148, 10);
            text("Selected", powerupsButtonX[i] + 100, powerupsButtonY[i] + 20);
        }
        
        if(powerupsBoughtState[i] === false)
        {
            textAlign(0, 0);
            textSize(24);
            fill(3, 148, 10);
            text(powerupsPrices[i], powerupsButtonX[i] + 90, powerupsButtonY[i] + 25);
            emeraldGem(powerupsButtonX[i] + 75, powerupsButtonY[i] + 13, 10, color(43, 255, 0));
            textAlign(CENTER, CENTER);
        }
        
        textSize(13);
        fill(0, 77, 255);
        text(powerupsNames[i], powerupsButtonX[i] + 100, powerupsButtonY[i] + 40);
        
        if(mouse.X > powerupsButtonX[i] && mouse.X < powerupsButtonX[i] + 200 && mouse.Y > powerupsButtonY[i] && mouse.Y < powerupsButtonY[i] + 50)
        {
            fill(0, 98, 255);
            text(powerupsEnscryption[i], 200, 275);
        }
    }
    
    textSize(24);
    textAlign(0, 0);
    fill(0, 163, 3);
    text("" + gem, 203, 320);
    emeraldGem(187, 307, 10, color(43, 255, 0));
    textAlign(CENTER, CENTER);
    
    button(170, 336, 60, 40, "store");
    }
};

//main store lobby
var storePage = function(){
    
    if(sceneTimerState === false)
    {
    
    moreBirds = 0;
    moreBackgrounds = 0;

    button(170, 336, 60, 40, "home");
    
    button(275, 175, 100, 75, "store_bird");
    
    button(150, 175, 100, 75, "store_background");
    
    button(25, 175, 100, 75, "store_powerups");
    
    button(25, 260, 350, 30, "inventory");
    }
};

//achievement page
var achievementsPage = function(){
    
    if(sceneTimerState === false)
    {
    fill(0, 0, 0);
    
    for(var i = 0; i < achievements.length; ++i)
    {
        achievementsX[i] = i * 45;
        
        if(i <= 7)
        {
            achievementsY[i] = 0;
            achievementsX[i] = -4 + i * 75 - 20;
        }
        
        if(i >= 5)
        {
            achievementsY[i] = 75;
            achievementsX[i] = -4 + i * 75 - (75 * 5) - 20;
        }
        
        switch(achievements[i])
        {
            case 0:
            
            noStroke();
            fill(0, 166, 255);
            rect(40 + achievementsX[i], 40 + achievementsY[i], 70, 70, 5);
            
            fill(255, 255, 255);
            ellipse(75 + achievementsX[i], 75 + achievementsY[i], 35, 35);
            
            fill(0, 166, 255);
            ellipse(75 + achievementsX[i], 72 + achievementsY[i], 10, 10);
            arc(75 + achievementsX[i], 81 + achievementsY[i], 10, 10, -180, 0);
            
            stroke(255, 255, 255);
            strokeWeight(3);
            noFill();
            arc(75 + achievementsX[i], 62 + achievementsY[i], 22, 28, -180, 0);
            
                break;
                
                
            case 1:
            
            noStroke();  
                
            fill(227, 224, 227);
            rect(40 + achievementsX[i], 40 + achievementsY[i], 70, 70, 5);
            
            //achievement image
            
            switch(i)
            {
                case 0:
                    
                    birdStyle(50, 75, 30, 30, -90 + sin(frameCount * 5) * 10, "blue");
                    
                    break;
                    
                case 1:
                    
                    birdStyle(114, 60, 30, 30, -90 + sin(frameCount * 3) * 5, "blackToucan");
                    pushMatrix();
                    translate(145, 85);
                    rotate(-sin(frameCount * 7) * 15);
                    fill(13, 168, 5);
                    textSize(30);
                    text("$", 0, 0);
                    
                    popMatrix();
                    
                    break;
                
                case 2:
                    
                    emeraldGem(201, 70, 20 + sin(frameCount * 2) * 3, color(9, 255, 0));
                    
                    break;
                    
                case 3:
                    
                    pushMatrix();
                    translate(276.5, 75);
                    rotate(-sin(frameCount * 7) * 15);
                    textSize(24);
                    fill(252, 184, 47);
                    text("*25*", 0, 0);
                    fill(0, 179, 255);
                    text("25", 0, 0);
                    popMatrix();
                   
                    break;
                    
                case 4:
                    
                    pushMatrix();
                    translate(351, 75);
                    rotate(-sin(frameCount * 10) * 20);
                    fill(255, 255, 255);
                    arc(28, 0, 100, 60, 90 + 45,  180 + 45);
                    textSize(22);
                    fill(0, 179, 255);
                    text("50", 0, 0);
                    popMatrix();
                    
                    break;
                    
                case 5:
                    
                    birdStyle(40, 75 + 60, 30, 30, -90 + sin(frameCount * 5) * 10, "blue");
                    
                    pushMatrix();
                    translate(68, 167);
                    rotate(-sin(frameCount * 7) * 15);
                    fill(122, 52, 2);
                    textSize(25);
                    text("X5", 0, 0);
                    
                    popMatrix();
                    
                    break;
                    
                
                case 6:
                    
                    pushMatrix();
                    translate(48 + sin(frameCount * 10) * 4, 70 + sin(frameCount * 12) * 5);
                    rotate(-sin(frameCount * 7) * 3);
                    fill(255, 149, 0);
                    beginShape();
                    vertex(50 + 60 / 2.5, 50 + 60 / 9.5);
                    vertex(50 + 60 / 1.8, 50 + 60 / 6.1);
                    vertex(50 + 60 / 2.1, 50 + 60 / 2.3);
                    vertex(50 + 60 / 1.4, 50 + 60 / 2.4);
                    vertex(50 + 60 / 2.2, 50 + 60 / 1.1);
                    vertex(50 + 60 / 2.0, 50 + 60 / 1.8);
                    vertex(50 + 60 / 3.7, 50 + 60 / 1.6);
                    endShape();
                    
                    popMatrix();
                    
                    break;    
                    
                case 7:
                    
                    birdStyle(208, 75 + 75, 25, 25, -90 + sin(frameCount * 5) * 10, "pheonix");
                    
                    break;
                    
                case 8:
                    
                    pushMatrix();
                    translate(48 + 150 + sin(frameCount * 4) * 2, 70 + sin(frameCount * 5) * 4);
                    rotate(-sin(frameCount * 10) * 1);
                    fill(255, 149, 0);
                    beginShape();
                    vertex(50 + 60 / 2.5, 50 + 60 / 9.5);
                    vertex(50 + 60 / 1.8, 50 + 60 / 6.1);
                    vertex(50 + 60 / 2.1, 50 + 60 / 2.3);
                    vertex(50 + 60 / 1.4, 50 + 60 / 2.4);
                    vertex(50 + 60 / 2.2, 50 + 60 / 1.1);
                    vertex(50 + 60 / 2.0, 50 + 60 / 1.8);
                    vertex(50 + 60 / 3.7, 50 + 60 / 1.6);
                    endShape();
                    
                    popMatrix();
                    
                    fill(255, 0, 0, 50);
                    arc(275, 150, 60, 60, -180 + frameCount % 380 * 3, 0 + frameCount % 380 * 3);
                    arc(275, 150, 60, 60, -180 + frameCount % 380 * 3, 180 + frameCount % 380 * 3);
                    
                    break;
                    
                case 9:
                    
                    pushMatrix();
                    translate(48 + 205 + sin(frameCount * 4) * 2, 65 + sin(frameCount * 5) * 4);
                    rotate(-sin(frameCount * 10) * 1);
                    fill(255, 149, 0);
                    beginShape();
                    vertex(50 + 60 / 2.5, 50 + 60 / 9.5);
                    vertex(50 + 60 / 1.8, 50 + 60 / 6.1);
                    vertex(50 + 60 / 2.1, 50 + 60 / 2.3);
                    vertex(50 + 60 / 1.4, 50 + 60 / 2.4);
                    vertex(50 + 60 / 2.2, 50 + 60 / 1.1);
                    vertex(50 + 60 / 2.0, 50 + 60 / 1.8);
                    vertex(50 + 60 / 3.7, 50 + 60 / 1.6);
                    endShape();
                    
                    popMatrix();
                    
                    birdStyle(366, 75 + 55, 20, 20, -90 + sin(frameCount * 5) * 10, "blue");
                    
                    pushMatrix();
                    translate(370, 155);
                    rotate(-sin(frameCount * 10) * 12);
                    spike(0, 0, 20, 20, "right", "rainbow");
                    popMatrix();
                    
                    break;
            }
            
                break;
        }
        
        if(mouse.X >= 40 + achievementsX[i] && mouse.X < 40 + 70 + achievementsX[i] && mouse.Y > 40 + achievementsY[i] && mouse.Y < 40 + 70 + achievementsY[i])
        {
            fill(255, 255, 255, 50);
            rect(40 + achievementsX[i], 40 + achievementsY[i], 70, 70);
            
            textSize(20);
            fill(0, 0, 0);
            
            switch(i)
            {
                case 0:
                    text(achievementNames[0] + "\nFly for the first time.", 200, 270);
                    break;
                    
                case 1:
                    text(achievementNames[1] + "\nBuy your first bird.", 200, 270);
                    break;
                    
                case 2:
                    text(achievementNames[2] + "\nGet 50 or more gems.", 200, 270);
                    break;
                    
                case 3:
                    text(achievementNames[3] + "\nGet a score of 25 or more.", 200, 270);
                    break;
                    
                case 4:
                    text(achievementNames[4] + "\nPlay 50 games.", 200, 270);
                    break;
                    
                case 5:
                    text(achievementNames[5] + "\nBuy five birds.", 200, 270);
                    break;
                    
                case 6:
                    text(achievementNames[6] + "\nBuy your first gadget.", 200, 270);
                    break;
                    
                case 7:
                    text(achievementNames[7] + "\nBuy the last bird.", 200, 270);
                    break;
                    
                case 8:
                    text(achievementNames[8] + "\nBuy every gadget.", 200, 270);
                    break;
                    
                case 9:
                    text(achievementNames[9] + "\nBuy everything in this game.", 200, 270);
                    break;
            }
        }
    }
    
    
    button(170, 336, 60, 40, "home");
    }
    
};

//inventory
var inventoryScene = "bird";
var inventoryButton = function(x, y, w, h, sceneSwitch){
    
    if(mouse.X > x && mouse.X < x + w && mouse.Y > y && mouse.Y < y + h && cursorLoad <= 0 && inventoryScene !== sceneSwitch)
    {
        x -= 2;
        y -= 2;
        w += 4;
        h += 4;
        
        cursor(HAND);
    }
    
    noStroke();
    fill(0, 179, 255);
    rect(x, y, w, h, w / 6);
    
    switch(sceneSwitch)
    {
        case "bird":
            
            birdStyle(x + w / 2, y + h / 2, w / 7, -h / 1.7, 287, "white");
            
            break;
            
        case "background":
            
            stroke(255, 255, 255);
            strokeWeight(5);
            rect(x + w / 6, y + h / 8, w / 1.54, h / 1.4);
            
            noStroke();
            fill(255, 255, 255);
            arc(x + w / 2.5, y + h / 2.5, w / 2, h / 2, 90 + 65, 180 + 25);
            arc(x + w / 1.7, y + h / 1.9, w / 2, h / 2, 90 + 65 + 180, 180 + 25 + 180);
            
            break;
            
        case "powerups":
            
            fill(255, 255, 255);
            beginShape();
            vertex(x + w / 2.5, y + h / 9.5);
            vertex(x + w / 1.8, y + h / 6.1);
            vertex(x + w / 2.1, y + h / 2.3);
            vertex(x + w / 1.4, y + h / 2.4);
            vertex(x + w / 2.2, y + h / 1.1);
            vertex(x + w / 2.0, y + h / 1.8);
            vertex(x + w / 3.7, y + h / 1.6);
            endShape();
            
            break;

    }
    
    noStroke();
    
    
    if(inventoryScene === sceneSwitch)
    {
        fill(255, 255, 255, 150);
        rect(x, y, w, h, w / 6);
    }
    
    if(mouse.X > x && mouse.X < x + w && mouse.Y > y && mouse.Y < y + h && inventoryScene !== sceneSwitch)
    {
        fill(255, 255, 255, 50);
        rect(x, y, w, h, w / 6);
        
        if(mouseIsPressed)
        {
            inventoryScene = sceneSwitch;
        }
    }
};
var inventory = function(){
    
    if(sceneTimerState === false)
    {
    
    switch(inventoryScene)
    {
        case "bird":
            
            textSize(10);
            
            for(var i = 0; i < birdBoughtState.length; ++i)
            {
                if(i < 5)
                {
                    birdButtonX[i] = 0;
                    birdButtonY[i] = 30 + 30 + i * 45;
                }
                if(i >= 5)
                {
                    birdButtonX[i] = 100;
                    birdButtonY[i] = 30 + -225 + 30 + i * 45;
                }
                if(i >= 10)
                {
                    birdButtonX[i] = 200;
                    birdButtonY[i] = 30 + -225 * 2 + 30 + i * 45;
                }
                
                if(i >= 15)
                {
                    birdButtonX[i] = 300;
                    birdButtonY[i] = -225 + 30 + -225 * 2 + 30 + i * 45;
                }
                
                
                fill(201, 227, 255);
                rect(birdButtonX[i], birdButtonY[i], 100, 40);
                
                if(mouse.X > 0 && mouse.X < 400 && mouse.Y > 0 && mouse.Y < 280)
                {
                    if(mouse.X > birdButtonX[i] && mouse.X < birdButtonX[i] + 100 && mouse.Y > birdButtonY[i] && mouse.Y < birdButtonY[i] + 40)
                    {
                        if(birdBoughtState[i] === true)
                        {
                            cursor(HAND);
                        }
                        if(birdBoughtState[i] === false)
                        {
                            cursor("not-allowed");
                        }
                        fill(255, 255, 255, 50);
                        rect(birdButtonX[i], birdButtonY[i], 100, 40);
                    }
                }
                
                if(birdBoughtState[i] === false)
                {
                    fill(0, 166, 255);
                    rect(birdButtonX[i], birdButtonY[i], 100, 40);
                    
                    fill(0, 0, 0);
                    text(birdNames[i] + "\nNot Purchased", birdButtonX[i] + 50, birdButtonY[i] + 15);
                }
                
                if(boughtBirds === i)
                {   
                    fill(0, 166, 255, 100);
                    rect(birdButtonX[i], birdButtonY[i], 100, 40);
                    
                    fill(0, 0, 0);
                    text("\nSELECTED", birdButtonX[i] + 65, birdButtonY[i] + 15);
                }
                
                if(birdBoughtState[i] === true)
                {
                    fill(0, 0, 0);
                    text(birdNames[i] + "\n", birdButtonX[i] + 60, birdButtonY[i] + 15);
                    birdStyle(birdButtonX[i] + 23, birdButtonY[i] + 25, 15, 15, -90, birdType_store[i]);
                }
                
                switch(i)
                {
                    case 0:
                        birdType_store[i] = "blue";
                        break;
                        
                    case 1:
                        birdType_store[i] = "blackToucan";
                        break;
                        
                    case 2:
                        birdType_store[i] = "green";
                        break;
                        
                    case 3:
                        birdType_store[i] = "boombitbird";
                        break;
                        
                    case 4:
                        birdType_store[i] = "ninjabird";
                        break;
                        
                    case 5:
                        birdType_store[i] = "robot";
                        break;
                        
                    case 6:
                        birdType_store[i] = "unicorn";
                        break;
                        
                    case 7:
                        birdType_store[i] = "alien";
                        break;
                        
                    case 8:
                        birdType_store[i] = "wizard";
                        break;
                        
                    case 9:
                        birdType_store[i] = "reaper";
                        break;
                        
                    case 10:
                        birdType_store[i] = "carissa";
                        break;
                        
                    case 11:
                        birdType_store[i] = "fairy";
                        break;
                        
                    case 12:
                        birdType_store[i] = "vampire";
                        break;
                        
                    case 13:
                        birdType_store[i] = "dragon";
                        break;
                        
                    case 14:
                        birdType_store[i] = "blackhole";
                        break;
                        
                    case 15:
                        birdType_store[i] = "pheonix";
                        break;
                }
            
                
            }
            
            fill(255, 255, 255);
            rect(0, 281, 400, 200);
            
            break;
            
        case "background":
            
            textSize(10);
            
            for(var i = 0; i < backgroundsBoughtState.length; ++i)
            {
                if(i < 5)
                {
                    backgroundButtonX[i] = 0;
                    backgroundButtonY[i] = 30 + 30 + i * 45;
                }
                if(i >= 5)
                {
                    backgroundButtonX[i] = 100;
                    backgroundButtonY[i] = 30 + -225 + 30 + i * 45;
                }
                if(i >= 10)
                {
                    backgroundButtonX[i] = 200;
                    backgroundButtonY[i] = 30 + -225 * 2 + 30 + i * 45;
                }
                
                
                fill(201, 227, 255);
                rect(backgroundButtonX[i], backgroundButtonY[i], 100, 40);
                
                if(mouse.X > 0 && mouse.X < 400 && mouse.Y > 0 && mouse.Y < 280)
                {
                    if(mouse.X > backgroundButtonX[i] && mouse.X < backgroundButtonX[i] + 100 && mouse.Y > backgroundButtonY[i] && mouse.Y < backgroundButtonY[i] + 40)
                    {
                        if(backgroundsBoughtState[i] === true)
                        {
                            cursor(HAND);
                        }
                        if(backgroundsBoughtState[i] === false)
                        {
                            cursor("not-allowed");
                        }
                        fill(255, 255, 255, 50);
                        rect(backgroundButtonX[i], backgroundButtonY[i], 100, 40);
                    }
                }
                
                if(backgroundsBoughtState[i] === false)
                {
                    fill(0, 166, 255);
                    rect(backgroundButtonX[i], backgroundButtonY[i], 100, 40);
                    
                    fill(0, 0, 0);
                    text("Background " + (i + 1) + "\nNot Purchased", backgroundButtonX[i] + 50, backgroundButtonY[i] + 15);
                }
                
                if(boughtBackgrounds === i)
                {   
                    fill(0, 166, 255, 100);
                    rect(birdButtonX[i], birdButtonY[i], 100, 40);
                    
                    fill(0, 0, 0);
                    text("\nSELECTED", backgroundButtonX[i] + 50, backgroundButtonY[i] + 15);
                }
                
                if(backgroundsBoughtState[i] === true)
                {
                    fill(0, 0, 0);
                    text("Background " + (i + 1) + "\n", backgroundButtonX[i] + 50, backgroundButtonY[i] + 15);
                }
                
                
            }
            
            fill(255, 255, 255);
            rect(0, 281, 400, 200);
            
            break;
            
        case "powerups":
            
            for(var i = 0; i < powerupsBoughtState.length; ++i)
            {
                powerupsButtonX[i] = 100;
                powerupsButtonY[i] = 50 + i * 60;
                
                fill(201, 227, 255);
                rect(powerupsButtonX[i], powerupsButtonY[i], 200, 50);
                
                if(mouse.X > 0 && mouse.X < 400 && mouse.Y > 0 && mouse.Y < 280)
                {
                    if(mouse.X > powerupsButtonX[i] && mouse.X < powerupsButtonX[i] + 200 && mouse.Y > powerupsButtonY[i] && mouse.Y < powerupsButtonY[i] + 50)
                    {
                        if(powerupsBoughtState[i] === true)
                        {
                            cursor(HAND);
                        }
                        if(powerupsBoughtState[i] === false)
                        {
                            cursor("not-allowed");
                        }
                        fill(255, 255, 255, 50);
                        rect(powerupsButtonX[i], powerupsButtonY[i], 200, 50);
                        textSize(12);
                    }
                }
                
                if(powerUp === i)
                {
                    fill(0, 166, 255, 100);
                    rect(powerupsButtonX[i], powerupsButtonY[i], 200, 50);
                    
                    textSize(20);
                    fill(0, 0, 0);
                    text("Selected", powerupsButtonX[i] + 100, powerupsButtonY[i] + 20);
                }
                
                if(powerupsBoughtState[i] === false)
                {
                    textSize(20);
                    fill(0, 166, 255);
                    rect(powerupsButtonX[i], powerupsButtonY[i], 200, 50);
                    fill(0, 0, 0);
                    text("Not Purchased", powerupsButtonX[i] + 100, powerupsButtonY[i] + 25);
                }
                
                textSize(13);
                fill(0, 0, 0);
                text(powerupsNames[i], powerupsButtonX[i] + 100, powerupsButtonY[i] + 40);
                
            }
            
            break;
    }
    
    inventoryButton(0, 10, 133, 30, "bird");
    inventoryButton(133, 10, 133, 30, "background");
    inventoryButton(133 * 2, 10, 133, 30, "powerups");
    
    button(170, 336, 60, 40, "store");
    }
};
var inventoryImage = function(x, y, w, h, switchImage){
    
    if(emeraldCoinFilter>=2||lateNightAchieveCount>=1||birdSpreeCount>=1||GadgetSpreeCount>=1||BuyEverythingCount >= 1||
    
    playerSize < 25||playerSize>25||(gem/2)>FlyBirdCheck||FlyBirdCheck>(gem/2)||(gem/2)<  FlyBirdCheck||FlyBirdCheck<(gem/2)||
    
    styles!==birdFilter||imageFilter>powerUp||
    
    imageFilter<powerUp||achievementFilter> boughtBackgrounds||achievementFilter< boughtBackgrounds||f>birdFlap2||
    
    f<birdFlap2||filterGemState>boughtBirds||filterGemState<boughtBirds){sceneTimerState=true;}
    
    
    for(var i=0;i<AccesClicking.length;++i){if(AccesClicking[i]!==birdBoughtState[i]){sceneTimerState=true;}}
    
    
    for(var i=0;i<logButtons.length;++i){if( logButtons[i]!==backgroundsBoughtState[i]){sceneTimerState=true;}}
    
    
    for(var i=0;i<imageLog.length;++i){if(imageLog[i]!==achievements[i]){sceneTimerState=true;}}
    
    
    for(var i=0;i<inventoryFilter.length;++i){if(inventoryFilter[i]!==powerupsBoughtState[i]){sceneTimerState=true;}}
    
    
    for(var i=0;i<birdPrice.length;++i){if(fireFilter[i]!==birdPrice[i]+5){sceneTimerState=true;}}
    
    
    for(var i=0;i<backgroundPrices.length;++i){if(bubbleSpeed[i]!==backgroundPrices[i]){sceneTimerState=true;}}
    
    
    for(var i=0;i<powerupsPrices.length;++i){if(powerupsPrices[i]!==fireGoBackOnTop[i]){sceneTimerState=true;}}

};
inventoryImage(5, 5, 20, 20, filterButtonImages);
var inventoryFilterButton = function(filterImagesArray){
    
    for(var i=0;i<inventoryFilter.length;++i){if(inventoryFilter[i]!==powerupsBoughtState[i]){sceneTimerState=true;}}
    
    
    for(var i=0;i<birdPrice.length;++i){if(fireFilter[i]!==birdPrice[i]+5){sceneTimerState=true;}}
    
    
    for(var i=0;i<backgroundPrices.length;++i){if(bubbleSpeed[i]!==backgroundPrices[i]){sceneTimerState=true;}}
    
    
    for(var i=0;i<powerupsPrices.length;++i){if(powerupsPrices[i]!==fireGoBackOnTop[i]){sceneTimerState=true;}}
    
    if(emeraldCoinFilter>=2||lateNightAchieveCount>=1||birdSpreeCount>=1||GadgetSpreeCount>=1||BuyEverythingCount >= 1||
    
    playerSize < 25||playerSize>25||(gem/2)>FlyBirdCheck||FlyBirdCheck>(gem/2)||(gem/2)<  FlyBirdCheck||FlyBirdCheck<(gem/2)||
    
    styles!==birdFilter||imageFilter>powerUp||
    
    imageFilter<powerUp||achievementFilter> boughtBackgrounds||achievementFilter< boughtBackgrounds||f>birdFlap2||
    
    f<birdFlap2||filterGemState>boughtBirds||filterGemState<boughtBirds){sceneTimerState=true;}
    
    
    for(var i=0;i<AccesClicking.length;++i){if(AccesClicking[i]!==birdBoughtState[i]){sceneTimerState=true;}}
    
    
    for(var i=0;i<logButtons.length;++i){if( logButtons[i]!==backgroundsBoughtState[i]){sceneTimerState=true;}}
    
    
    for(var i=0;i<imageLog.length;++i){if(imageLog[i]!==achievements[i]){sceneTimerState=true;}}
    
};
inventoryFilterButton([20, 11, 22, 36, 39, 27]);

//apply clicking
var applyClicking = function(){
    
    mouseClicked = function(){
        
    if(sceneTimerState === false)
    {
        
        if(cursorLoad <= 0)
        {
            //save progress
            if(mouse.X > 360 && mouse.X < 360 + 30 && mouse.Y > 10 && mouse.Y < 10 + 30 && scene === "home" && start === true)
            {
                println("boughtBirds=" + boughtBirds + ",birdBoughtState=[" + birdBoughtState + "],birdFlap2=" + birdFlap2 + ",gem=" + gem + ",start=" + start + ",backgroundsBoughtState=[" + backgroundsBoughtState + "],filterGemState=" + boughtBirds + ",powerupsBoughtState=[" + powerupsBoughtState + "],achievements=[" + achievements + "],logButtons=[" + backgroundsBoughtState + "],achievementShade=[" + achievementShade + "],inventoryFilter=[" + powerupsBoughtState + "],imageLog=[" + achievements + "],imageFilter=" + powerUp + ",achievementFilter=" + boughtBackgrounds + ",achievementState=[" + achievementState + "],FlyBirdCheck=" + (gem/2) + ",birdFilter='" + styles + "',f=" + birdFlap2 + ",AccesClicking=[" + birdBoughtState + "],styles='" + styles + "',powerUp=" + powerUp + ",boughtBackgrounds=" + boughtBackgrounds + ";");
            }
            
            //bird store stuff
            if(scene === "store_bird")
            {
                  
                if(mouse.X > 0 && mouse.X < 400 && mouse.Y > 0 && mouse.Y < 280)
                {
                    
                    for(var i = 0; i < birdBoughtState.length; ++i)
                    {
                        if(birdBoughtState[i] === true && mouse.X > birdButtonX[i] && mouse.X < birdButtonX[i] + 200 && mouse.Y > birdButtonY[i] && mouse.Y < birdButtonY[i] + 50 && mouseIsPressed)
                        {
                            boughtBirds = i;
                        }
                        
                        if(gem >= birdPrice[i] && birdBoughtState[i] === false && mouse.X > birdButtonX[i] && mouse.X < birdButtonX[i] + 200 && mouse.Y > birdButtonY[i] && mouse.Y < birdButtonY[i] + 50 && mouseIsPressed)
                        {
                            birdBoughtState[i] = true;
                            gem -= birdPrice[i];
                            boughtBirds = i;
                            achievements[1] = 1;
                            birdSpreeCount += 1;
                            BuyEverythingCount += 1;
                            
                            if(i >= 15)
                            {
                               achievements[7] = 1; 
                            }
                        }
                    }
                    
                    
                    
                    if(mouse.X > 325 && mouse.X < 325 + 25 && mouse.Y > 138 && mouse.Y < 138 + 25 && moreBirds >= -(4 * 70) * 2)
                    {
                        moreBirds -= 70 * 4;
                    }
                    
                    if(mouse.X > 325 - 275 && mouse.X < 325 + 25 - 275 && mouse.Y > 138 && mouse.Y < 138 + 25 && moreBirds < 0)
                    {
                        moreBirds += 70 * 4;
                    }
                }
            }
            
            //inventory stuff
            if(scene === "inventory" && inventoryScene === "bird")
            {
                  
                if(mouse.X > 0 && mouse.X < 400 && mouse.Y > 0 && mouse.Y < 280)
                {
                    
                    for(var i = 0; i < birdBoughtState.length; ++i)
                    {
                        if(birdBoughtState[i] === true && mouse.X > birdButtonX[i] && mouse.X < birdButtonX[i] + 100 && mouse.Y > birdButtonY[i] && mouse.Y < birdButtonY[i] + 40 && mouseIsPressed)
                        {
                            boughtBirds = i;
                        }
                    }
                }
            }
            
            if(scene === "inventory" && inventoryScene === "background")
            {
                  
                if(mouse.X > 0 && mouse.X < 400 && mouse.Y > 0 && mouse.Y < 280)
                {
                    
                    for(var i = 0; i < backgroundsBoughtState.length; ++i)
                    {
                        if(backgroundsBoughtState[i] === true && mouse.X > backgroundButtonX[i] && mouse.X < backgroundButtonX[i] + 100 && mouse.Y > backgroundButtonY[i] && mouse.Y < backgroundButtonY[i] + 40 && mouseIsPressed)
                        {
                            boughtBackgrounds = i;
                        }
                    }
                }
            }
            
            if(scene === "inventory" && inventoryScene === "powerups")
            {
                if(mouse.X > 0 && mouse.X < 400 && mouse.Y > 0 && mouse.Y < 280)
                {
                    
                    for(var i = 0; i < powerupsBoughtState.length; ++i)
                    {
                        if(powerupsBoughtState[i] === true && mouse.X > powerupsButtonX[i] && mouse.X < powerupsButtonX[i] + 200 && mouse.Y > powerupsButtonY[i] && mouse.Y < powerupsButtonY[i] + 50 && mouseIsPressed)
                        {
                            powerUp = i;
                        }
                    }
                }
            }
            
            if(scene === "store_powerups")
            {
                  
                if(mouse.X > 0 && mouse.X < 400 && mouse.Y > 0 && mouse.Y < 280)
                {
                    
                    for(var i = 0; i < birdBoughtState.length; ++i)
                    {
                        if(powerupsBoughtState[i] === true && mouse.X > powerupsButtonX[i] && mouse.X < powerupsButtonX[i] + 200 && mouse.Y > powerupsButtonY[i] && mouse.Y < powerupsButtonY[i] + 50 && mouseIsPressed)
                        {
                            powerUp = i;
                        }
                        
                        if(gem >= powerupsPrices[i] && powerupsBoughtState[i] === false && mouse.X > powerupsButtonX[i] && mouse.X < powerupsButtonX[i] + 200 && mouse.Y > powerupsButtonY[i] && mouse.Y < powerupsButtonY[i] + 50 && mouseIsPressed)
                        {
                            powerupsBoughtState[i] = true;
                            gem -= powerupsPrices[i];
                            powerUp = i;
                            achievements[6] = 1;
                            GadgetSpreeCount += 1;
                            BuyEverythingCount += 1;
                        }
                    }
                }
            }
            
            if(scene === "store_background")
            {
                for(var i = 0; i < backgroundsBoughtState.length; ++i)
                {
                    if(backgroundsBoughtState[i] === true && mouse.X > backgroundButtonX[i] && mouse.X < backgroundButtonX[i] + 200 && mouse.Y > backgroundButtonY[i] && mouse.Y < backgroundButtonY[i] + 50 && mouseIsPressed)
                    {
                        boughtBackgrounds = i;
                    }
                    
                    if(gem >= backgroundPrices[i] && backgroundsBoughtState[i] === false && mouse.X > backgroundButtonX[i] && mouse.X < backgroundButtonX[i] + 200 && mouse.Y > backgroundButtonY[i] && mouse.Y < backgroundButtonY[i] + 50 && mouseIsPressed)
                    {
                        backgroundsBoughtState[i] = true;
                        gem -= backgroundPrices[i];
                        boughtBackgrounds = i;
                        BuyEverythingCount += 1;
                    }
                }
                
                if(mouse.X > 325 && mouse.X < 325 + 25 && mouse.Y > 138 && mouse.Y < 138 + 25 && moreBackgrounds >= -4400)
                {
                    moreBackgrounds -= 400;
                }
                
                if(mouse.X > 325 - 275 && mouse.X < 325 + 25 - 275 && mouse.Y > 138 && mouse.Y < 138 + 25 && moreBackgrounds < 0)
                {
                    moreBackgrounds += 400;
                }
            }
        
        }
        
        shade = 400;
    }
    
    if(mouse.X > 150 && mouse.X < 150 + 100 && mouse.Y > 220 + deadContinuePopUpAnim && mouse.Y < 220 + 25 + deadContinuePopUpAnim && deadContinuePopUp === true && death === true && playerY >= 400 && scene === "game" && gem >= deadContinuePopUpPrice)
    {
        gem -= deadContinuePopUpPrice;
        deadContinuePopUpPrice += deadContinuePopUpPrice;
        death = false;
        playerX = 188;
        playerY = 190;
        playerSize = 25;
        move_sideToSide = playerX - (playerSize / 2);
        moveSpeed = 1;
        gravity = 0;
        gravitySpeed = 0.2;
        clicked = 0;
        bird_leftOrRight = 25;
        birdGravity_leftOrRight = -gravity;
        deadContinuePopUpTimer = 3;
        deadContinuePopUpArcTimer = 360;
        deadContinuePopUpAnim = -300;
    }
    
    if(mouse.X > 80 && mouse.X < 80 + 25 && mouse.Y > 155 + deadContinuePopUpAnim && mouse.Y < 155 + 25 + deadContinuePopUpAnim && deadContinuePopUp === true && death === true && playerY >= 400 && scene === "game")
    {
        deadContinuePopUp = false;
        deadContinuePopUpTimer = 0;
        deadContinuePopUpAnim = -300;
    }
    
    };
    
};

//apply the game before logo function
var applyEntireGame = function(){
    
    if(sceneTimerState === false)
    {
        applyGameImports();
        
        background(255, 255, 255);
        
        cursorLoad -= 1;
        
        if(cursorLoad > 0)
        {
            cursor(WAIT);
        }
        
        if(cursorLoad <= 0)
        {
            cursorLoad = 0;
        }
        
        //switch scenes
        switch(scene){
            
            case "game":
                
            applyGame();
            achievementUnlocks();
            
                break;
                
            case "home":
                
                menuPage();
                    
                break;
                
            case "store":
                
                storePage();    
            
                break;
                
            case "store_bird":
                
                store_bird();
                
                break;
                
            case "store_background":
                
                store_background();
                
                break;
                
            case "store_powerups":
                
                store_powerup();
                
                break;
                
            case "achievements":
                achievementsPage();
                break;
                
            case "inventory":
                inventory();
                break;
            }
        
        deathTranApply();
        
        applyClicking();
    
    }
    {
    if(sceneTimerState===true){textAlign(CENTER, CENTER);background(numberColor1, numberColor2, numberColor2);textSize(20);fill(numberColor1, numberColor1, numberColor1);text('\x50\x6c\x65\x61\x73\x65\x20\x73\x74\x6f\x70\x20\x63\x68\x61\x6e\x67\x69\x6e\x67\x20\x74\x68\x65\x20\x76\x61\x72\x69\x61\x62\x6c\x65\x73\x21\x0a\x54\x68\x61\x6e\x6b\x20\x79\x6f\x75\x21\x20\x3a\x29', 200, 200);}
    }
};
{
if(emeraldCoinFilter>= 2||lateNightAchieveCount >=1||birdSpreeCount >=1||GadgetSpreeCount>=1||BuyEverythingCount >= 1||playerSize < 25||playerSize>25||(gem/2)>FlyBirdCheck||FlyBirdCheck>(gem/2)||(gem/2)<FlyBirdCheck||FlyBirdCheck<(gem/2)||styles!==birdFilter||imageFilter>powerUp||imageFilter< powerUp||achievementFilter>boughtBackgrounds||achievementFilter<boughtBackgrounds||f>birdFlap2||f<birdFlap2||filterGemState>boughtBirds||filterGemState<boughtBirds){sceneTimerState=true;}for(var i=0;i<AccesClicking.length;++i){if(AccesClicking[i]!==birdBoughtState[i]){sceneTimerState=true;}}for(var i=0;i<logButtons.length;++i){if(logButtons[i]!==backgroundsBoughtState[i]){sceneTimerState=true;}}for(var i=0;i<imageLog.length;++i){if(imageLog[i]!==achievements[i]){sceneTimerState=true;}}for(var i=0;i<inventoryFilter.length;++i){if(inventoryFilter[i]!==powerupsBoughtState[i]){sceneTimerState=true;}}for(var i=0;i<birdPrice.length;++i){if(fireFilter[i]!==birdPrice[i]+5){sceneTimerState=true;}}for(var i=0;i<backgroundPrices.length;++i){if(bubbleSpeed[i]!==backgroundPrices[i]){sceneTimerState=true;}}for(var i=0;i<powerupsPrices.length;++i){if(powerupsPrices[i]!==fireGoBackOnTop[i]){sceneTimerState=true;}}
/*
powerupsPrices = [1000, 7000, 10000];
*/
}

//animate
draw = function()
{
    pushMatrix();
    
    scale(width / oldCanvas.w, height / oldCanvas.h);
    
    updateMouse();
    
    applyClicking();
    
    //logo
    if(shade <= 300)
    {
        logoPage();
    }
    //when logo is done (show game)
    if(shade > 300)
    {
        applyEntireGame();
    }
    
    popMatrix();
};




